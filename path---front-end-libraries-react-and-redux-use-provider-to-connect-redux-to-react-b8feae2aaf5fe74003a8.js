webpackJsonp([0xa332928b988d],{3568:function(e,n){e.exports={data:{challengeNode:{title:"Use Provider to Connect Redux to React",description:["在上一挑战中，你创建了 Redux store 和 action，分别用于处理消息数组和添加新消息。下一步要为 React 提供访问 Redux store 及发起更新所需的 actions。<code>react-redux</code>包可帮助我们完成这些任务。","React Redux 提供的 API 有两个关键的功能：<code>Provider</code>和<code>connect</code>。你会在另一个挑战中学<code>connect</code>。<code>Provider</code>是 React Redux 包装 React 应用的 wrapper 组件，它允许你访问整个组件树中的 Redux<code>store</code>及<code>dispatch（分发）</code>方法。<code>Provider</code>需要两个 props：Redux store 和 APP 应用的子组件。用于 APP 组件的<code>Provider</code>可这样定义：","<blockquote>&lt;Provider store={store}&gt;<br>&nbsp;&nbsp;&lt;App/&gt;<br>&lt;/Provider&gt;</blockquote>","<hr>","此时，编辑器上显示的是过去几个挑战中所有代码，包括 Redux store、actions、<code>DisplayMessages</code>组件。新出现的代码是底部的<code>AppWrapper</code>组件，这个顶级组件可用于渲染<code>ReactRedux</code>的<code>Provider</code>，并把 Redux 的 store 作为 props 传入。接着，渲染<code>DisplayMessages</code>为子组件。完成这些任务后，你会看到 React 组件渲染到页面上。","<strong>注意：</strong>&nbsp;React Redux 在此可作全局变量，因此你可通过点号表示法访问 Provider。利用这一点，编辑器上的代码把<code>Provider</code>设置为常量，便于你在<code>AppWrapper</code>渲染方法中使用。"],challengeType:6,fields:{slug:"/front-end-libraries/react-and-redux/use-provider-to-connect-redux-to-react",blockName:"React and Redux",tests:[{text:"<code>AppWrapper</code>应渲染。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), '<code>AppWrapper</code>应渲染。');"},{text:"<code>Provider</code>组件应传入相当于 Redux store 的<code>store</code>参数。",testString:"getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return getUserInput('index').replace(/\\s/g,'').includes('<Providerstore={store}>'); })(), '<code>Provider</code>组件应传入相当于 Redux store 的<code>store</code>参数。');"},{text:"<code>DisplayMessages</code>应渲染为<code>AppWrapper</code>的子组件。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').find('DisplayMessages').length === 1; })(), '<code>DisplayMessages</code>应渲染为<code>AppWrapper</code>的子组件。');"},{text:"<code>DisplayMessages</code>组件应渲染 h2、input、button、<code>ul</code>四个元素。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('div').length === 1 && mockedComponent.find('h2').length === 1 && mockedComponent.find('button').length === 1 && mockedComponent.find('ul').length === 1; })(), '<code>DisplayMessages</code>组件应渲染 h2、input、button、<code>ul</code>四个元素。');"}]},required:[{link:null,raw:null,src:"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{link:null,raw:null,src:"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"},{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js"}],files:{indexhtml:null,indexjs:null,indexjsx:{key:"indexjsx",ext:"jsx",name:"index",contents:"// Redux 代码：\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\n\n\nconst store = Redux.createStore(messageReducer);\n\n// React 代码：\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    const currentMessage = this.state.input;\n    this.setState({\n      input: '',\n      messages: this.state.messages.concat(currentMessage)\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // 在此渲染 Provider\n\n  // 请在本行以上添加你的代码\n};",head:"",tail:"ReactDOM.render(<AppWrapper />, document.getElementById('root'))"}}}},pathContext:{challengeMeta:{introPath:"",template:"<body><div id='root'></div>${ source || '' }</body>",required:[{link:null,raw:null,src:"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{link:null,raw:null,src:"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"},{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js"}],nextChallengePath:"/front-end-libraries/react-and-redux/map-state-to-props",id:"5a24c314108439a4d4036144"},slug:"/front-end-libraries/react-and-redux/use-provider-to-connect-redux-to-react"}}}});
//# sourceMappingURL=path---front-end-libraries-react-and-redux-use-provider-to-connect-redux-to-react-b8feae2aaf5fe74003a8.js.map