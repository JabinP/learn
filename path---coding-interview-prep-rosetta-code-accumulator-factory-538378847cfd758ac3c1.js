webpackJsonp([0xe6ca208127c3],{3347:function(t,e){t.exports={data:{challengeNode:{title:"Accumulator factory",description:["<p>创建一个接收单个(数值)参数并返回另一个累加器函数的函数。返回的累加器函数依次接受一个数值参数，并返回迄今为止传递给累加器的所有数值的总和（包括在创建累加器时传递的初始值）。</p>","<p>规则：</p>","<p>不得使用全局变量：</p>","<p>提示：</p>","<p>闭包保存外部状态。</p>"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/accumulator-factory",blockName:"Rosetta Code",tests:[{text:"<code>accumulator</code> 是一个函数。",testString:"assert(typeof accumulator === 'function', '<code>accumulator</code> 是一个函数。');"},{text:"<code>accumulator(0)</code> 应返回一个函数。",testString:"assert(typeof accumulator(0) === 'function', '<code>accumulator(0)</code> 应返回一个函数。');"},{text:"<code>accumulator(0)(2)</code> 应返回一个数字。",testString:"assert(typeof accumulator(0)(2) === 'number', '<code>accumulator(0)(2)</code> 应返回一个数字。');"},{text:"传入值3、-4、1.5和5，应返回5.5。",testString:"assert(testFn(5) === 5.5, '传入值3、-4、1.5和5，应返回5.5。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function accumulator (sum) {\n  // 祝你好运！\n}",head:"",tail:"const testFn = typeof accumulator(3) === 'function' && accumulator(3);\nif (testFn) {\n  testFn(-4);\n  testFn(1.5);\n}"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/ackermann-function",id:"594810f028c0303b75339ace"},slug:"/coding-interview-prep/rosetta-code/accumulator-factory"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-accumulator-factory-538378847cfd758ac3c1.js.map