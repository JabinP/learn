{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-es-6-write-concise-declarative-functions-with-es-6-215fc7754cea85830efd.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-es-6-write-concise-declarative-functions-with-es-6.json"],"names":["webpackJsonp","3897","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,+CAAAC,aAAA,+QAAwU,oQAAsQ,yEAAAC,cAAA,EAAAC,QAAoHC,KAAA,8FAAAC,UAAA,MAAAC,QAAiIC,KAAA,oCAAAC,WAAA,2FAAmJD,KAAA,8BAAAC,WAAA,+IAAiMD,KAAA,kEAAAC,WAAA,uHAA4MC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,mMAAwPC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,mGAAAC,GAAA,4BAAoMrB,KAAA","file":"path---javascript-algorithms-and-data-structures-es-6-write-concise-declarative-functions-with-es-6-215fc7754cea85830efd.js","sourcesContent":["webpackJsonp([39612669355289],{\n\n/***/ 3897:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Write Concise Declarative Functions with ES6\",\"description\":[\"在 ES5 中，当我们需要在对象中定义一个函数的时候，我们必须如下面这般使用<code>function</code>关键字：\",\"<blockquote>const person = {<br>&nbsp;&nbsp;name: \\\"Taylor\\\",<br>&nbsp;&nbsp;sayHello: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello! My name is ${this.name}.`;<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"在 ES6 语法的对象中定义函数的时候，你可以完全删除<code>function</code>关键字和冒号。请看以下例子：\",\"<blockquote>const person = {<br>&nbsp;&nbsp;name: \\\"Taylor\\\",<br>&nbsp;&nbsp;sayHello() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello! My name is ${this.name}.`;<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"<hr>\",\"使用以上这种简短的语法，重构在<code>bicycle</code>对象中的<code>setGear</code>函数。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6\",\"blockName\":\"ES6\",\"tests\":[{\"text\":\"不应使用<code>function</code>关键字定义方法。\",\"testString\":\"assert(!getUserInput('index').match(/function/), '不应使用<code>function</code>关键字定义方法。');\"},{\"text\":\"<code>setGear</code>应是一个函数。\",\"testString\":\"assert(typeof bicycle.setGear === 'function' && getUserInput('index').match(/setGear\\\\s*\\\\(.+\\\\)\\\\s*\\\\{/), '<code>setGear</code>应是一个函数。');\"},{\"text\":\"执行<code>bicycle.setGear(48)</code>应可以让<code>gear</code>的值变为 48。\",\"testString\":\"assert((new bicycle.setGear(48)).gear === 48, '执行<code>bicycle.setGear(48)</code>应可以让<code>gear</code>的值变为 48。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 在这行以下修改代码\\nconst bicycle = {\\n  gear: 2,\\n  setGear: function(newGear) {\\n    \\\"use strict\\\";\\n    this.gear = newGear;\\n  }\\n};\\n// 在这行以上修改代码\\nbicycle.setGear(3);\\nconsole.log(bicycle.gear);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function\",\"id\":\"587d7b8b367417b2b2512b50\"},\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-es-6-write-concise-declarative-functions-with-es-6-215fc7754cea85830efd.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Write Concise Declarative Functions with ES6\",\"description\":[\"在 ES5 中，当我们需要在对象中定义一个函数的时候，我们必须如下面这般使用<code>function</code>关键字：\",\"<blockquote>const person = {<br>&nbsp;&nbsp;name: \\\"Taylor\\\",<br>&nbsp;&nbsp;sayHello: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello! My name is ${this.name}.`;<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"在 ES6 语法的对象中定义函数的时候，你可以完全删除<code>function</code>关键字和冒号。请看以下例子：\",\"<blockquote>const person = {<br>&nbsp;&nbsp;name: \\\"Taylor\\\",<br>&nbsp;&nbsp;sayHello() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello! My name is ${this.name}.`;<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"<hr>\",\"使用以上这种简短的语法，重构在<code>bicycle</code>对象中的<code>setGear</code>函数。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6\",\"blockName\":\"ES6\",\"tests\":[{\"text\":\"不应使用<code>function</code>关键字定义方法。\",\"testString\":\"assert(!getUserInput('index').match(/function/), '不应使用<code>function</code>关键字定义方法。');\"},{\"text\":\"<code>setGear</code>应是一个函数。\",\"testString\":\"assert(typeof bicycle.setGear === 'function' && getUserInput('index').match(/setGear\\\\s*\\\\(.+\\\\)\\\\s*\\\\{/), '<code>setGear</code>应是一个函数。');\"},{\"text\":\"执行<code>bicycle.setGear(48)</code>应可以让<code>gear</code>的值变为 48。\",\"testString\":\"assert((new bicycle.setGear(48)).gear === 48, '执行<code>bicycle.setGear(48)</code>应可以让<code>gear</code>的值变为 48。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 在这行以下修改代码\\nconst bicycle = {\\n  gear: 2,\\n  setGear: function(newGear) {\\n    \\\"use strict\\\";\\n    this.gear = newGear;\\n  }\\n};\\n// 在这行以上修改代码\\nbicycle.setGear(3);\\nconsole.log(bicycle.gear);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function\",\"id\":\"587d7b8b367417b2b2512b50\"},\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-es-6-write-concise-declarative-functions-with-es-6.json\n// module id = 3897\n// module chunks = 39612669355289"],"sourceRoot":""}