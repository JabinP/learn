!function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={exports:{},id:s,loaded:!1};return e[s].call(n.exports,n,n.exports,r),n.loaded=!0,n.exports}r.m=e,r.c=t,r.p="",r(0)}([function(module,exports){document.addEventListener("DOMContentLoaded",function(){var testTimeout=5e3,Rx=document.Rx,frameReady=document.__frameReady,chai=parent.chai,source=document.__source,__getUserInput=document.__getUserInput||(e=>e),checkChallengePayload=document.__checkChallengePayload;function isPromise(e){return e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}const DeepEqual=(e,t)=>JSON.stringify(e)===JSON.stringify(t);var DeepFreeze=e=>(Object.freeze(e),Object.getOwnPropertyNames(e).forEach(function(t){!e.hasOwnProperty(t)||null===e[t]||"object"!=typeof e[t]&&"function"!=typeof e[t]||Object.isFrozen(e[t])||DeepFreeze(e[t])}),e);document.Enzyme&&(window.Enzyme=document.Enzyme),document.__getJsOutput=function getJsOutput(){if(window.__err)return window.__err;let output;try{output=eval(source)}catch(e){output=e.message+"\n"+e.stack,window.__err=e}return output},document.__runTests=function runTests(tests=[]){const code=source,editor={getValue:()=>source};return window.__err?Rx.Observable.from(tests).map(e=>Object.assign({},e,{err:window.__err.message+"\n"+window.__err.stack,message:window.__err.message,stack:window.__err.stack})).toArray().do(()=>{window.__err=null}):Rx.Observable.from(tests,null,null,Rx.Scheduler.default).delay(200).flatMap(({text:text,testString:testString})=>{const assert=chai.assert,getUserInput=__getUserInput,newTest={text:text,testString:testString};let test,__result;try{test=eval(testString),"function"==typeof test&&(__result=test(getUserInput),isPromise(__result)&&(__result=Rx.Observable.fromPromise(__result))),__result&&"function"==typeof __result.subscribe||(__result=Rx.Observable.of(null))}catch(e){__result=Rx.Observable.throw(e)}return __result.timeout(testTimeout).map(()=>(newTest.pass=!0,newTest)).catch(e=>{let t=e.message||"";const r=t.indexOf(": expected");return-1!==r&&(t=t.slice(0,r)),t=t.replace(/<code>(.*?)<\/code>/g,"$1"),newTest.err=e.message+"\n"+e.stack,newTest.stack=e.stack,newTest.message=t,Rx.Observable.of(newTest)})}).toArray()},frameReady.next({checkChallengePayload:checkChallengePayload})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,