webpackJsonp([76312545790387],{3907:function(e,t){e.exports={data:{challengeNode:{title:"Implement the filter Method on a Prototype",description:["为了加深对<code>filter</code>的理解，现在我们来自己实现一下<code>Array.prototype.filter()</code>方法。","可以用<code>for</code>循环或<code>Array.prototype.forEach()</code>。","请注意：纯函数可以改变其作用域内定义的局部变量，但我们最好不要这样做。","<hr>","编写一个和<code>Array.prototype.filter()</code>功能一样的<code>Array.prototype.myFilter()</code>方法。你可以用<code>for</code>循环或<code>Array.prototype.forEach()</code>方法。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/functional-programming/implement-the-filter-method-on-a-prototype",blockName:"Functional Programming",tests:[{text:"<code>new_s</code>应等于<code>[23, 65, 5]</code>。",testString:"assert(JSON.stringify(new_s) === JSON.stringify([23, 65, 5]), '<code>new_s</code>应等于<code>[23, 65, 5]</code>。');"},{text:"不能使用<code>filter</code>方法。",testString:"assert(!code.match(/\\.filter/g), '不能使用<code>filter</code>方法。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"// 全局变量\nvar s = [23, 65, 98, 5];\n\nArray.prototype.myFilter = function(callback){\n  var newArray = [];\n  // 请在本行以下添加你的代码\n  \n  // 请在本行以上添加你的代码\n  return newArray;\n\n};\n\nvar new_s = s.myFilter(function(item){\n  return item % 2 === 1;\n});",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/functional-programming/return-part-of-an-array-using-the-slice-method",id:"587d7b8f367417b2b2512b64"},slug:"/javascript-algorithms-and-data-structures/functional-programming/implement-the-filter-method-on-a-prototype"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-functional-programming-implement-the-filter-method-on-a-prototype-ae99daab0a4d3bb0ae43.js.map