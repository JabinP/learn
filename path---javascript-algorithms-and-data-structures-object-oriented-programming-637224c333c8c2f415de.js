webpackJsonp([65015522102020],{3979:function(t,e){t.exports={data:{markdownRemark:{frontmatter:{block:"Object Oriented Programming"},html:"<h2>Introduction to the Object Oriented Programming Challenges</h2>\n<p>软件开发的核心是解决问题或通过计算获得结果。软件开发过程首先定义一个问题，然后提出一个解决方案。面向对象编程是软件开发过程的几种主要方法之一。</p>\n<p>顾名思义，面向对象编程将代码组织成对象定义。这些有时被称为类，它们将数据和相关行为组合在一起。数据是对象的属性，行为(或函数)是方法。</p>\n<p>对象结构能够在程序中灵活使用，比如对象可以通过调用数据并将数据传递给另一个对象的方法来传递信息。此外，新对象可以从基类（或父类）接收或继承所有功能，这有助于减少重复代码。</p>\n<p>对于编程方法的选择取决于几个因素，其中包括问题的类型、如何构造数据以及算法等。本节将介绍 JavaScript 中面向对象的编程原则。</p>"},allChallengeNode:{edges:[{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object"},title:"Create a Basic JavaScript Object"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-dot-notation-to-access-the-properties-of-an-object"},title:"Use Dot Notation to Access the Properties of an Object"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-method-on-an-object"},title:"Create a Method on an Object"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/make-code-more-reusable-with-the-this-keyword"},title:"Make Code More Reusable with the this Keyword"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/define-a-constructor-function"},title:"Define a Constructor Function"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-constructor-to-create-objects"},title:"Use a Constructor to Create Objects"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/extend-constructors-to-receive-arguments"},title:"Extend Constructors to Receive Arguments"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/verify-an-objects-constructor-with-instanceof"},title:"Verify an Object's Constructor with instanceof"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-own-properties"},title:"Understand Own Properties"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-prototype-properties-to-reduce-duplicate-code"},title:"Use Prototype Properties to Reduce Duplicate Code"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties"},title:"Iterate Over All Properties"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property"},title:"Understand the Constructor Property"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/change-the-prototype-to-a-new-object"},title:"Change the Prototype to a New Object"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype"},title:"Remember to Set the Constructor Property when Changing the Prototype"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from"},title:"Understand Where an Object’s Prototype Comes From"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain"},title:"Understand the Prototype Chain"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself"},title:"Use Inheritance So You Don't Repeat Yourself"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype"},title:"Inherit Behaviors from a Supertype"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent"},title:"Set the Child's Prototype to an Instance of the Parent"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property"},title:"Reset an Inherited Constructor Property"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance"},title:"Add Methods After Inheritance"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods"},title:"Override Inherited Methods"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects"},title:"Use a Mixin to Add Common Behavior Between Unrelated Objects"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-closure-to-protect-properties-within-an-object-from-being-modified-externally"},title:"Use Closure to Protect Properties Within an Object from Being Modified Externally"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-immediately-invoked-function-expression-iife"},title:"Understand the Immediately Invoked Function Expression (IIFE)"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-an-iife-to-create-a-module"},title:"Use an IIFE to Create a Module"}}]}},pathContext:{block:"object-oriented-programming",slug:"/javascript-algorithms-and-data-structures/object-oriented-programming"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-object-oriented-programming-637224c333c8c2f415de.js.map