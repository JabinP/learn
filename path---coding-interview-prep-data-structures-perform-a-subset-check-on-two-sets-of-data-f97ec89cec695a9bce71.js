webpackJsonp([0xbc44e4d94875],{2843:function(e,t){e.exports={data:{challengeNode:{title:"Perform a Subset Check on Two Sets of Data",description:["在本次练习中我们将对两个集合元素做子集测试。我们会为<code>Set</code>数据结构创建<code>subset</code>方法。第一个集合会与第二个集合做对比，如果第二个集合完全包含第一个集合内的所有元素，则该方法返回 true 。","举个例子，假设有集合<code>setA = ['a','b']</code>与<code>setB = ['a','b','c','d']</code>，那么<code>setA.subset(setB)</code>的运算结果应该为<code>true</code>。"],challengeType:1,fields:{slug:"/coding-interview-prep/data-structures/perform-a-subset-check-on-two-sets-of-data",blockName:"Data Structures",tests:[{text:"<code>Set</code>应该有<code>union</code>方法。",testString:"assert(function(){var test = new Set(); return (typeof test.subset === 'function')}, '<code>Set</code>应该有<code>union</code>方法。');"},{text:"如果第二个集合完全包含第一个集合，则<code>union</code>方法应返回<code>true</code>。",testString:"assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setB.add('b'); setB.add('c'); setB.add('a'); setB.add('d'); var subsetSetAB = setA.subset(setB);return (subsetSetAB === true)}, '如果第二个集合完全包含第一个集合，则<code>union</code>方法应返回<code>true</code>。');"},{text:"<code>['a', 'b'].subset(['a', 'b', 'c', 'd'])</code>应返回<code>true</code>。",testString:"assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setB.add('a'); setB.add('b'); setB.add('c'); setB.add('d'); var subsetSetAB = setA.subset(setB); return (subsetSetAB === true)}, \"<code>['a', 'b'].subset(['a', 'b', 'c', 'd'])</code>应返回<code>true</code>。\");"},{text:"<code>['a', 'b', 'c'].subset(['a', 'b'])</code>应返回<code>false</code>。",testString:"assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setA.add('c'); setB.add('a'); setB.add('b'); var subsetSetAB = setA.subset(setB); return (subsetSetAB === false)}, \"<code>['a', 'b', 'c'].subset(['a', 'b'])</code>应返回<code>false</code>。\");"},{text:"<code>[].subset([])</code>应该返回<code>true</code>。",testString:"assert(function(){var setA = new Set(); var setB = new Set(); var subsetSetAB = setA.subset(setB); return (subsetSetAB === true)}, '<code>[].subset([])</code>应该返回<code>true</code>。');"},{text:"<code>['a', 'b'].subset(['c', 'd'])</code>应返回<code>false</code>。",testString:"assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setB.add('c'); setB.add('d'); var subsetSetAB = setA.subset(setB); return (subsetSetAB === false)}, \"<code>['a', 'b'].subset(['c', 'd'])</code>应返回<code>false</code>。\");"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function Set() {\n    // collection 变量用来存储集合中的元素\n    var collection = [];\n    // 当集合中存在 element 元素时返回 true 否则返回 false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // 该方法会返回集合内所有元素\n    this.values = function() {\n        return collection;\n    };\n    // 该方法会把 element 添加到集合中\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // 该方法用于从集合中移除 element 元素\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // 该方法返回集合长度\n    this.size = function() {\n        return collection.length;\n    };\n    // 该方法会返回两个集合的交集\n    this.union = function(otherSet) {\n        var unionSet = new Set();\n        var firstSet = this.values();\n        var secondSet = otherSet.values();\n        firstSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        secondSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        return unionSet;\n    };\n    // 该方法会返回两个集合的交集\n    this.intersection = function(otherSet) {\n        var intersectionSet = new Set();\n        var firstSet = this.values();\n        firstSet.forEach(function(e){\n            if(otherSet.has(e)){\n                intersectionSet.add(e);\n            }\n        });\n        return intersectionSet;\n    };\n    // 该方法会返回两个集合的差集\n    this.difference = function(otherSet) {\n        var differenceSet = new Set();\n        var firstSet = this.values();\n        firstSet.forEach(function(e){\n            if(!otherSet.has(e)){\n                differenceSet.add(e);\n            }\n        });\n        return differenceSet;\n    };\n    // 请把你的代码写在这条注释以下\n    // 请把你的代码写在这条注释以上\n}",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/data-structures/create-and-add-to-sets-in-es6",id:"587d8254367417b2b2512c6f"},slug:"/coding-interview-prep/data-structures/perform-a-subset-check-on-two-sets-of-data"}}}});
//# sourceMappingURL=path---coding-interview-prep-data-structures-perform-a-subset-check-on-two-sets-of-data-f97ec89cec695a9bce71.js.map