{"version":3,"sources":["webpack:///path---front-end-libraries-react-use-the-lifecycle-method-componentdidmount-574b9cea21f418000dd5.js","webpack:///./.cache/json/front-end-libraries-react-use-the-lifecycle-method-componentdidmount.json"],"names":["webpackJsonp","3610","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6CAAAC,aAAA,qcAAAC,cAAA,EAAAC,QAAqiBC,KAAA,wEAAAC,UAAA,QAAAC,QAA6GC,KAAA,wEAAAC,WAAA,0QAAsWD,KAAA,uDAAAC,WAAA,0RAAqWD,KAAA,mFAAAC,WAAA,2rBAAiyBC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,yZAA8cC,KAAA,GAAAC,KAAA,wEAA0FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,iDAAAC,GAAA,4BAAuGxB,KAAA","file":"path---front-end-libraries-react-use-the-lifecycle-method-componentdidmount-574b9cea21f418000dd5.js","sourcesContent":["webpackJsonp([119594947926052],{\n\n/***/ 3610:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use the Lifecycle Method componentDidMount\",\"description\":[\"某些时候，大多数 web 开发人员需要调用 API 端点来检索数据。如果你正在使用 React，知道在哪里执行这个动作是很重要的。\",\"React 的最佳实践是在生命周期方法<code>componentDidMount()</code>中对服务器进行 API 调用或任何其他调用。将组件装载到 DOM 后会调用此方法。此处对<code>setState()</code>的任何调用都将触发组件的重新渲染。在此方法中调用 API 并使用 API​​ 返回的数据设置 state 时，一旦收到数据，它将自动触发更新。\",\"<hr>\",\"<code>componentDidMount()</code>中有一个模拟 API 调用。它在 2.5 秒后设置 state，以模拟调用服务器检索数据。本示例请求站点的当前活动用户总数。在 render 方法中，把<code>activeUsers</code>渲染到<code>h1</code>标签中。观看预览中发生的事情，随意更改超时时间以查看不同的效果。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/use-the-lifecycle-method-componentdidmount\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该渲染一个包含<code>h1</code>标签的<code>div</code>元素。\",\"testString\":\"assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return (mockedComponent.find('div').length === 1 && mockedComponent.find('h1').length === 1); })(), '<code>MyComponent</code>应该渲染一个包含<code>h1</code>标签的<code>div</code>元素。');\"},{\"text\":\"组件 state 应该用<code>componentDidMount</code>中的延时函数来更新。\",\"testString\":\"assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return new RegExp('setTimeout(.|\\\\n)+setState(.|\\\\n)+activeUsers').test(String(mockedComponent.instance().componentDidMount)); })(), '组件 state 应该用<code>componentDidMount</code>中的延时函数来更新。');\"},{\"text\":\"<code>h1</code>标签应该从<code>MyComponent</code>的 state 渲染<code>activeUsers</code>值。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ activeUsers: 1237 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const second = () => { mockedComponent.setState({ activeUsers: 1000 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const firstValue = await first(); const secondValue = await second(); assert(new RegExp('1237').test(firstValue) && new RegExp('1000').test(secondValue), '<code>h1</code>标签应该从<code>MyComponent</code>的 state 渲染<code>activeUsers</code>值。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      activeUsers: null\\n    };\\n  }\\n  componentDidMount() {\\n    setTimeout( () => {\\n      this.setState({\\n        activeUsers: 1273\\n      });\\n    }, 2500);\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <h1>Active Users: { /* change code here */ }</h1>\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/add-event-listeners\",\"id\":\"5a24c314108439a4d403617d\"},\"slug\":\"/front-end-libraries/react/use-the-lifecycle-method-componentdidmount\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-use-the-lifecycle-method-componentdidmount-574b9cea21f418000dd5.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use the Lifecycle Method componentDidMount\",\"description\":[\"某些时候，大多数 web 开发人员需要调用 API 端点来检索数据。如果你正在使用 React，知道在哪里执行这个动作是很重要的。\",\"React 的最佳实践是在生命周期方法<code>componentDidMount()</code>中对服务器进行 API 调用或任何其他调用。将组件装载到 DOM 后会调用此方法。此处对<code>setState()</code>的任何调用都将触发组件的重新渲染。在此方法中调用 API 并使用 API​​ 返回的数据设置 state 时，一旦收到数据，它将自动触发更新。\",\"<hr>\",\"<code>componentDidMount()</code>中有一个模拟 API 调用。它在 2.5 秒后设置 state，以模拟调用服务器检索数据。本示例请求站点的当前活动用户总数。在 render 方法中，把<code>activeUsers</code>渲染到<code>h1</code>标签中。观看预览中发生的事情，随意更改超时时间以查看不同的效果。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/use-the-lifecycle-method-componentdidmount\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该渲染一个包含<code>h1</code>标签的<code>div</code>元素。\",\"testString\":\"assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return (mockedComponent.find('div').length === 1 && mockedComponent.find('h1').length === 1); })(), '<code>MyComponent</code>应该渲染一个包含<code>h1</code>标签的<code>div</code>元素。');\"},{\"text\":\"组件 state 应该用<code>componentDidMount</code>中的延时函数来更新。\",\"testString\":\"assert((() => { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return new RegExp('setTimeout(.|\\\\n)+setState(.|\\\\n)+activeUsers').test(String(mockedComponent.instance().componentDidMount)); })(), '组件 state 应该用<code>componentDidMount</code>中的延时函数来更新。');\"},{\"text\":\"<code>h1</code>标签应该从<code>MyComponent</code>的 state 渲染<code>activeUsers</code>值。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ activeUsers: 1237 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const second = () => { mockedComponent.setState({ activeUsers: 1000 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const firstValue = await first(); const secondValue = await second(); assert(new RegExp('1237').test(firstValue) && new RegExp('1000').test(secondValue), '<code>h1</code>标签应该从<code>MyComponent</code>的 state 渲染<code>activeUsers</code>值。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      activeUsers: null\\n    };\\n  }\\n  componentDidMount() {\\n    setTimeout( () => {\\n      this.setState({\\n        activeUsers: 1273\\n      });\\n    }, 2500);\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <h1>Active Users: { /* change code here */ }</h1>\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/add-event-listeners\",\"id\":\"5a24c314108439a4d403617d\"},\"slug\":\"/front-end-libraries/react/use-the-lifecycle-method-componentdidmount\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-use-the-lifecycle-method-componentdidmount.json\n// module id = 3610\n// module chunks = 119594947926052"],"sourceRoot":""}