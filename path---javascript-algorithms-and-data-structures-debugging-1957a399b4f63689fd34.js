webpackJsonp([0x7d052da00490],{3873:function(e,a){e.exports={data:{markdownRemark:{frontmatter:{block:"Debugging"},html:'<h2>Introduction to the Debugging Challenges</h2>\n<p>对程序员来说，调试是一种非常有用并且必不可少到技能。在测试阶段，通过调试检查代码是否按预期执行。\b调试就是找 bug 然后修复 bug 的过程。你花时间写了一段漂亮的代码，感觉良好很难看出有错误。 代码中的错误通常有三种情形：1）语法错误导致程序停止运行，2）代码无法执行或具有意外行为导致运行时错误，以及 \b3）代码有语义（逻辑）错误，没有实现原来的意图。</p>\n<p>主流的代码编辑器（还有你的经验）可以帮你发现语法错误。语义和运行时错误会难找一点。这些错误可能会导致程序崩溃，死循环，或者输出错误的结果。调试就是去理解代码为什么会出现这样的错误。</p>\n<p>语法错误的示例 - 通常会被代码编辑器检测到：</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">funtion willNotWork( {\n  console.log(&quot;Yuck&quot;);\n}\n// &quot;function&quot; 关键字拼写错误而且在最后缺少括号</code></pre>\n      </div>\n<p>以下是运行时错误的示例 - 通常在程序执行时检测到：</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">function loopy() {\n  while(true) {\n    console.log(&quot;Hello, world!&quot;);\n  }\n}\n// 调用 loopy 函数会进入一个死循环，这可能会导致浏览器崩溃。</code></pre>\n      </div>\n<p>语义错误的示例 - 通常在测试代码输出结果时被检测到：</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text">function calcAreaOfRect(w, h) {\n  return w + h; // 应该是 w * h\n}\nlet myRectArea = calcAreaOfRect(2, 3);\n// 语法和执行过程都没错，但是结果是错的。</code></pre>\n      </div>\n<p>调试本身总是令人沮丧的，但它有助于让你学会一种逐步检查代码的方法。这意味着你要去检查中间值和变量类型，看看它们是否是你所期望的。在这过程中，运用排除法，你很快就能找到问题的所在。</p>\n<p>举个例子：你可以直接从整段代码的中间开始检查代码中的值，将检查的区间先排除一半，如果出现了 bug 说明代码前半部分存在错误，反之，说明代码后半部分存在错误。</p>\n<p>本节将介绍一些有用的工具来查找 bug，以及常见的使用情形。 好消息是，调试并不难，只需花一点时间练习就能掌握。</p>'},allChallengeNode:{edges:[{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/use-the-javascript-console-to-check-the-value-of-a-variable"},title:"Use the JavaScript Console to Check the Value of a Variable"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/understanding-the-differences-between-the-freecodecamp-and-browser-console"},title:"Understanding the Differences between the freeCodeCamp and Browser Console"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/use-typeof-to-check-the-type-of-a-variable"},title:"Use typeof to Check the Type of a Variable"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-misspelled-variable-and-function-names"},title:"Catch Misspelled Variable and Function Names"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-unclosed-parentheses-brackets-braces-and-quotes"},title:"Catch Unclosed Parentheses, Brackets, Braces and Quotes"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-mixed-usage-of-single-and-double-quotes"},title:"Catch Mixed Usage of Single and Double Quotes"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator"},title:"Catch Use of Assignment Operator Instead of Equality Operator"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call"},title:"Catch Missing Open and Closing Parenthesis After a Function Call"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-arguments-passed-in-the-wrong-order-when-calling-a-function"},title:"Catch Arguments Passed in the Wrong Order When Calling a Function"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/catch-off-by-one-errors-when-using-indexing"},title:"Catch Off By One Errors When Using Indexing"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/use-caution-when-reinitializing-variables-inside-a-loop"},title:"Use Caution When Reinitializing Variables Inside a Loop"}},{node:{fields:{slug:"/javascript-algorithms-and-data-structures/debugging/prevent-infinite-loops-with-a-valid-terminal-condition"},title:"Prevent Infinite Loops with a Valid Terminal Condition"}}]}},pathContext:{block:"debugging",slug:"/javascript-algorithms-and-data-structures/debugging"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-debugging-1957a399b4f63689fd34.js.map