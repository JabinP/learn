webpackJsonp([2183600557427],{3962:function(e,t){e.exports={data:{challengeNode:{title:"Override Inherited Methods",description:["在上一个挑战中，我们学习了一个对象可以通过复制另一个对象的<code>原型</code>来继承其属性和行为（或方法）：","<blockquote>ChildObject.prototype = Object.create(ParentObject.prototype);</blockquote>","然后，<code>ChildObject</code>将自己的方法链接到它的<code>原型</code>中，我们可以像这样访问：","<blockquote>ChildObject.prototype.methodName = function() {...};</blockquote>","我们还可以重写继承的方法。以同样的方式——通过使用一个与需要重写的方法相同的方法名，向<code>ChildObject.prototype</code>中添加方法。","请看下面的举例：<code>Bird</code>重写了从<code>Animal</code>继承来的<code>eat()</code>方法：",'<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;return "nom nom nom";<br>};<br>function Bird() { }<br><br>// 继承了 Animal 的所有方法<br>Bird.prototype = Object.create(Animal.prototype);<br><br>// Bird.eat() 重写了 Animal.eat() 方法<br>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;return "peck peck peck";<br>};</blockquote>',"如果你有一个实例：<code>let duck = new Bird();</code>，然后你调用了<code>duck.eat()</code>，以下就是 JavaScript 在<code>duck</code>的<code>原型</code>链上寻找方法的过程：","1. duck => 这里定义了 eat() 方法吗？没有。","2. Bird => 这里定义了 eat() 方法吗？=> 是的。执行它并停止往上搜索。","3. Animal => 这里也定义了 eat() 方法，但是 JavaScript 在到达这层原型链之前已停止了搜索。","4. Object => JavaScript 在到达这层原型链之前也已经停止了搜索。","<hr>",'重写<code>Penguin</code>的<code>fly()</code>方法，使其返回 "Alas, this is a flightless bird."'],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods",blockName:"Object Oriented Programming",tests:[{text:'<code>penguin.fly()</code>方法应该返回字符串："Alas, this is a flightless bird."',testString:'assert(penguin.fly() === "Alas, this is a flightless bird.", \'<code>penguin.fly()</code>方法应该返回字符串："Alas, this is a flightless bird."\');'},{text:'The <code>bird.fly()</code>方法应该返回 "I am flying!"',testString:'assert((new Bird()).fly() === "I am flying!", \'The <code>bird.fly()</code>方法应该返回 "I am flying!"\');'}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'function Bird() { }\n\nBird.prototype.fly = function() { return "I am flying!"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// 请把你的代码写在这条注释以下\n\n\n\n// 请把你的代码写在这条注释以下\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());',head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects",id:"587d7db1367417b2b2512b88"},slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-object-oriented-programming-override-inherited-methods-05b2ba967280ecf44abf.js.map