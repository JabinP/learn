{"version":3,"sources":["webpack:///path---front-end-libraries-react-render-state-in-the-user-interface-another-way-edb447233d1d99046734.js","webpack:///./.cache/json/front-end-libraries-react-render-state-in-the-user-interface-another-way.json"],"names":["webpackJsonp","3596","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,iDAAAC,aAAA,0eAAAC,cAAA,EAAAC,QAA8kBC,KAAA,4EAAAC,UAAA,QAAAC,QAAiHC,KAAA,2FAAAC,WAAA,yLAAwSD,KAAA,qEAAAC,WAAA,4KAAqQD,KAAA,kDAA4CC,WAAA,4JAAsLD,KAAA,wDAAAC,WAAA,4cAAuhBC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,uYAA4bC,KAAA,GAAAC,KAAA,wEAA0FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,0DAAAC,GAAA,4BAAgHxB,KAAA","file":"path---front-end-libraries-react-render-state-in-the-user-interface-another-way-edb447233d1d99046734.js","sourcesContent":["webpackJsonp([86990611597195],{\n\n/***/ 3596:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Render State in the User Interface Another Way\",\"description\":[\"还有另一种方法可以访问组件中的<code>state</code>。在<code>render()</code>方法中，在<code>return</code>语句之前，你可以直接编写 JavaScript。例如，你可以声明函数、从<code>state</code>或<code>props</code>访问数据、对此数据执行计算等。然后，你可以将任何数据赋值给你在<code>return</code>语句中可以访问的变量。\",\"<hr>\",\"在<code>MyComponent</code>的 render 方法中，定义一个名为<code>name</code>的<code>常量</code>，并将其设置为组件<code>state</code>中的 name 值。因为可以直接在代码部分编写 JavaScript，所以不需要用大括号括起来。\",\"接下来，在 return 语句中，在<code>h1</code>标签中渲染变量<code>name</code>的值。记住，在 return 语句中需要使用 JSX 语法（用到 JavaScript 的花括号）。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/render-state-in-the-user-interface-another-way\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该有一个键<code>name</code>，其值<code>freeCodeCamp</code>存储在其 state 中。\",\"testString\":\"assert(Enzyme.mount(React.createElement(MyComponent)).state('name') === 'freeCodeCamp', '<code>MyComponent</code>应该有一个键<code>name</code>，其值<code>freeCodeCamp</code>存储在其 state 中。');\"},{\"text\":\"<code>MyComponent</code>应该在<code>div</code>中渲染一个<code>h1</code>标题。\",\"testString\":\"assert(/<div><h1>.*<\\\\/h1><\\\\/div>/.test(Enzyme.mount(React.createElement(MyComponent)).html()), '<code>MyComponent</code>应该在<code>div</code>中渲染一个<code>h1</code>标题。');\"},{\"text\":\"渲染的<code>h1</code>标签应该包含<code>{name}</code>的引用。\",\"testString\":\"getUserInput => assert(/<h1>\\\\n*\\\\s*\\\\{\\\\s*name\\\\s*\\\\}\\\\s*\\\\n*<\\\\/h1>/.test(getUserInput('index')), '渲染的<code>h1</code>标签应该包含<code>{name}</code>的引用。');\"},{\"text\":\"渲染的<code>h1</code>标题中应该包含一段文本，这段文本是从组件的 state 中渲染出来的。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ name: 'TestName' });   return waitForIt(() => mockedComponent.html()) }; const firstValue = await first(); assert(firstValue === '<div><h1>TestName</h1></div>', '渲染的<code>h1</code>标题中应该包含一段文本，这段文本是从组件的 state 中渲染出来的。'); };\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      name: 'freeCodeCamp'\\n    }\\n  }\\n  render() {\\n    // change code below this line\\n\\n    // change code above this line\\n    return (\\n      <div>\\n        { /* change code below this line */ }\\n\\n        { /* change code above this line */ }\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/set-state-with-this-setstate\",\"id\":\"5a24c314108439a4d4036172\"},\"slug\":\"/front-end-libraries/react/render-state-in-the-user-interface-another-way\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-render-state-in-the-user-interface-another-way-edb447233d1d99046734.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Render State in the User Interface Another Way\",\"description\":[\"还有另一种方法可以访问组件中的<code>state</code>。在<code>render()</code>方法中，在<code>return</code>语句之前，你可以直接编写 JavaScript。例如，你可以声明函数、从<code>state</code>或<code>props</code>访问数据、对此数据执行计算等。然后，你可以将任何数据赋值给你在<code>return</code>语句中可以访问的变量。\",\"<hr>\",\"在<code>MyComponent</code>的 render 方法中，定义一个名为<code>name</code>的<code>常量</code>，并将其设置为组件<code>state</code>中的 name 值。因为可以直接在代码部分编写 JavaScript，所以不需要用大括号括起来。\",\"接下来，在 return 语句中，在<code>h1</code>标签中渲染变量<code>name</code>的值。记住，在 return 语句中需要使用 JSX 语法（用到 JavaScript 的花括号）。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/render-state-in-the-user-interface-another-way\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该有一个键<code>name</code>，其值<code>freeCodeCamp</code>存储在其 state 中。\",\"testString\":\"assert(Enzyme.mount(React.createElement(MyComponent)).state('name') === 'freeCodeCamp', '<code>MyComponent</code>应该有一个键<code>name</code>，其值<code>freeCodeCamp</code>存储在其 state 中。');\"},{\"text\":\"<code>MyComponent</code>应该在<code>div</code>中渲染一个<code>h1</code>标题。\",\"testString\":\"assert(/<div><h1>.*<\\\\/h1><\\\\/div>/.test(Enzyme.mount(React.createElement(MyComponent)).html()), '<code>MyComponent</code>应该在<code>div</code>中渲染一个<code>h1</code>标题。');\"},{\"text\":\"渲染的<code>h1</code>标签应该包含<code>{name}</code>的引用。\",\"testString\":\"getUserInput => assert(/<h1>\\\\n*\\\\s*\\\\{\\\\s*name\\\\s*\\\\}\\\\s*\\\\n*<\\\\/h1>/.test(getUserInput('index')), '渲染的<code>h1</code>标签应该包含<code>{name}</code>的引用。');\"},{\"text\":\"渲染的<code>h1</code>标题中应该包含一段文本，这段文本是从组件的 state 中渲染出来的。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ name: 'TestName' });   return waitForIt(() => mockedComponent.html()) }; const firstValue = await first(); assert(firstValue === '<div><h1>TestName</h1></div>', '渲染的<code>h1</code>标题中应该包含一段文本，这段文本是从组件的 state 中渲染出来的。'); };\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      name: 'freeCodeCamp'\\n    }\\n  }\\n  render() {\\n    // change code below this line\\n\\n    // change code above this line\\n    return (\\n      <div>\\n        { /* change code below this line */ }\\n\\n        { /* change code above this line */ }\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/set-state-with-this-setstate\",\"id\":\"5a24c314108439a4d4036172\"},\"slug\":\"/front-end-libraries/react/render-state-in-the-user-interface-another-way\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-render-state-in-the-user-interface-another-way.json\n// module id = 3596\n// module chunks = 86990611597195"],"sourceRoot":""}