webpackJsonp([0xb743a6e3c3ec],{3348:function(e,t){e.exports={data:{challengeNode:{title:"Ackermann function",description:["<p>阿克曼函数是递归函数的一个经典示例，特别值得注意的是：它不是一个原始的递归函数。它的值增长非常快，且调用树的大小也是如此。</p>","<p>阿克曼函数通常定义如下：</p>","$$A(m, n) ="," \\begin{cases}"," n+1 & \\mbox{if } m = 0 \\\\"," A(m-1, 1) & \\mbox{if } m > 0 \\mbox{ and } n = 0 \\\\"," A(m-1, A(m, n-1)) & \\mbox{if } m > 0 \\mbox{ and } n > 0."," \\end{cases}$$","<p>它的参数值不是负数，且该函数会停止。 编写函数，且返回$A(m, n)$。任意精度优先（因为函数增长非常快），注意这不是必须的。</p>"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/ackermann-function",blockName:"Rosetta Code",tests:[{text:"<code>ack</code> 是一个函数。",testString:"assert(typeof ack === 'function', '<code>ack</code> 是一个函数。');"},{text:"<code>ack(0, 0)</code> 应返回1。",testString:"assert(ack(0, 0) === 1, '<code>ack(0, 0)</code> 应返回1。');"},{text:"<code>ack(1, 1)</code> 应返回3。",testString:"assert(ack(1, 1) === 3, '<code>ack(1, 1)</code> 应返回3。');"},{text:"<code>ack(2, 5)</code> 应返回13。",testString:"assert(ack(2, 5) === 13, '<code>ack(2, 5)</code> 应返回13。');"},{text:"<code>ack(3, 3)</code> 应返回61。",testString:"assert(ack(3, 3) === 61, '<code>ack(3, 3)</code> 应返回61。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function ack (m, n) {\n  // 祝你好运！\n}",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/align-columns",id:"594810f028c0303b75339acf"},slug:"/coding-interview-prep/rosetta-code/ackermann-function"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-ackermann-function-74b47312c132db2cb040.js.map