webpackJsonp([28269153028338],{3427:function(e,t){e.exports={data:{challengeNode:{title:"Zhang-Suen thinning algorithm",description:["This is an algorithm used to thin a black and white i.e. one bit per pixel images.","For example, with an input image of:","<prepre>","It produces the thinned output:","<prepre>","<h2>Algorithm</h2>","Assume black pixels are one and white pixels zero, and that the input image is a rectangular N by M array of ones and zeroes.","The algorithm operates on all black pixels P1 that can have eight neighbours. The neighbours are, in order, arranged as:",'<table border="1">',"  <tr><td>P9</td><td>P2</td><td>P3</td></tr>","  <tr><td>P8</td><td><b>P1</b></td><td>P4</td></tr>","  <tr><td>P7</td><td>P6</td><td>P5</td></tr>","</table>","Obviously the boundary pixels of the image cannot have the full eight neighbours.","","    Define $A(P1)$ = the number of transitions from white to black, (0 -> 1) in the sequence P2,P3,P4,P5,P6,P7,P8,P9,P2. (Note the extra P2 at the end - it is circular).","","","    Define $B(P1)$ = the number of black pixel neighbours of P1. ( = sum(P2 .. P9) )","","<h3>Step 1:</h3>","All pixels are tested and pixels satisfying all the following conditions (simultaneously) are just noted at this stage.","  (0) The pixel is black and has eight neighbours","  (1) $2 <= B(P1) <= 6$","  (2) $A(P1) = 1$","  (3) At least one of P2 and P4 and P6 is white","  (4) At least one of P4 and P6 and P8 is white","After iterating over the image and collecting all the pixels satisfying all step 1 conditions, all these condition satisfying pixels are set to white.","<h3>Step 2:</h3>","All pixels are again tested and pixels satisfying all the following conditions are just noted at this stage.","  (0) The pixel is black and has eight neighbours","  (1) $2 <= B(P1) <= 6$","  (2) $A(P1) = 1$","  (3) At least one of P2 and P4 and '''P8''' is white","  (4) At least one of '''P2''' and P6 and P8 is white","After iterating over the image and collecting all the pixels satisfying all step 2 conditions, all these condition satisfying pixels are again set to white.","Iteration:","If any pixels were set in this round of either step 1 or step 2 then all steps are repeated until no image pixels are so changed.","<p>","Task:","Write a routine to perform Zhang-Suen thinning on an image matrix of ones and zeroes.","</p>"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/zhang-suen-thinning-algorithm",blockName:"Rosetta Code",tests:[{text:"<code>thinImage</code> must be a function",testString:"assert.equal(typeof thinImage, 'function', '<code>thinImage</code> must be a function');"},{text:"<code>thinImage</code> must return an array",testString:"assert(Array.isArray(result), '<code>thinImage</code> must return an array');"},{text:"<code>thinImage</code> must return an array of strings",testString:"assert.equal(typeof result[0], 'string', '<code>thinImage</code> must return an array of strings');"},{text:"<code>thinImage</code> must return an array of strings",testString:"assert.deepEqual(result, expected, '<code>thinImage</code> must return an array of strings');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"const testImage = [\n  '                                                          ',\n  ' #################                   #############        ',\n  ' ##################               ################        ',\n  ' ###################            ##################        ',\n  ' ########     #######          ###################        ',\n  '   ######     #######         #######       ######        ',\n  '   ######     #######        #######                      ',\n  '   #################         #######                      ',\n  '   ################          #######                      ',\n  '   #################         #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######         #######       ######        ',\n  ' ########     #######          ###################        ',\n  ' ########     ####### ######    ################## ###### ',\n  ' ########     ####### ######      ################ ###### ',\n  ' ########     ####### ######         ############# ###### ',\n  '                                                          '];\n\nfunction thinImage(image) {\n  // Good luck!\n}",head:"",tail:"const imageForTests = [\n  '                                                          ',\n  ' #################                   #############        ',\n  ' ##################               ################        ',\n  ' ###################            ##################        ',\n  ' ########     #######          ###################        ',\n  '   ######     #######         #######       ######        ',\n  '   ######     #######        #######                      ',\n  '   #################         #######                      ',\n  '   ################          #######                      ',\n  '   #################         #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######         #######       ######        ',\n  ' ########     #######          ###################        ',\n  ' ########     ####### ######    ################## ###### ',\n  ' ########     ####### ######      ################ ###### ',\n  ' ########     ####### ######         ############# ###### ',\n  '                                                          '];\nconst expected = [\n  '                                                          ',\n  '                                                          ',\n  '    # ##########                       #######            ',\n  '     ##        #                   ####       #           ',\n  '     #          #                 ##                      ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     ############               #                         ',\n  '     #          #               #                         ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #                            ##                      ',\n  '     #                             ############           ',\n  '                       ###                          ###   ',\n  '                                                          ',\n  '                                                          '\n];\nconst result = thinImage(imageForTests);"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/zig-zag-matrix",id:"594810f028c0303b75339ad7"},slug:"/coding-interview-prep/rosetta-code/zhang-suen-thinning-algorithm"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-zhang-suen-thinning-algorithm-c20714b2a467fab07a7c.js.map