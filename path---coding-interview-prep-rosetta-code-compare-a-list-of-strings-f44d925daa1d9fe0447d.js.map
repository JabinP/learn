{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-compare-a-list-of-strings-f44d925daa1d9fe0447d.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-compare-a-list-of-strings.json"],"names":["webpackJsonp","3360","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,4BAAAC,aAAA,wXAAAC,cAAA,EAAAC,QAA2cC,KAAA,gEAAAC,UAAA,eAAAC,QAA4GC,KAAA,uCAAAC,WAAA,oFAA+ID,KAAA,uCAAAC,WAAA,oFAA+ID,KAAA,gEAAAC,WAAA,uGAAyMD,KAAA,iEAAAC,WAAA,yGAA4MD,KAAA,kEAAAC,WAAA,0GAA8MD,KAAA,iEAAAC,WAAA,wGAA2MD,KAAA,0CAAAC,WAAA,+EAA6ID,KAAA,0CAAAC,WAAA,+EAA6ID,KAAA,8CAAAC,WAAA,qFAAyJD,KAAA,8CAAAC,WAAA,qFAAyJD,KAAA,qDAAAC,WAAA,6FAA4KD,KAAA,qDAAAC,WAAA,8FAA4KC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,iIAAoLC,KAAA,GAAAC,KAAA,sGAAwHC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,2EAAAC,GAAA,4BAA4KrB,KAAA","file":"path---coding-interview-prep-rosetta-code-compare-a-list-of-strings-f44d925daa1d9fe0447d.js","sourcesContent":["webpackJsonp([3015510525350],{\n\n/***/ 3360:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Compare a list of strings\",\"description\":[\"<p>Given a  <a href=\\\"https://en.wikipedia.org/wiki/List_(abstract_data_type)\\\" title=\\\"wp: List_(abstract_data_type)\\\">list</a>  of arbitrarily many strings, implement a function for each of the following conditions:</p> test if they are all lexically equal\",\" test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/compare-a-list-of-strings\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>allEqual</code> is a function.\",\"testString\":\"assert(typeof allEqual === 'function', '<code>allEqual</code> is a function.');\"},{\"text\":\"<code>azSorted</code> is a function.\",\"testString\":\"assert(typeof azSorted === 'function', '<code>azSorted</code> is a function.');\"},{\"text\":\"<code>allEqual([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns true.\",\"testString\":\"assert(allEqual(testCases[0]), '<code>allEqual([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns true.');\"},{\"text\":\"<code>azSorted([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns false.\",\"testString\":\"assert(!azSorted(testCases[0]), '<code>azSorted([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns false.');\"},{\"text\":\"<code>allEqual([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns false.\",\"testString\":\"assert(!allEqual(testCases[1]), '<code>allEqual([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns false.');\"},{\"text\":\"<code>azSorted([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns true.\",\"testString\":\"assert(azSorted(testCases[1]), '<code>azSorted([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns true.');\"},{\"text\":\"<code>allEqual([])</code> returns true.\",\"testString\":\"assert(allEqual(testCases[2]), '<code>allEqual([])</code> returns true.');\"},{\"text\":\"<code>azSorted([])</code> returns true.\",\"testString\":\"assert(azSorted(testCases[2]), '<code>azSorted([])</code> returns true.');\"},{\"text\":\"<code>allEqual([\\\"AA\\\"])</code> returns true.\",\"testString\":\"assert(allEqual(testCases[3]), '<code>allEqual([\\\"AA\\\"])</code> returns true.');\"},{\"text\":\"<code>azSorted([\\\"AA\\\"])</code> returns true.\",\"testString\":\"assert(azSorted(testCases[3]), '<code>azSorted([\\\"AA\\\"])</code> returns true.');\"},{\"text\":\"<code>allEqual([\\\"BB\\\", \\\"AA\\\"])</code> returns false.\",\"testString\":\"assert(!allEqual(testCases[4]), '<code>allEqual([\\\"BB\\\", \\\"AA\\\"])</code> returns false.');\"},{\"text\":\"<code>azSorted([\\\"BB\\\", \\\"AA\\\"])</code> returns false.\",\"testString\":\"assert(!azSorted(testCases[4]), '<code>azSorted([\\\"BB\\\", \\\"AA\\\"])</code> returns false.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function allEqual (arr) {\\n  // Good luck!\\n  return true;\\n}\\n\\nfunction azSorted (arr) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/convert-seconds-to-compound-duration\",\"id\":\"596e457071c35c882915b3e4\"},\"slug\":\"/coding-interview-prep/rosetta-code/compare-a-list-of-strings\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-compare-a-list-of-strings-f44d925daa1d9fe0447d.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Compare a list of strings\",\"description\":[\"<p>Given a  <a href=\\\"https://en.wikipedia.org/wiki/List_(abstract_data_type)\\\" title=\\\"wp: List_(abstract_data_type)\\\">list</a>  of arbitrarily many strings, implement a function for each of the following conditions:</p> test if they are all lexically equal\",\" test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/compare-a-list-of-strings\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>allEqual</code> is a function.\",\"testString\":\"assert(typeof allEqual === 'function', '<code>allEqual</code> is a function.');\"},{\"text\":\"<code>azSorted</code> is a function.\",\"testString\":\"assert(typeof azSorted === 'function', '<code>azSorted</code> is a function.');\"},{\"text\":\"<code>allEqual([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns true.\",\"testString\":\"assert(allEqual(testCases[0]), '<code>allEqual([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns true.');\"},{\"text\":\"<code>azSorted([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns false.\",\"testString\":\"assert(!azSorted(testCases[0]), '<code>azSorted([\\\"AA\\\", \\\"AA\\\", \\\"AA\\\", \\\"AA\\\"])</code> returns false.');\"},{\"text\":\"<code>allEqual([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns false.\",\"testString\":\"assert(!allEqual(testCases[1]), '<code>allEqual([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns false.');\"},{\"text\":\"<code>azSorted([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns true.\",\"testString\":\"assert(azSorted(testCases[1]), '<code>azSorted([\\\"AA\\\", \\\"ACB\\\", \\\"BB\\\", \\\"CC\\\"])</code> returns true.');\"},{\"text\":\"<code>allEqual([])</code> returns true.\",\"testString\":\"assert(allEqual(testCases[2]), '<code>allEqual([])</code> returns true.');\"},{\"text\":\"<code>azSorted([])</code> returns true.\",\"testString\":\"assert(azSorted(testCases[2]), '<code>azSorted([])</code> returns true.');\"},{\"text\":\"<code>allEqual([\\\"AA\\\"])</code> returns true.\",\"testString\":\"assert(allEqual(testCases[3]), '<code>allEqual([\\\"AA\\\"])</code> returns true.');\"},{\"text\":\"<code>azSorted([\\\"AA\\\"])</code> returns true.\",\"testString\":\"assert(azSorted(testCases[3]), '<code>azSorted([\\\"AA\\\"])</code> returns true.');\"},{\"text\":\"<code>allEqual([\\\"BB\\\", \\\"AA\\\"])</code> returns false.\",\"testString\":\"assert(!allEqual(testCases[4]), '<code>allEqual([\\\"BB\\\", \\\"AA\\\"])</code> returns false.');\"},{\"text\":\"<code>azSorted([\\\"BB\\\", \\\"AA\\\"])</code> returns false.\",\"testString\":\"assert(!azSorted(testCases[4]), '<code>azSorted([\\\"BB\\\", \\\"AA\\\"])</code> returns false.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function allEqual (arr) {\\n  // Good luck!\\n  return true;\\n}\\n\\nfunction azSorted (arr) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/convert-seconds-to-compound-duration\",\"id\":\"596e457071c35c882915b3e4\"},\"slug\":\"/coding-interview-prep/rosetta-code/compare-a-list-of-strings\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-compare-a-list-of-strings.json\n// module id = 3360\n// module chunks = 3015510525350"],"sourceRoot":""}