webpackJsonp([0xf3e55422c1d6],{2887:function(e,n){e.exports={data:{challengeNode:{title:"Problem 122: Efficient exponentiation",description:["The most naive way of computing n15 requires fourteen multiplications:","n × n × ... × n = n15",'But using a "binary" method you can compute it in six multiplications:',"n × n = n2n2 × n2 = n4n4 × n4 = n8n8 × n4 = n12n12 × n2 = n14n14 × n = n15","However it is yet possible to compute it in only five multiplications:","n × n = n2n2 × n = n3n3 × n3 = n6n6 × n6 = n12n12 × n3 = n15","We shall define m(k) to be the minimum number of multiplications to compute nk; for example m(15) = 5.","For 1 ≤ k ≤ 200, find ∑ m(k)."],challengeType:5,fields:{slug:"/coding-interview-prep/project-euler/problem-122-efficient-exponentiation",blockName:"Project Euler",tests:[{text:"<code>euler122()</code> should return 1582.",testString:"assert.strictEqual(euler122(), 1582, '<code>euler122()</code> should return 1582.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function euler122() {\n  // Good luck!\n  return true;\n}\n\neuler122();",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/project-euler/problem-123-prime-square-remainders",id:"5900f3e61000cf542c50fef9"},slug:"/coding-interview-prep/project-euler/problem-122-efficient-exponentiation"}}}});
//# sourceMappingURL=path---coding-interview-prep-project-euler-problem-122-efficient-exponentiation-3968957a1230ef74d4fa.js.map