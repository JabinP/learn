{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-steamroller-1c9819e7145bc0d3899c.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-steamroller.json"],"names":["webpackJsonp","3941","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,cAAAC,aAAA,yNAAAC,cAAA,EAAAC,QAA0RC,KAAA,0FAAAC,UAAA,mCAAAC,QAA0JC,KAAA,8EAAAC,WAAA,uJAA+QD,KAAA,kFAAAC,WAAA,6JAAmQD,KAAA,8EAAAC,WAAA,qJAAuPD,KAAA,kFAAwEC,WAAA,8JAA2LC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,4GAA+JC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,4FAAAC,GAAA,4BAA6LrB,KAAA","file":"path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-steamroller-1c9819e7145bc0d3899c.js","sourcesContent":["webpackJsonp([43011176831494],{\n\n/***/ 3941:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Steamroller\",\"description\":[\"在这道题目中，我们需要写一个数组扁平化的函数。\",\"注意，你写的函数应该能够处理数组多级嵌套的情况。比如，<code>[1, [2], [3, [4]]]</code>在扁平化处理后的结果应为<code>[1, 2, 3, 4]</code>。\",\"如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/steamroller\",\"blockName\":\"Intermediate Algorithm Scripting\",\"tests\":[{\"text\":\"<code>steamrollArray([[[\\\"a\\\"]], [[\\\"b\\\"]]])</code>应该返回<code>[\\\"a\\\", \\\"b\\\"]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([[[\\\"a\\\"]], [[\\\"b\\\"]]]), [\\\"a\\\", \\\"b\\\"], '<code>steamrollArray([[[\\\"a\\\"]], [[\\\"b\\\"]]])</code>应该返回<code>[\\\"a\\\", \\\"b\\\"]</code>。');\"},{\"text\":\"<code>steamrollArray([1, [2], [3, [[4]]]])</code>应该返回<code>[1, 2, 3, 4]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([1, [2], [3, [[4]]]]), [1, 2, 3, 4], '<code>steamrollArray([1, [2], [3, [[4]]]])</code>应该返回<code>[1, 2, 3, 4]</code>。');\"},{\"text\":\"<code>steamrollArray([1, [], [3, [[4]]]])</code>应该返回<code>[1, 3, 4]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([1, [], [3, [[4]]]]), [1, 3, 4], '<code>steamrollArray([1, [], [3, [[4]]]])</code>应该返回<code>[1, 3, 4]</code>。');\"},{\"text\":\"<code>steamrollArray([1, {}, [3, [[4]]]])</code>应该返回<code>[1, {}, 3, 4]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4], '<code>steamrollArray([1, {}, [3, [[4]]]])</code>应该返回<code>[1, {}, 3, 4]</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function steamrollArray(arr) {\\n  // 扁平化，扁平化……\\n  return arr;\\n}\\n\\nsteamrollArray([1, [2], [3, [[4]]]]);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/binary-agents\",\"id\":\"ab306dbdcc907c7ddfc30830\"},\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/steamroller\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-steamroller-1c9819e7145bc0d3899c.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Steamroller\",\"description\":[\"在这道题目中，我们需要写一个数组扁平化的函数。\",\"注意，你写的函数应该能够处理数组多级嵌套的情况。比如，<code>[1, [2], [3, [4]]]</code>在扁平化处理后的结果应为<code>[1, 2, 3, 4]</code>。\",\"如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/steamroller\",\"blockName\":\"Intermediate Algorithm Scripting\",\"tests\":[{\"text\":\"<code>steamrollArray([[[\\\"a\\\"]], [[\\\"b\\\"]]])</code>应该返回<code>[\\\"a\\\", \\\"b\\\"]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([[[\\\"a\\\"]], [[\\\"b\\\"]]]), [\\\"a\\\", \\\"b\\\"], '<code>steamrollArray([[[\\\"a\\\"]], [[\\\"b\\\"]]])</code>应该返回<code>[\\\"a\\\", \\\"b\\\"]</code>。');\"},{\"text\":\"<code>steamrollArray([1, [2], [3, [[4]]]])</code>应该返回<code>[1, 2, 3, 4]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([1, [2], [3, [[4]]]]), [1, 2, 3, 4], '<code>steamrollArray([1, [2], [3, [[4]]]])</code>应该返回<code>[1, 2, 3, 4]</code>。');\"},{\"text\":\"<code>steamrollArray([1, [], [3, [[4]]]])</code>应该返回<code>[1, 3, 4]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([1, [], [3, [[4]]]]), [1, 3, 4], '<code>steamrollArray([1, [], [3, [[4]]]])</code>应该返回<code>[1, 3, 4]</code>。');\"},{\"text\":\"<code>steamrollArray([1, {}, [3, [[4]]]])</code>应该返回<code>[1, {}, 3, 4]</code>。\",\"testString\":\"assert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4], '<code>steamrollArray([1, {}, [3, [[4]]]])</code>应该返回<code>[1, {}, 3, 4]</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function steamrollArray(arr) {\\n  // 扁平化，扁平化……\\n  return arr;\\n}\\n\\nsteamrollArray([1, [2], [3, [[4]]]]);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/binary-agents\",\"id\":\"ab306dbdcc907c7ddfc30830\"},\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/steamroller\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-steamroller.json\n// module id = 3941\n// module chunks = 43011176831494"],"sourceRoot":""}