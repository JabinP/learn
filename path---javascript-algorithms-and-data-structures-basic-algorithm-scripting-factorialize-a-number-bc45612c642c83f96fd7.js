webpackJsonp([0x7a70dc4407dd],{3719:function(e,t){e.exports={data:{challengeNode:{title:"Factorialize a Number",description:["返回一个给定整数的阶乘。","若 n 是一个整数，n 的阶乘就是所有小于等于 n 的正整数的乘积。","n 的阶乘通常用符号 <code>n!</code> 来表示。","例如： <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>","只有非负整数会被作为函数的输入参数。",'如果你有任何疑问，可以访问 <a href="https://forum.freecodecamp.one/t/topic/157" target="_blank">Read-Search-Ask</a> 。请你独立解决挑战中的问题。'],challengeType:5,fields:{slug:"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/factorialize-a-number",blockName:"Basic Algorithm Scripting",tests:[{text:"<code>factorialize(5)</code> 应该返回一个数字。",testString:"assert(typeof factorialize(5) === 'number', '<code>factorialize(5)</code> 应该返回一个数字。');"},{text:"<code>factorialize(5)</code> 应该返回 120。",testString:"assert(factorialize(5) === 120, '<code>factorialize(5)</code> 应该返回 120。');"},{text:"<code>factorialize(10)</code> 应该返回 3628800。",testString:"assert(factorialize(10) === 3628800, '<code>factorialize(10)</code> 应该返回 3628800。');"},{text:"<code>factorialize(20)</code> 应该返回 2432902008176640000。",testString:"assert(factorialize(20) === 2432902008176640000, '<code>factorialize(20)</code> 应该返回 2432902008176640000。');"},{text:"<code>factorialize(0)</code> 应该返回 1。",testString:"assert(factorialize(0) === 1, '<code>factorialize(0)</code> 应该返回 1。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function factorialize(num) {\n  return num;\n}\n\nfactorialize(5);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/find-the-longest-word-in-a-string",id:"a302f7aae1aa3152a5b413bc"},slug:"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/factorialize-a-number"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-factorialize-a-number-bc45612c642c83f96fd7.js.map