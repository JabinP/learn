{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-chunky-monkey-a88175ad6b0544dad6fc.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-algorithm-scripting-chunky-monkey.json"],"names":["webpackJsonp","3716","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gBAAAC,aAAA,qMAAAC,cAAA,EAAAC,QAA4QC,KAAA,qFAAAC,UAAA,4BAAAC,QAA8IC,KAAA,uGAAAC,WAAA,uMAAgXD,KAAA,mGAAAC,WAAA,6LAAoTD,KAAA,qGAAAC,WAAA,iMAA0TD,KAAA,mGAAAC,WAAA,6LAAoTD,KAAA,2GAAAC,WAAA,6MAA4UD,KAAA,uHAAAC,WAAA,qOAAgXD,KAAA,2HAAAC,WAAA,8OAA4XC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,gIAA2LC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,yEAAAC,SAAA,KAAAd,YAAAe,kBAAA,0GAAAC,GAAA,4BAAiRrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-chunky-monkey-a88175ad6b0544dad6fc.js","sourcesContent":["webpackJsonp([196736958632650],{\n\n/***/ 3716:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Chunky Monkey\",\"description\":[\"请写一个函数，将一个数组（第一个参数）分割成一组长度为 <code>size</code>（第二个参数）的数组，然后在一个二维数组中返回这些结果。\",\"如果你有任何疑问，可以访问 <a href=\\\"https://forum.freecodecamp.one/t/topic/157\\\" target=\\\"_blank\\\">Read-Search-Ask</a> 。请你独立解决挑战中的问题。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/chunky-monkey\",\"blockName\":\"Basic Algorithm Scripting\",\"tests\":[{\"text\":\"<code>chunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2)</code> 应该返回 <code>[[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2), [[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]], '<code>chunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2)</code> 应该返回 <code>[[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [[0, 1, 2], [3, 4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [[0, 1], [2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [[0, 1, 2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5], [6]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [[0, 1, 2], [3, 4, 5], [6]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5], [6]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [[0, 1, 2, 3], [4, 5, 6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [[0, 1], [2, 3], [4, 5], [6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function chunkArrayInGroups(arr, size) {\\n  // Break it up.\\n  return arr;\\n}\\n\\nchunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object\",\"id\":\"a9bd25c716030ec90084d8a1\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/chunky-monkey\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-chunky-monkey-a88175ad6b0544dad6fc.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Chunky Monkey\",\"description\":[\"请写一个函数，将一个数组（第一个参数）分割成一组长度为 <code>size</code>（第二个参数）的数组，然后在一个二维数组中返回这些结果。\",\"如果你有任何疑问，可以访问 <a href=\\\"https://forum.freecodecamp.one/t/topic/157\\\" target=\\\"_blank\\\">Read-Search-Ask</a> 。请你独立解决挑战中的问题。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/chunky-monkey\",\"blockName\":\"Basic Algorithm Scripting\",\"tests\":[{\"text\":\"<code>chunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2)</code> 应该返回 <code>[[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2), [[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]], '<code>chunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2)</code> 应该返回 <code>[[\\\"a\\\", \\\"b\\\"], [\\\"c\\\", \\\"d\\\"]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [[0, 1, 2], [3, 4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [[0, 1], [2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [[0, 1, 2, 3], [4, 5]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5], [6]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [[0, 1, 2], [3, 4, 5], [6]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5], [6]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [[0, 1, 2, 3], [4, 5, 6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>。');\"},{\"text\":\"<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>。\",\"testString\":\"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [[0, 1], [2, 3], [4, 5], [6, 7], [8]], '<code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function chunkArrayInGroups(arr, size) {\\n  // Break it up.\\n  return arr;\\n}\\n\\nchunkArrayInGroups([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"], 2);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object\",\"id\":\"a9bd25c716030ec90084d8a1\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/chunky-monkey\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-algorithm-scripting-chunky-monkey.json\n// module id = 3716\n// module chunks = 196736958632650"],"sourceRoot":""}