{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-object-oriented-programming-set-the-childs-prototype-to-an-instance-of-the-parent-1e10865a4a6d9339e938.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-object-oriented-programming-set-the-childs-prototype-to-an-instance-of-the-parent.json"],"names":["webpackJsonp","3965","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,yDAAAC,aAAA,gRAAiV,mMAAiL,8IAAAC,cAAA,EAAAC,QAA+MC,KAAA,+HAAAC,UAAA,8BAAAC,QAA0LC,KAAA,yDAAAC,WAAA,sHAAkMC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,qPAAmRC,KAAA,GAAAC,KAAA,IAA+CC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,iHAAAC,GAAA,4BAAkNrB,KAAA","file":"path---javascript-algorithms-and-data-structures-object-oriented-programming-set-the-childs-prototype-to-an-instance-of-the-parent-1e10865a4a6d9339e938.js","sourcesContent":["webpackJsonp([261526498094096],{\n\n/***/ 3965:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Set the Child's Prototype to an Instance of the Parent\",\"description\":[\"在上一个挑战中，我们学习了从<code>超类（或者叫父类） Animal</code>继承其行为的第一个步骤：创建一个<code>Animal</code>的实例。\",\"这一节挑战我们将学习第二个步骤：给<code>子类型（或者子类）</code>设置<code>原型</code>。这样一来，<code>Bird</code>就是<code>Animal</code>的一个实例了。\",\"<blockquote>Bird.prototype = Object.create(Animal.prototype);</blockquote>\",\"请记住，<code>原型</code>类似于创建对象的“配方”。从某种意义上来说，<code>Bird</code>对象的配方包含了<code>Animal</code>构造函数的所有关键“成分”。\",\"<blockquote>let duck = new Bird(\\\"Donald\\\");<br>duck.eat(); // 输出 \\\"nom nom nom\\\"</blockquote>\",\"<code>duck</code>继承了<code>Animal</code>构造函数的所有属性，其中包括了<code>eat</code>方法。\",\"<hr>\",\"修改你的代码，实现一个继承自<code>Animal</code>的<code>Dog</code>构造函数。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent\",\"blockName\":\"Object Oriented Programming\",\"tests\":[{\"text\":\"<code>Dog.prototype</code>应该是<code>Animal</code>的一个实例。\",\"testString\":\"assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code>应该是<code>Animal</code>的一个实例。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Animal() { }\\n\\nAnimal.prototype = {\\n  constructor: Animal,\\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\");\\n  }\\n};\\n\\nfunction Dog() { }\\n\\n// 请把你的代码写在这条注释以下\\n\\n\\nlet beagle = new Dog();\\nbeagle.eat();  // 应该输出 \\\"nom nom nom\\\"\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property\",\"id\":\"587d7db1367417b2b2512b85\"},\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-object-oriented-programming-set-the-childs-prototype-to-an-instance-of-the-parent-1e10865a4a6d9339e938.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Set the Child's Prototype to an Instance of the Parent\",\"description\":[\"在上一个挑战中，我们学习了从<code>超类（或者叫父类） Animal</code>继承其行为的第一个步骤：创建一个<code>Animal</code>的实例。\",\"这一节挑战我们将学习第二个步骤：给<code>子类型（或者子类）</code>设置<code>原型</code>。这样一来，<code>Bird</code>就是<code>Animal</code>的一个实例了。\",\"<blockquote>Bird.prototype = Object.create(Animal.prototype);</blockquote>\",\"请记住，<code>原型</code>类似于创建对象的“配方”。从某种意义上来说，<code>Bird</code>对象的配方包含了<code>Animal</code>构造函数的所有关键“成分”。\",\"<blockquote>let duck = new Bird(\\\"Donald\\\");<br>duck.eat(); // 输出 \\\"nom nom nom\\\"</blockquote>\",\"<code>duck</code>继承了<code>Animal</code>构造函数的所有属性，其中包括了<code>eat</code>方法。\",\"<hr>\",\"修改你的代码，实现一个继承自<code>Animal</code>的<code>Dog</code>构造函数。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent\",\"blockName\":\"Object Oriented Programming\",\"tests\":[{\"text\":\"<code>Dog.prototype</code>应该是<code>Animal</code>的一个实例。\",\"testString\":\"assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code>应该是<code>Animal</code>的一个实例。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Animal() { }\\n\\nAnimal.prototype = {\\n  constructor: Animal,\\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\");\\n  }\\n};\\n\\nfunction Dog() { }\\n\\n// 请把你的代码写在这条注释以下\\n\\n\\nlet beagle = new Dog();\\nbeagle.eat();  // 应该输出 \\\"nom nom nom\\\"\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property\",\"id\":\"587d7db1367417b2b2512b85\"},\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-object-oriented-programming-set-the-childs-prototype-to-an-instance-of-the-parent.json\n// module id = 3965\n// module chunks = 261526498094096"],"sourceRoot":""}