{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-element-wise-operations-823218274fe2283b390c.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-element-wise-operations.json"],"names":["webpackJsonp","3373","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,0BAAAC,aAAA,mdAAAC,cAAA,EAAAC,QAAoiBC,KAAA,8DAAAC,UAAA,eAAAC,QAA0GC,KAAA,wCAAAC,WAAA,sFAAkJD,KAAA,wGAAAC,WAAA,2MAAyUD,KAAA,wGAAAC,WAAA,4LAA0TD,KAAA,wGAAAC,WAAA,2MAAyUD,KAAA,0GAAAC,WAAA,+MAA+UD,KAAA,wGAAAC,WAAA,2MAAyUD,KAAA,2GAAAC,WAAA,iNAAkVD,KAAA,+IAAAC,WAAA,sSAA0cC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,4DAA+GC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,mDAAAC,GAAA,4BAAoJrB,KAAA","file":"path---coding-interview-prep-rosetta-code-element-wise-operations-823218274fe2283b390c.js","sourcesContent":["webpackJsonp([163972932883233],{\n\n/***/ 3373:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Element-wise operations\",\"description\":[\"<p>Implement basic element-wise matrix-matrix and scalar-matrix operations.</p><p>Implement:</p>\",\"<p>::*  addition</p>\",\"<p>::*  subtraction</p>\",\"<p>::*  multiplication</p>\",\"<p>::*  division</p>\",\"<p>::*  exponentiation</p>\",\"<p>The first parameter will be the operation to be performed, for example : \\\"m_add\\\" for matrix addition and \\\"s_add\\\" for scalar addition. The second and third parameters will be the matrices on which the operations are to be performed.\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/element-wise-operations\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>operation</code> is a function.\",\"testString\":\"assert(typeof operation === 'function', '<code>operation</code> is a function.');\"},{\"text\":\"<code>operation(\\\"m_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_add', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[2, 4], [6, 8]], '<code>operation(\\\"m_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.');\"},{\"text\":\"<code>operation(\\\"s_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.\",\"testString\":\"assert.deepEqual(operation('s_add', [[1, 2], [3, 4]], 2), [[3, 4], [5, 6]], '<code>operation(\\\"s_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_sub\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_sub', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[0, 0], [0, 0]], '<code>operation(\\\"m_sub\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_mult\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_mult', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [9, 16]], '<code>operation(\\\"m_mult\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_div\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_div', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 1], [1, 1]], '<code>operation(\\\"m_div\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_exp\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_exp', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [27, 256]], '<code>operation(\\\"m_exp\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_add\\\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_add', [[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]), [[10, 12, 14, 16], [18, 20, 22, 24]], '<code>operation(\\\"m_add\\\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function operation (op, arr1, arr2) {\\n  // Good luck!\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/emirp-primes\",\"id\":\"599c333915e0ea32d04d4bec\"},\"slug\":\"/coding-interview-prep/rosetta-code/element-wise-operations\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-element-wise-operations-823218274fe2283b390c.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Element-wise operations\",\"description\":[\"<p>Implement basic element-wise matrix-matrix and scalar-matrix operations.</p><p>Implement:</p>\",\"<p>::*  addition</p>\",\"<p>::*  subtraction</p>\",\"<p>::*  multiplication</p>\",\"<p>::*  division</p>\",\"<p>::*  exponentiation</p>\",\"<p>The first parameter will be the operation to be performed, for example : \\\"m_add\\\" for matrix addition and \\\"s_add\\\" for scalar addition. The second and third parameters will be the matrices on which the operations are to be performed.\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/element-wise-operations\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>operation</code> is a function.\",\"testString\":\"assert(typeof operation === 'function', '<code>operation</code> is a function.');\"},{\"text\":\"<code>operation(\\\"m_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_add', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[2, 4], [6, 8]], '<code>operation(\\\"m_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.');\"},{\"text\":\"<code>operation(\\\"s_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.\",\"testString\":\"assert.deepEqual(operation('s_add', [[1, 2], [3, 4]], 2), [[3, 4], [5, 6]], '<code>operation(\\\"s_add\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_sub\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_sub', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[0, 0], [0, 0]], '<code>operation(\\\"m_sub\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_mult\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_mult', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [9, 16]], '<code>operation(\\\"m_mult\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_div\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_div', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 1], [1, 1]], '<code>operation(\\\"m_div\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_exp\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_exp', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [27, 256]], '<code>operation(\\\"m_exp\\\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.');\"},{\"text\":\"<code>operation(\\\"m_add\\\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.\",\"testString\":\"assert.deepEqual(operation('m_add', [[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]), [[10, 12, 14, 16], [18, 20, 22, 24]], '<code>operation(\\\"m_add\\\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function operation (op, arr1, arr2) {\\n  // Good luck!\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/emirp-primes\",\"id\":\"599c333915e0ea32d04d4bec\"},\"slug\":\"/coding-interview-prep/rosetta-code/element-wise-operations\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-element-wise-operations.json\n// module id = 3373\n// module chunks = 163972932883233"],"sourceRoot":""}