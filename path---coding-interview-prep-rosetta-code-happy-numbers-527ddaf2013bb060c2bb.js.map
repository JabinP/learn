{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-happy-numbers-527ddaf2013bb060c2bb.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-happy-numbers.json"],"names":["webpackJsonp","3400","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gBAAAC,aAAA,0fAAAC,cAAA,EAAAC,QAA6jBC,KAAA,oDAAAC,UAAA,eAAAC,QAAgGC,KAAA,oCAAAC,WAAA,8EAAsID,KAAA,iDAAAC,WAAA,6FAAkKD,KAAA,4CAAAC,WAAA,mEAAmID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,4CAAAC,WAAA,mEAAmID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,6CAAAC,WAAA,qEAAsID,KAAA,8CAAAC,WAAA,sEAAwID,KAAA,8CAAAC,WAAA,wEAAyIC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,gDAAmGC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,8DAAAC,GAAA,4BAA+JrB,KAAA","file":"path---coding-interview-prep-rosetta-code-happy-numbers-527ddaf2013bb060c2bb.js","sourcesContent":["webpackJsonp([223554272530781],{\n\n/***/ 3400:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Happy numbers\",\"description\":[\"<p>A happy number is defined by the following process:</p>\",\"<p>Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.</p>\",\"<p>Implement a function that returns true if the number is happy, or false if not.</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/happy-numbers\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>happy</code> is a function.\",\"testString\":\"assert(typeof happy === 'function', '<code>happy</code> is a function.');\"},{\"text\":\"<code>happy(1)</code> should return a boolean.\",\"testString\":\"assert(typeof happy(1) === 'boolean', '<code>happy(1)</code> should return a boolean.');\"},{\"text\":\"<code>happy(1)</code> should return true.\",\"testString\":\"assert(happy(1), '<code>happy(1)</code> should return true.');\"},{\"text\":\"<code>happy(2)</code> should return false.\",\"testString\":\"assert(!happy(2), '<code>happy(2)</code> should return false.');\"},{\"text\":\"<code>happy(7)</code> should return true.\",\"testString\":\"assert(happy(7), '<code>happy(7)</code> should return true.');\"},{\"text\":\"<code>happy(10)</code> should return true.\",\"testString\":\"assert(happy(10), '<code>happy(10)</code> should return true.');\"},{\"text\":\"<code>happy(13)</code> should return true.\",\"testString\":\"assert(happy(13), '<code>happy(13)</code> should return true.');\"},{\"text\":\"<code>happy(19)</code> should return true.\",\"testString\":\"assert(happy(19), '<code>happy(19)</code> should return true.');\"},{\"text\":\"<code>happy(23)</code> should return true.\",\"testString\":\"assert(happy(23), '<code>happy(23)</code> should return true.');\"},{\"text\":\"<code>happy(28)</code> should return true.\",\"testString\":\"assert(happy(28), '<code>happy(28)</code> should return true.');\"},{\"text\":\"<code>happy(31)</code> should return true.\",\"testString\":\"assert(happy(31), '<code>happy(31)</code> should return true.');\"},{\"text\":\"<code>happy(32)</code> should return true:.\",\"testString\":\"assert(happy(32), '<code>happy(32)</code> should return true:.');\"},{\"text\":\"<code>happy(33)</code> should return false.\",\"testString\":\"assert(!happy(33), '<code>happy(33)</code> should return false.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function happy (number) {\\n  // Good luck!\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/harshad-or-niven-series\",\"id\":\"594810f028c0303b75339ad1\"},\"slug\":\"/coding-interview-prep/rosetta-code/happy-numbers\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-happy-numbers-527ddaf2013bb060c2bb.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Happy numbers\",\"description\":[\"<p>A happy number is defined by the following process:</p>\",\"<p>Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.</p>\",\"<p>Implement a function that returns true if the number is happy, or false if not.</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/happy-numbers\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>happy</code> is a function.\",\"testString\":\"assert(typeof happy === 'function', '<code>happy</code> is a function.');\"},{\"text\":\"<code>happy(1)</code> should return a boolean.\",\"testString\":\"assert(typeof happy(1) === 'boolean', '<code>happy(1)</code> should return a boolean.');\"},{\"text\":\"<code>happy(1)</code> should return true.\",\"testString\":\"assert(happy(1), '<code>happy(1)</code> should return true.');\"},{\"text\":\"<code>happy(2)</code> should return false.\",\"testString\":\"assert(!happy(2), '<code>happy(2)</code> should return false.');\"},{\"text\":\"<code>happy(7)</code> should return true.\",\"testString\":\"assert(happy(7), '<code>happy(7)</code> should return true.');\"},{\"text\":\"<code>happy(10)</code> should return true.\",\"testString\":\"assert(happy(10), '<code>happy(10)</code> should return true.');\"},{\"text\":\"<code>happy(13)</code> should return true.\",\"testString\":\"assert(happy(13), '<code>happy(13)</code> should return true.');\"},{\"text\":\"<code>happy(19)</code> should return true.\",\"testString\":\"assert(happy(19), '<code>happy(19)</code> should return true.');\"},{\"text\":\"<code>happy(23)</code> should return true.\",\"testString\":\"assert(happy(23), '<code>happy(23)</code> should return true.');\"},{\"text\":\"<code>happy(28)</code> should return true.\",\"testString\":\"assert(happy(28), '<code>happy(28)</code> should return true.');\"},{\"text\":\"<code>happy(31)</code> should return true.\",\"testString\":\"assert(happy(31), '<code>happy(31)</code> should return true.');\"},{\"text\":\"<code>happy(32)</code> should return true:.\",\"testString\":\"assert(happy(32), '<code>happy(32)</code> should return true:.');\"},{\"text\":\"<code>happy(33)</code> should return false.\",\"testString\":\"assert(!happy(33), '<code>happy(33)</code> should return false.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function happy (number) {\\n  // Good luck!\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/harshad-or-niven-series\",\"id\":\"594810f028c0303b75339ad1\"},\"slug\":\"/coding-interview-prep/rosetta-code/happy-numbers\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-happy-numbers.json\n// module id = 3400\n// module chunks = 223554272530781"],"sourceRoot":""}