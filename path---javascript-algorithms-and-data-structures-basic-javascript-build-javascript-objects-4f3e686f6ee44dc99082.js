webpackJsonp([0xae442fd06bf3],{3765:function(e,o){e.exports={data:{challengeNode:{title:"Build JavaScript Objects",description:["你之前可能听说过对象<code>object</code>。","对象和数组很相似，数组是通过索引来访问和修改数据，而对象是通过属性来访问和修改数据。","对象适合用来存储结构化数据，就和真实世界的对象一模一样，比如一只猫。","这是一个对象的示例：",'<blockquote>var cat = {<br>&nbsp;&nbsp;"name": "Whiskers",<br>&nbsp;&nbsp;"legs": 4,<br>&nbsp;&nbsp;"tails": 1,<br>&nbsp;&nbsp;"enemies": ["Water", "Dogs"]<br>};</blockquote>','在这个示例中所有的属性以字符串的形式储存，例如 - <code>"name"</code>, <code>"legs"</code>，和<code>"tails"</code>。但是，你也可以使用数字作为属性，你甚至可以省略字符串属性的引号，如下所示：','<blockquote>var anotherObject = {<br>&nbsp;&nbsp;make: "Ford",<br>&nbsp;&nbsp;5: "five",<br>&nbsp;&nbsp;"model": "focus"<br>};</blockquote>',"但是，如果你的对象具有任何非字符串属性，JavaScript 将自动将它们转换为字符串类型。","<hr>",'创建一个叫做<code>myDog</code>的对象，它里面有这些属性：<code>"name"</code>、<code>"legs"</code>,<code>"tails"</code>、<code>"friends"</code>。','你可以设置对象属性为任何值，只需要确保<code>"name"</code>是字符串、<code>"legs"</code>和<code>"tails"</code>是数字、<code>"friends"</code>是数组。'],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects",blockName:"Basic JavaScript",tests:[{text:"<code>myDog</code>应该包含<code>name</code>属性，并且是一个字符串<code>string</code>。",testString:'assert((function(z){if(z.hasOwnProperty("name") && z.name !== undefined && typeof z.name === "string"){return true;}else{return false;}})(myDog), \'<code>myDog</code>应该包含<code>name</code>属性，并且是一个字符串<code>string</code>。\');'},{text:"<code>myDog</code>应该包含<code>legs</code>属性，并且是一个数字<code>number</code>。",testString:'assert((function(z){if(z.hasOwnProperty("legs") && z.legs !== undefined && typeof z.legs === "number"){return true;}else{return false;}})(myDog), \'<code>myDog</code>应该包含<code>legs</code>属性，并且是一个数字<code>number</code>。\');'},{text:"<code>myDog</code>应该包含<code>tails</code>属性，并且是一个数字<code>number</code>。",testString:'assert((function(z){if(z.hasOwnProperty("tails") && z.tails !== undefined && typeof z.tails === "number"){return true;}else{return false;}})(myDog), \'<code>myDog</code>应该包含<code>tails</code>属性，并且是一个数字<code>number</code>。\');'},{text:"<code>myDog</code>应该包含<code>friends</code>属性，并且是一个数组<code>array</code>。",testString:"assert((function(z){if(z.hasOwnProperty(\"friends\") && z.friends !== undefined && Array.isArray(z.friends)){return true;}else{return false;}})(myDog), '<code>myDog</code>应该包含<code>friends</code>属性，并且是一个数组<code>array</code>。');"},{text:"<code>myDog</code>应该只包含给出的属性。",testString:"assert((function(z){return Object.keys(z).length === 4;})(myDog), '<code>myDog</code>应该只包含给出的属性。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'// 示例\nvar ourDog = {\n  "name": "Camper",\n  "legs": 4,\n  "tails": 1,\n  "friends": ["everything!"]\n};\n\n// 请把你的代码写在这条注释以下\n\nvar myDog = {\n  \n  \n  \n  \n};',head:"",tail:"(function(z){return z;})(myDog);"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-dot-notation",id:"56bbb991ad1ed5201cd392d0"},slug:"/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-basic-javascript-build-javascript-objects-4f3e686f6ee44dc99082.js.map