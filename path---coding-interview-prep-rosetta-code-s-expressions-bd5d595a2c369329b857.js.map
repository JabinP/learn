{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-s-expressions-bd5d595a2c369329b857.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-s-expressions.json"],"names":["webpackJsonp","3414","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gBAAAC,aAAA,4wBAA4tB,m3BAAAC,cAAA,EAAAC,QAA+/BC,KAAA,oDAAAC,UAAA,eAAAC,QAAgGC,KAAA,yCAAAC,WAAA,wFAAqJD,KAAA,8FAAAC,WAAA,6JAA+QD,KAAA,2FAAAC,WAAA,yJAAuQC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,iEAAoHC,KAAA,GAAAC,KAAA,0TAA0VC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sDAAAC,GAAA,4BAAuJrB,KAAA","file":"path---coding-interview-prep-rosetta-code-s-expressions-bd5d595a2c369329b857.js","sourcesContent":["webpackJsonp([188168035856040],{\n\n/***/ 3414:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"S-Expressions\",\"description\":[\"<p>\",\"<a href=\\\"https://en.wikipedia.org/wiki/S-Expression\\\" title=\\\"wp: S-Expression\\\">S-Expressions</a> are one convenient way to parse and store data.\",\"</p>\",\"Task:\",\"<p>\",\"    Write a simple reader/parser for S-Expressions that handles quoted and unquoted strings, integers and floats.\",\"</p>\",\"<p>\",\"The function should read a single but nested S-Expression from a string and\",\"return it as a (nested) array.\",\"</p>\",\"<p>\",\"    Newlines and other whitespace may be ignored unless contained within a quoted string.\",\"</p>\",\"<p>“<tt>()</tt>”  inside quoted strings are not interpreted, but treated as part of the string.\",\"</p>\",\"<p>\",\"Handling escaped quotes inside a string is optional;  thus “<tt>(foo\\\"bar)</tt>” maybe treated as a string “<tt>foo\\\"bar</tt>”, or as an error.\",\"</p>\",\"<p>\",\"For this, the reader need not recognize “<tt>\\\\</tt>” for escaping, but should, in addition, recognize numbers if the language has appropriate datatypes.\",\"</p>\",\"<p>\",\"Note that with the exception of “<tt>()\\\"</tt>” (“<tt>\\\\</tt>” if escaping is supported) and whitespace there are no special characters. Anything else is allowed without quotes.\",\"</p>\",\"<p>The reader should be able to read the following input</p>\",\"<p>\",\"<pre>\",\"    ((data \\\"quoted data\\\" 123 4.5)\",\"    (data (!@# (4.5) \\\"(more\\\" \\\"data)\\\")))\",\"</pre>\",\"</p>\",\"<p>\",\"and turn it into a native datastructure. (see the\",\"<a href=\\\"http://rosettacode.org/wiki/#Pike\\\" title=\\\"#Pike\\\">Pike</a>, \",\"<a href=\\\"http://rosettacode.org/wiki/#Python\\\" title=\\\"#Python\\\">Python</a> and\",\"<a href=\\\"http://rosettacode.org/wiki/#Ruby\\\" title=\\\"#Ruby\\\">Ruby</a> implementations\",\"for examples of native data structures.)\",\"</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/s-expressions\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>parseSexpr</code> is a function.\",\"testString\":\"assert(typeof parseSexpr === 'function', '<code>parseSexpr</code> is a function.');\"},{\"text\":\"<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\\\")\",\"testString\":\"assert.deepEqual(parseSexpr(simpleSExpr), simpleSolution, \\\"<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\\\");\"},{\"text\":\"<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\\\")\",\"testString\":\"assert.deepEqual(parseSexpr(basicSExpr), basicSolution, \\\"<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\\\");\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function parseSexpr(str) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const simpleSExpr = '(data1 data2 data3)';\\nconst simpleSolution = ['data1', 'data2', 'data3'];\\n\\nconst basicSExpr = '((data \\\"quoted data\\\" 123 4.5) (data (!@# (4.5) \\\"(more\\\" \\\"data)\\\")))';\\nconst basicSolution = [[\\\"data\\\",\\\"\\\\\\\"quoted data\\\\\\\"\\\",123,4.5],[\\\"data\\\",[\\\"!@#\\\",[4.5],\\\"\\\\\\\"(more\\\\\\\"\\\",\\\"\\\\\\\"data)\\\\\\\"\\\"]]];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/taxicab-numbers\",\"id\":\"59667989bf71cf555dd5d2ff\"},\"slug\":\"/coding-interview-prep/rosetta-code/s-expressions\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-s-expressions-bd5d595a2c369329b857.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"S-Expressions\",\"description\":[\"<p>\",\"<a href=\\\"https://en.wikipedia.org/wiki/S-Expression\\\" title=\\\"wp: S-Expression\\\">S-Expressions</a> are one convenient way to parse and store data.\",\"</p>\",\"Task:\",\"<p>\",\"    Write a simple reader/parser for S-Expressions that handles quoted and unquoted strings, integers and floats.\",\"</p>\",\"<p>\",\"The function should read a single but nested S-Expression from a string and\",\"return it as a (nested) array.\",\"</p>\",\"<p>\",\"    Newlines and other whitespace may be ignored unless contained within a quoted string.\",\"</p>\",\"<p>“<tt>()</tt>”  inside quoted strings are not interpreted, but treated as part of the string.\",\"</p>\",\"<p>\",\"Handling escaped quotes inside a string is optional;  thus “<tt>(foo\\\"bar)</tt>” maybe treated as a string “<tt>foo\\\"bar</tt>”, or as an error.\",\"</p>\",\"<p>\",\"For this, the reader need not recognize “<tt>\\\\</tt>” for escaping, but should, in addition, recognize numbers if the language has appropriate datatypes.\",\"</p>\",\"<p>\",\"Note that with the exception of “<tt>()\\\"</tt>” (“<tt>\\\\</tt>” if escaping is supported) and whitespace there are no special characters. Anything else is allowed without quotes.\",\"</p>\",\"<p>The reader should be able to read the following input</p>\",\"<p>\",\"<pre>\",\"    ((data \\\"quoted data\\\" 123 4.5)\",\"    (data (!@# (4.5) \\\"(more\\\" \\\"data)\\\")))\",\"</pre>\",\"</p>\",\"<p>\",\"and turn it into a native datastructure. (see the\",\"<a href=\\\"http://rosettacode.org/wiki/#Pike\\\" title=\\\"#Pike\\\">Pike</a>, \",\"<a href=\\\"http://rosettacode.org/wiki/#Python\\\" title=\\\"#Python\\\">Python</a> and\",\"<a href=\\\"http://rosettacode.org/wiki/#Ruby\\\" title=\\\"#Ruby\\\">Ruby</a> implementations\",\"for examples of native data structures.)\",\"</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/s-expressions\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>parseSexpr</code> is a function.\",\"testString\":\"assert(typeof parseSexpr === 'function', '<code>parseSexpr</code> is a function.');\"},{\"text\":\"<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\\\")\",\"testString\":\"assert.deepEqual(parseSexpr(simpleSExpr), simpleSolution, \\\"<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\\\");\"},{\"text\":\"<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\\\")\",\"testString\":\"assert.deepEqual(parseSexpr(basicSExpr), basicSolution, \\\"<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\\\");\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function parseSexpr(str) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const simpleSExpr = '(data1 data2 data3)';\\nconst simpleSolution = ['data1', 'data2', 'data3'];\\n\\nconst basicSExpr = '((data \\\"quoted data\\\" 123 4.5) (data (!@# (4.5) \\\"(more\\\" \\\"data)\\\")))';\\nconst basicSolution = [[\\\"data\\\",\\\"\\\\\\\"quoted data\\\\\\\"\\\",123,4.5],[\\\"data\\\",[\\\"!@#\\\",[4.5],\\\"\\\\\\\"(more\\\\\\\"\\\",\\\"\\\\\\\"data)\\\\\\\"\\\"]]];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/taxicab-numbers\",\"id\":\"59667989bf71cf555dd5d2ff\"},\"slug\":\"/coding-interview-prep/rosetta-code/s-expressions\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-s-expressions.json\n// module id = 3414\n// module chunks = 188168035856040"],"sourceRoot":""}