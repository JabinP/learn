{"version":3,"sources":["webpack:///path---coding-interview-prep-project-euler-problem-287-quadtree-encoding-a-simple-compression-algorithm-658562dc95fca9199d0b.js","webpack:///./.cache/json/coding-interview-prep-project-euler-problem-287-quadtree-encoding-a-simple-compression-algorithm.json"],"names":["webpackJsonp","3069","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,kEAAAC,aAAA,iOAAwT,uOAAyO,qEAAuE,orBAAAC,cAAA,EAAAC,QAAwtBC,KAAA,oGAAAC,UAAA,gBAAAC,QAAiJC,KAAA,mDAAAC,WAAA,oGAA0KC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,2EAA8HC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,yEAAAC,GAAA,4BAA0KrB,KAAA","file":"path---coding-interview-prep-project-euler-problem-287-quadtree-encoding-a-simple-compression-algorithm-658562dc95fca9199d0b.js","sourcesContent":["webpackJsonp([115094116248140],{\n\n/***/ 3069:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 287: Quadtree encoding (a simple compression algorithm)\",\"description\":[\"The quadtree encoding allows us to describe a 2N×2N  black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:\",\"the first bit deals with the complete 2N×2N region;\",\"\\\"0\\\" denotes a split:\",\"the current 2n×2n region is divided into 4 sub-regions of dimension 2n-1×2n-1,\",\"the next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;\",\"\\\"10\\\" indicates that the current region contains only black pixels;\",\"\\\"11\\\" indicates that the current region contains only white pixels.Consider the following 4×4 image (colored marks denote places where a split can occur):\",\"\",\"This image can be described by several sequences, for example :\",\"\\\"001010101001011111011010101010\\\", of length 30, or\",\"\\\"0100101111101110\\\", of length 16, which is the minimal sequence for this image.\",\"\",\"For a positive integer N, define DN as the 2N×2N image with the following coloring scheme:\",\"the pixel with coordinates x = 0, y = 0 corresponds to the bottom left pixel,\",\"if (x - 2N-1)2 + (y - 2N-1)2 ≤ 22N-2 then the pixel is black,\",\"otherwise the pixel is white.What is the length of the minimal sequence describing D24 ?\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-287-quadtree-encoding-a-simple-compression-algorithm\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>euler287()</code> should return 313135496.\",\"testString\":\"assert.strictEqual(euler287(), 313135496, '<code>euler287()</code> should return 313135496.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function euler287() {\\n  // Good luck!\\n  return true;\\n}\\n\\neuler287();\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-288-an-enormous-factorial\",\"id\":\"5900f48b1000cf542c50ff9e\"},\"slug\":\"/coding-interview-prep/project-euler/problem-287-quadtree-encoding-a-simple-compression-algorithm\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-project-euler-problem-287-quadtree-encoding-a-simple-compression-algorithm-658562dc95fca9199d0b.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 287: Quadtree encoding (a simple compression algorithm)\",\"description\":[\"The quadtree encoding allows us to describe a 2N×2N  black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:\",\"the first bit deals with the complete 2N×2N region;\",\"\\\"0\\\" denotes a split:\",\"the current 2n×2n region is divided into 4 sub-regions of dimension 2n-1×2n-1,\",\"the next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;\",\"\\\"10\\\" indicates that the current region contains only black pixels;\",\"\\\"11\\\" indicates that the current region contains only white pixels.Consider the following 4×4 image (colored marks denote places where a split can occur):\",\"\",\"This image can be described by several sequences, for example :\",\"\\\"001010101001011111011010101010\\\", of length 30, or\",\"\\\"0100101111101110\\\", of length 16, which is the minimal sequence for this image.\",\"\",\"For a positive integer N, define DN as the 2N×2N image with the following coloring scheme:\",\"the pixel with coordinates x = 0, y = 0 corresponds to the bottom left pixel,\",\"if (x - 2N-1)2 + (y - 2N-1)2 ≤ 22N-2 then the pixel is black,\",\"otherwise the pixel is white.What is the length of the minimal sequence describing D24 ?\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-287-quadtree-encoding-a-simple-compression-algorithm\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>euler287()</code> should return 313135496.\",\"testString\":\"assert.strictEqual(euler287(), 313135496, '<code>euler287()</code> should return 313135496.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function euler287() {\\n  // Good luck!\\n  return true;\\n}\\n\\neuler287();\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-288-an-enormous-factorial\",\"id\":\"5900f48b1000cf542c50ff9e\"},\"slug\":\"/coding-interview-prep/project-euler/problem-287-quadtree-encoding-a-simple-compression-algorithm\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-project-euler-problem-287-quadtree-encoding-a-simple-compression-algorithm.json\n// module id = 3069\n// module chunks = 115094116248140"],"sourceRoot":""}