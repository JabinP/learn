{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-return-largest-numbers-in-arrays-03258dced6e8fdb4a57a.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-algorithm-scripting-return-largest-numbers-in-arrays.json"],"names":["webpackJsonp","3725","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,mCAAAC,aAAA,6OAAAC,cAAA,EAAAC,QAAuUC,KAAA,wGAAAC,UAAA,4BAAAC,QAAiKC,KAAA,iHAAAC,WAAA,6OAAkXD,KAAA,4IAAAC,WAAA,+QAA+aD,KAAA,kJAAAC,WAAA,2RAAicD,KAAA,6IAAAC,WAAA,kRAAkbC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,qKAAwNC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,0FAAAC,GAAA,4BAA2LrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-return-largest-numbers-in-arrays-03258dced6e8fdb4a57a.js","sourcesContent":["webpackJsonp([159170304957712],{\n\n/***/ 3725:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Return Largest Numbers in Arrays\",\"description\":[\"返回一个数组，它要由给出的所有子数组中的最大值组成。简单起见，给出的数组总会包含4个子数组。\",\"记得你可以在一个简单的 for 循环中遍历一个数组，并用 <code>arr[i]</code> 这样的语法来访问数组中的元素。\",\"如果你有任何疑问，可以访问 <a href=\\\"https://forum.freecodecamp.one/t/topic/157\\\" target=\\\"_blank\\\">Read-Search-Ask</a> 。请你独立解决挑战中的问题。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays\",\"blockName\":\"Basic Algorithm Scripting\",\"tests\":[{\"text\":\"<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回一个数组。\",\"testString\":\"assert(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]).constructor === Array, '<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回一个数组。');\"},{\"text\":\"<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27, 5, 39, 1001]</code>。\",\"testString\":\"assert.deepEqual(largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]), [27, 5, 39, 1001], '<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27, 5, 39, 1001]</code>。');\"},{\"text\":\"<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> 应该返回 <code>[9, 35, 97, 1000000]</code>。\",\"testString\":\"assert.deepEqual(largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]), [9, 35, 97, 1000000], '<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> 应该返回 <code>[9, 35, 97, 1000000]</code>。');\"},{\"text\":\"<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> 应该返回 <code>[25, 48, 21, -3]</code>。\",\"testString\":\"assert.deepEqual(largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]]), [25, 48, 21, -3], '<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> 应该返回 <code>[25, 48, 21, -3]</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function largestOfFour(arr) {\\n  // You can do this!\\n  return arr;\\n}\\n\\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/confirm-the-ending\",\"id\":\"a789b3483989747d63b0e427\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-return-largest-numbers-in-arrays-03258dced6e8fdb4a57a.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Return Largest Numbers in Arrays\",\"description\":[\"返回一个数组，它要由给出的所有子数组中的最大值组成。简单起见，给出的数组总会包含4个子数组。\",\"记得你可以在一个简单的 for 循环中遍历一个数组，并用 <code>arr[i]</code> 这样的语法来访问数组中的元素。\",\"如果你有任何疑问，可以访问 <a href=\\\"https://forum.freecodecamp.one/t/topic/157\\\" target=\\\"_blank\\\">Read-Search-Ask</a> 。请你独立解决挑战中的问题。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays\",\"blockName\":\"Basic Algorithm Scripting\",\"tests\":[{\"text\":\"<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回一个数组。\",\"testString\":\"assert(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]).constructor === Array, '<code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回一个数组。');\"},{\"text\":\"<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27, 5, 39, 1001]</code>。\",\"testString\":\"assert.deepEqual(largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]), [27, 5, 39, 1001], '<code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27, 5, 39, 1001]</code>。');\"},{\"text\":\"<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> 应该返回 <code>[9, 35, 97, 1000000]</code>。\",\"testString\":\"assert.deepEqual(largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]), [9, 35, 97, 1000000], '<code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> 应该返回 <code>[9, 35, 97, 1000000]</code>。');\"},{\"text\":\"<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> 应该返回 <code>[25, 48, 21, -3]</code>。\",\"testString\":\"assert.deepEqual(largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]]), [25, 48, 21, -3], '<code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> 应该返回 <code>[25, 48, 21, -3]</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function largestOfFour(arr) {\\n  // You can do this!\\n  return arr;\\n}\\n\\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/confirm-the-ending\",\"id\":\"a789b3483989747d63b0e427\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-algorithm-scripting-return-largest-numbers-in-arrays.json\n// module id = 3725\n// module chunks = 159170304957712"],"sourceRoot":""}