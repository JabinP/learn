{"version":3,"sources":["webpack:///path---coding-interview-prep-data-structures-create-a-linked-list-class-4e822d012ac374937b3b.js","webpack:///./.cache/json/coding-interview-prep-data-structures-create-a-linked-list-class.json"],"names":["webpackJsonp","2822","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6BAAAC,aAAA,oqBAAAC,cAAA,EAAAC,QAAovBC,KAAA,oEAAAC,UAAA,kBAAAC,QAAmHC,KAAA,gDAAAC,WAAA,mJAAuND,KAAA,4DAAAC,WAAA,6KAA6PD,KAAA,6CAAAC,WAAA,oLAAqPD,KAAA,wDAAAC,WAAA,+KAA0PC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,4WAA+ZC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,4EAAAC,GAAA,4BAA6KrB,KAAA","file":"path---coding-interview-prep-data-structures-create-a-linked-list-class-4e822d012ac374937b3b.js","sourcesContent":["webpackJsonp([68094231733058],{\n\n/***/ 2822:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Linked List Class\",\"description\":[\"现在我们来创建一个<code>链表</code>类。每个链表实例都应该有<code>head</code>（表中第一个元素）和<code>length</code>（表中元素的个数）这样的基本属性。有些链表会用<code>tail</code>属性表示表中最后一个元素，但是本次练习我们只关注 head 和 length 这两个属性。只要我们往链表中添加了元素，<code>length</code>属性的数值就会加一。\",\"首先，我们需要创建一个<code>add</code>方法，这个方法可以把元素添加进链表。\",\"如果链表为空，那我们只需用<code>Node</code>类来创建一个节点，同时让链表的<code>head</code>指向该元素即可。\",\"但如果链表中已经存在一些元素，我们该如何添加呢？回想一下，链表中的每个元素都有<code>next</code>属性。而且，链表中最后一个节点的<code>next</code>是指向<code>null</code>的。为了添加新节点，我们首先需要找到链表的最后一个节点，并让该节点的<code>next</code>指针指向我们添加的新节点。\",\"<hr>\",\"请写一个<code>add</code>方法，当添加第一个元素时让<code>head</code>指针指向该元素；之后添加的新元素，前一个节点的<code>next</code>属性都应该指向这个新添加的元素。\",\"注意：\",\"每当有新元素添加进链表，<code>length</code>的数值都应该加一。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-linked-list-class\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>LinkedList</code>应该有<code>add</code>方法。\",\"testString\":\"assert((function(){var test = new LinkedList(); return (typeof test.add === 'function')}()), '<code>LinkedList</code>应该有<code>add</code>方法。');\"},{\"text\":\"<code>LinkedList</code>中的<code>head</code>指针应该指向链表的第一个元素。\",\"testString\":\"assert((function(){var test = new LinkedList(); test.add('cat'); return test.head().element === 'cat'}()), '<code>LinkedList</code>中的<code>head</code>指针应该指向链表的第一个元素。');\"},{\"text\":\"<code>LinkedList</code>中的节点应该有指针指向最新创建的节点。\",\"testString\":\"assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return test.head().next.element === 'dog'}()), '<code>LinkedList</code>中的节点应该有指针指向最新创建的节点。');\"},{\"text\":\"<code>LinkedList</code>中的<code>size</code>属性应表示节点的总数。\",\"testString\":\"assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return test.size() === 2}()), '<code>LinkedList</code>中的<code>size</code>属性应表示节点的总数。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function LinkedList() { \\n  var length = 0; \\n  var head = null; \\n\\n  var Node = function(element){\\n    this.element = element; \\n    this.next = null; \\n  }; \\n\\n  this.head = function(){\\n    return head;\\n  };\\n\\n  this.size = function(){\\n    return length;\\n  };\\n\\n  this.add = function(element){\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n  };\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/remove-elements-from-a-linked-list\",\"id\":\"587d8251367417b2b2512c62\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-linked-list-class\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-data-structures-create-a-linked-list-class-4e822d012ac374937b3b.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Linked List Class\",\"description\":[\"现在我们来创建一个<code>链表</code>类。每个链表实例都应该有<code>head</code>（表中第一个元素）和<code>length</code>（表中元素的个数）这样的基本属性。有些链表会用<code>tail</code>属性表示表中最后一个元素，但是本次练习我们只关注 head 和 length 这两个属性。只要我们往链表中添加了元素，<code>length</code>属性的数值就会加一。\",\"首先，我们需要创建一个<code>add</code>方法，这个方法可以把元素添加进链表。\",\"如果链表为空，那我们只需用<code>Node</code>类来创建一个节点，同时让链表的<code>head</code>指向该元素即可。\",\"但如果链表中已经存在一些元素，我们该如何添加呢？回想一下，链表中的每个元素都有<code>next</code>属性。而且，链表中最后一个节点的<code>next</code>是指向<code>null</code>的。为了添加新节点，我们首先需要找到链表的最后一个节点，并让该节点的<code>next</code>指针指向我们添加的新节点。\",\"<hr>\",\"请写一个<code>add</code>方法，当添加第一个元素时让<code>head</code>指针指向该元素；之后添加的新元素，前一个节点的<code>next</code>属性都应该指向这个新添加的元素。\",\"注意：\",\"每当有新元素添加进链表，<code>length</code>的数值都应该加一。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-linked-list-class\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>LinkedList</code>应该有<code>add</code>方法。\",\"testString\":\"assert((function(){var test = new LinkedList(); return (typeof test.add === 'function')}()), '<code>LinkedList</code>应该有<code>add</code>方法。');\"},{\"text\":\"<code>LinkedList</code>中的<code>head</code>指针应该指向链表的第一个元素。\",\"testString\":\"assert((function(){var test = new LinkedList(); test.add('cat'); return test.head().element === 'cat'}()), '<code>LinkedList</code>中的<code>head</code>指针应该指向链表的第一个元素。');\"},{\"text\":\"<code>LinkedList</code>中的节点应该有指针指向最新创建的节点。\",\"testString\":\"assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return test.head().next.element === 'dog'}()), '<code>LinkedList</code>中的节点应该有指针指向最新创建的节点。');\"},{\"text\":\"<code>LinkedList</code>中的<code>size</code>属性应表示节点的总数。\",\"testString\":\"assert((function(){var test = new LinkedList(); test.add('cat'); test.add('dog'); return test.size() === 2}()), '<code>LinkedList</code>中的<code>size</code>属性应表示节点的总数。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function LinkedList() { \\n  var length = 0; \\n  var head = null; \\n\\n  var Node = function(element){\\n    this.element = element; \\n    this.next = null; \\n  }; \\n\\n  this.head = function(){\\n    return head;\\n  };\\n\\n  this.size = function(){\\n    return length;\\n  };\\n\\n  this.add = function(element){\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n  };\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/remove-elements-from-a-linked-list\",\"id\":\"587d8251367417b2b2512c62\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-linked-list-class\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-data-structures-create-a-linked-list-class.json\n// module id = 2822\n// module chunks = 68094231733058"],"sourceRoot":""}