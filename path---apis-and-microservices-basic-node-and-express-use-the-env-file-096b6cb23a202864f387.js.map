{"version":3,"sources":["webpack:///path---apis-and-microservices-basic-node-and-express-use-the-env-file-096b6cb23a202864f387.js","webpack:///./.cache/json/apis-and-microservices-basic-node-and-express-use-the-env-file.json"],"names":["webpackJsonp","2776","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,oBAAAC,SAAA,KAAAC,aAAA,6pBAAitBC,cAAA,EAAAC,QAAuCC,UAAA,yBAAAC,KAAA,mEAAAC,QAAyHC,KAAA,qEAAAC,WAAA,oNAA4SC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,kGAAAC,GAAA,4BAAmMV,KAAA","file":"path---apis-and-microservices-basic-node-and-express-use-the-env-file-096b6cb23a202864f387.js","sourcesContent":["webpackJsonp([133162226318523],{\n\n/***/ 2776:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use the .env File\",\"guideUrl\":null,\"description\":[\"<code>.env</code>文件是一个隐藏文件，用于将环境变量传给应用程序。这是一个私密文件，除了你之外没人可以访问它，它可以用来存储你想保持私有或者隐藏的数据。举个例子，可以存储第三方服务 API 密钥或者数据库 URI。你也可以使用它来存储配置选项。通过设置配置选项，你可以改变应用程序的行为，而无需重写一些代码。\",\"在应用程序中可以通过<code>process.env.VAR_NAME</code>访问到环境变量。<code>process.env</code>是 Node 程序中的一个全局对象，可以给这个变量传字符串。按照惯例，变量名都是大写的，单词之间用下划线隔开。<code>.env</code>是一个 shell 文件，因此不需要用给变量名和值加引号。还有一点需要注意，当你给变量赋值时，等号周围不能有空格，举个例子：<code>VAR_NAME=value</code>。通常来讲，每一个变量会单独定义在新的一行。\",\"让我们添加一个环境变量作为配置选项。在<code>.env</code>文件中保存变量<code>MESSAGE_STYLE=uppercase</code>。它的作用是，告诉上一次挑战中的路由处理程序，当我们 GET 方法请求 /JSON 时，如果<code>process.env.MESSAGE_STYLE</code>的值为<code>uppercase</code>，那么返回的对象则应该是<code>{\\\"message\\\": \\\"HELLO JSON\\\"}</code>.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Basic Node and Express\",\"slug\":\"/apis-and-microservices/basic-node-and-express/use-the--env-file\",\"tests\":[{\"text\":\"客户端响应<code>/json</code>的值，应该随着环境变量<code>MESSAGE_STYLE</code>的变化而改变\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/use-env-vars').then(data => { assert.isTrue(data.passed, '响应 \\\"/json\\\" 时，并没有随着 MESSAGE_STYLE 的值改变而改变'); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/apis-and-microservices/basic-node-and-express/implement-a-root-level-request-logger-middleware\",\"id\":\"587d7fb1367417b2b2512bf2\"},\"slug\":\"/apis-and-microservices/basic-node-and-express/use-the--env-file\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---apis-and-microservices-basic-node-and-express-use-the-env-file-096b6cb23a202864f387.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use the .env File\",\"guideUrl\":null,\"description\":[\"<code>.env</code>文件是一个隐藏文件，用于将环境变量传给应用程序。这是一个私密文件，除了你之外没人可以访问它，它可以用来存储你想保持私有或者隐藏的数据。举个例子，可以存储第三方服务 API 密钥或者数据库 URI。你也可以使用它来存储配置选项。通过设置配置选项，你可以改变应用程序的行为，而无需重写一些代码。\",\"在应用程序中可以通过<code>process.env.VAR_NAME</code>访问到环境变量。<code>process.env</code>是 Node 程序中的一个全局对象，可以给这个变量传字符串。按照惯例，变量名都是大写的，单词之间用下划线隔开。<code>.env</code>是一个 shell 文件，因此不需要用给变量名和值加引号。还有一点需要注意，当你给变量赋值时，等号周围不能有空格，举个例子：<code>VAR_NAME=value</code>。通常来讲，每一个变量会单独定义在新的一行。\",\"让我们添加一个环境变量作为配置选项。在<code>.env</code>文件中保存变量<code>MESSAGE_STYLE=uppercase</code>。它的作用是，告诉上一次挑战中的路由处理程序，当我们 GET 方法请求 /JSON 时，如果<code>process.env.MESSAGE_STYLE</code>的值为<code>uppercase</code>，那么返回的对象则应该是<code>{\\\"message\\\": \\\"HELLO JSON\\\"}</code>.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Basic Node and Express\",\"slug\":\"/apis-and-microservices/basic-node-and-express/use-the--env-file\",\"tests\":[{\"text\":\"客户端响应<code>/json</code>的值，应该随着环境变量<code>MESSAGE_STYLE</code>的变化而改变\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/use-env-vars').then(data => { assert.isTrue(data.passed, '响应 \\\"/json\\\" 时，并没有随着 MESSAGE_STYLE 的值改变而改变'); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/apis-and-microservices/basic-node-and-express/implement-a-root-level-request-logger-middleware\",\"id\":\"587d7fb1367417b2b2512bf2\"},\"slug\":\"/apis-and-microservices/basic-node-and-express/use-the--env-file\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/apis-and-microservices-basic-node-and-express-use-the-env-file.json\n// module id = 2776\n// module chunks = 133162226318523"],"sourceRoot":""}