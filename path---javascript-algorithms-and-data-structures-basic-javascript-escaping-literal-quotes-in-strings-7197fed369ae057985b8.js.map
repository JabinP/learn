{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-javascript-escaping-literal-quotes-in-strings-7197fed369ae057985b8.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-escaping-literal-quotes-in-strings.json"],"names":["webpackJsonp","3795","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,qCAAAC,aAAA,iOAAwR,4QAAAC,cAAA,EAAAC,QAAuTC,KAAA,iGAAAC,UAAA,mBAAAC,QAAiJC,KAAA,6EAAyEC,WAAA,uKAA+LD,KAAA,qFAAAC,WAAA,gLAAoSC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,gCAAuEC,KAAA,GAAAC,KAAA,sKAA4MC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,iGAAAC,GAAA,4BAAkMrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-javascript-escaping-literal-quotes-in-strings-7197fed369ae057985b8.js","sourcesContent":["webpackJsonp([192978685688078],{\n\n/***/ 3795:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Escaping Literal Quotes in Strings\",\"description\":[\"定义一个字符串必须要用单引号或双引号来包裹它。那么当你的字符串里面包含：<code>\\\"</code>或者<code>'</code>时该怎么办呢?\",\"在 JavaScript 中，你可以通过在引号前面使用<dfn>反斜杠</dfn>（<code>\\\\</code>）来转义引号。\",\"<code>var sampleStr = \\\"Alan said, \\\\\\\"Peter is learning JavaScript\\\\\\\".\\\";</code>\",\"有了转义符号，JavaScript 就知道这个单引号或双引号并不是字符串的结尾，而是字符串内的字符。所以，上面的字符串打印到控制台的结果为：\",\"<code>Alan said, \\\"Peter is learning JavaScript\\\".</code>\",\"<hr>\",\"使用<dfn>反斜杠</dfn>将一个字符串赋值给变量<code>myStr</code>，打印到控制台，输出为：\",\"<code>I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".</code>\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/escaping-literal-quotes-in-strings\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引 (<code>&#92;&quot;</code>).\",\"testString\":\"assert(code.match(/\\\\\\\\\\\"/g).length === 4 && code.match(/[^\\\\\\\\]\\\"/g).length === 2, '你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引 (<code>&#92;&quot;</code>).');\"},{\"text\":\"变量 myStr 应该包含字符串<code>I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".</code>\",\"testString\":\"assert(myStr === \\\"I am a \\\\\\\"double quoted\\\\\\\" string inside \\\\\\\"double quotes\\\\\\\".\\\", '变量 myStr 应该包含字符串<code>I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".</code>');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var myStr = \\\"\\\"; // 请修改这一行\\n\\n\",\"head\":\"\",\"tail\":\"(function(){\\n  if(typeof myStr === 'string') {\\n    console.log(\\\"myStr = \\\\\\\"\\\" + myStr + \\\"\\\\\\\"\\\");\\n  } else {\\n    console.log(\\\"myStr is undefined\\\");\\n  }\\n})();\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/quoting-strings-with-single-quotes\",\"id\":\"56533eb9ac21ba0edf2244b5\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/escaping-literal-quotes-in-strings\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-javascript-escaping-literal-quotes-in-strings-7197fed369ae057985b8.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Escaping Literal Quotes in Strings\",\"description\":[\"定义一个字符串必须要用单引号或双引号来包裹它。那么当你的字符串里面包含：<code>\\\"</code>或者<code>'</code>时该怎么办呢?\",\"在 JavaScript 中，你可以通过在引号前面使用<dfn>反斜杠</dfn>（<code>\\\\</code>）来转义引号。\",\"<code>var sampleStr = \\\"Alan said, \\\\\\\"Peter is learning JavaScript\\\\\\\".\\\";</code>\",\"有了转义符号，JavaScript 就知道这个单引号或双引号并不是字符串的结尾，而是字符串内的字符。所以，上面的字符串打印到控制台的结果为：\",\"<code>Alan said, \\\"Peter is learning JavaScript\\\".</code>\",\"<hr>\",\"使用<dfn>反斜杠</dfn>将一个字符串赋值给变量<code>myStr</code>，打印到控制台，输出为：\",\"<code>I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".</code>\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/escaping-literal-quotes-in-strings\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引 (<code>&#92;&quot;</code>).\",\"testString\":\"assert(code.match(/\\\\\\\\\\\"/g).length === 4 && code.match(/[^\\\\\\\\]\\\"/g).length === 2, '你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引 (<code>&#92;&quot;</code>).');\"},{\"text\":\"变量 myStr 应该包含字符串<code>I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".</code>\",\"testString\":\"assert(myStr === \\\"I am a \\\\\\\"double quoted\\\\\\\" string inside \\\\\\\"double quotes\\\\\\\".\\\", '变量 myStr 应该包含字符串<code>I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".</code>');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var myStr = \\\"\\\"; // 请修改这一行\\n\\n\",\"head\":\"\",\"tail\":\"(function(){\\n  if(typeof myStr === 'string') {\\n    console.log(\\\"myStr = \\\\\\\"\\\" + myStr + \\\"\\\\\\\"\\\");\\n  } else {\\n    console.log(\\\"myStr is undefined\\\");\\n  }\\n})();\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/quoting-strings-with-single-quotes\",\"id\":\"56533eb9ac21ba0edf2244b5\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/escaping-literal-quotes-in-strings\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-escaping-literal-quotes-in-strings.json\n// module id = 3795\n// module chunks = 192978685688078"],"sourceRoot":""}