{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-slice-and-splice-d871a8ff906a94ad5f84.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-algorithm-scripting-slice-and-splice.json"],"names":["webpackJsonp","3727","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,mBAAAC,aAAA,wSAAAC,cAAA,EAAAC,QAAkXC,KAAA,wFAAAC,UAAA,4BAAAC,QAAiJC,KAAA,sFAAAC,WAAA,mKAA6QD,KAAA,wFAAAC,WAAA,yKAAuSD,KAAA,4KAAAC,WAAA,iVAAulBD,KAAA,kCAAAC,WAAA,2GAAiKD,KAAA,sBAAAC,WAAA,2EAAqHD,KAAA,sBAAAC,WAAA,kFAA6HC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,sIAAyLC,KAAA,GAAAC,KAAA,sDAA4EC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,qFAAAC,GAAA,4BAAsLrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-slice-and-splice-d871a8ff906a94ad5f84.js","sourcesContent":["webpackJsonp([149889153889892],{\n\n/***/ 3727:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Slice and Splice\",\"description\":[\"本挑战的输入参数为：两个数组和一个索引值。\",\"请利用数组的 <code>slice</code> 和 <code>splice</code> 方法，将第一个数组中的所有元素依次复制到第二个数组中。\",\"请从第二个数组中索引值为 <code>n</code> 的地方开始插入。\",\"返回插入元素后的数组。输入的两个数组在函数执行前后要保持不变。\",\"如果你有任何疑问，可以访问 <a href=\\\"https://forum.freecodecamp.one/t/topic/157\\\" target=\\\"_blank\\\">Read-Search-Ask</a> 。请你独立解决挑战中的问题。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/slice-and-splice\",\"blockName\":\"Basic Algorithm Scripting\",\"tests\":[{\"text\":\"<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> 应该返回 <code>[4, 1, 2, 3, 5]</code>。\",\"testString\":\"assert.deepEqual(frankenSplice([1, 2, 3], [4, 5], 1), [4, 1, 2, 3, 5], '<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> 应该返回 <code>[4, 1, 2, 3, 5]</code>。');\"},{\"text\":\"<code>frankenSplice([1, 2], [\\\"a\\\", \\\"b\\\"], 1)</code> 应该返回 <code>[\\\"a\\\", 1, 2, \\\"b\\\"]</code>。\",\"testString\":\"assert.deepEqual(frankenSplice(testArr1, testArr2, 1), [\\\"a\\\", 1, 2, \\\"b\\\"], '<code>frankenSplice([1, 2], [\\\"a\\\", \\\"b\\\"], 1)</code> 应该返回 <code>[\\\"a\\\", 1, 2, \\\"b\\\"]</code>。');\"},{\"text\":\"<code>frankenSplice([\\\"claw\\\", \\\"tentacle\\\"], [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"toes\\\"], 2)</code> 应该返回 <code>[\\\"head\\\", \\\"shoulders\\\", \\\"claw\\\", \\\"tentacle\\\", \\\"knees\\\", \\\"toes\\\"]</code>。\",\"testString\":\"assert.deepEqual(frankenSplice([\\\"claw\\\", \\\"tentacle\\\"], [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"toes\\\"], 2), [\\\"head\\\", \\\"shoulders\\\", \\\"claw\\\", \\\"tentacle\\\", \\\"knees\\\", \\\"toes\\\"], '<code>frankenSplice([\\\"claw\\\", \\\"tentacle\\\"], [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"toes\\\"], 2)</code> 应该返回 <code>[\\\"head\\\", \\\"shoulders\\\", \\\"claw\\\", \\\"tentacle\\\", \\\"knees\\\", \\\"toes\\\"]</code>。');\"},{\"text\":\"来自第一个数组的所有元素应该按原来的顺序被插入到第二个数组中。\",\"testString\":\"assert.deepEqual(frankenSplice([1, 2, 3, 4], [], 0), [1, 2, 3, 4], '来自第一个数组的所有元素应该按原来的顺序被插入到第二个数组中。');\"},{\"text\":\"第一个数组在函数执行前后应该保持一样。\",\"testString\":\"assert(testArr1[0] === 1 && testArr1[1] === 2, '第一个数组在函数执行前后应该保持一样。');\"},{\"text\":\"第二个数组在函数执行前后应该保持一样。\",\"testString\":\"assert(testArr2[0] === \\\"a\\\" && testArr2[1] === \\\"b\\\", '第二个数组在函数执行前后应该保持一样。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function frankenSplice(arr1, arr2, n) {\\n  // It's alive. It's alive!\\n  return arr2;\\n}\\n\\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);\",\"head\":\"\",\"tail\":\"let testArr1 = [1, 2];\\nlet testArr2 = [\\\"a\\\", \\\"b\\\"];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/falsy-bouncer\",\"id\":\"579e2a2c335b9d72dd32e05c\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/slice-and-splice\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-algorithm-scripting-slice-and-splice-d871a8ff906a94ad5f84.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Slice and Splice\",\"description\":[\"本挑战的输入参数为：两个数组和一个索引值。\",\"请利用数组的 <code>slice</code> 和 <code>splice</code> 方法，将第一个数组中的所有元素依次复制到第二个数组中。\",\"请从第二个数组中索引值为 <code>n</code> 的地方开始插入。\",\"返回插入元素后的数组。输入的两个数组在函数执行前后要保持不变。\",\"如果你有任何疑问，可以访问 <a href=\\\"https://forum.freecodecamp.one/t/topic/157\\\" target=\\\"_blank\\\">Read-Search-Ask</a> 。请你独立解决挑战中的问题。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/slice-and-splice\",\"blockName\":\"Basic Algorithm Scripting\",\"tests\":[{\"text\":\"<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> 应该返回 <code>[4, 1, 2, 3, 5]</code>。\",\"testString\":\"assert.deepEqual(frankenSplice([1, 2, 3], [4, 5], 1), [4, 1, 2, 3, 5], '<code>frankenSplice([1, 2, 3], [4, 5], 1)</code> 应该返回 <code>[4, 1, 2, 3, 5]</code>。');\"},{\"text\":\"<code>frankenSplice([1, 2], [\\\"a\\\", \\\"b\\\"], 1)</code> 应该返回 <code>[\\\"a\\\", 1, 2, \\\"b\\\"]</code>。\",\"testString\":\"assert.deepEqual(frankenSplice(testArr1, testArr2, 1), [\\\"a\\\", 1, 2, \\\"b\\\"], '<code>frankenSplice([1, 2], [\\\"a\\\", \\\"b\\\"], 1)</code> 应该返回 <code>[\\\"a\\\", 1, 2, \\\"b\\\"]</code>。');\"},{\"text\":\"<code>frankenSplice([\\\"claw\\\", \\\"tentacle\\\"], [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"toes\\\"], 2)</code> 应该返回 <code>[\\\"head\\\", \\\"shoulders\\\", \\\"claw\\\", \\\"tentacle\\\", \\\"knees\\\", \\\"toes\\\"]</code>。\",\"testString\":\"assert.deepEqual(frankenSplice([\\\"claw\\\", \\\"tentacle\\\"], [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"toes\\\"], 2), [\\\"head\\\", \\\"shoulders\\\", \\\"claw\\\", \\\"tentacle\\\", \\\"knees\\\", \\\"toes\\\"], '<code>frankenSplice([\\\"claw\\\", \\\"tentacle\\\"], [\\\"head\\\", \\\"shoulders\\\", \\\"knees\\\", \\\"toes\\\"], 2)</code> 应该返回 <code>[\\\"head\\\", \\\"shoulders\\\", \\\"claw\\\", \\\"tentacle\\\", \\\"knees\\\", \\\"toes\\\"]</code>。');\"},{\"text\":\"来自第一个数组的所有元素应该按原来的顺序被插入到第二个数组中。\",\"testString\":\"assert.deepEqual(frankenSplice([1, 2, 3, 4], [], 0), [1, 2, 3, 4], '来自第一个数组的所有元素应该按原来的顺序被插入到第二个数组中。');\"},{\"text\":\"第一个数组在函数执行前后应该保持一样。\",\"testString\":\"assert(testArr1[0] === 1 && testArr1[1] === 2, '第一个数组在函数执行前后应该保持一样。');\"},{\"text\":\"第二个数组在函数执行前后应该保持一样。\",\"testString\":\"assert(testArr2[0] === \\\"a\\\" && testArr2[1] === \\\"b\\\", '第二个数组在函数执行前后应该保持一样。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function frankenSplice(arr1, arr2, n) {\\n  // It's alive. It's alive!\\n  return arr2;\\n}\\n\\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);\",\"head\":\"\",\"tail\":\"let testArr1 = [1, 2];\\nlet testArr2 = [\\\"a\\\", \\\"b\\\"];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/falsy-bouncer\",\"id\":\"579e2a2c335b9d72dd32e05c\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-algorithm-scripting/slice-and-splice\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-algorithm-scripting-slice-and-splice.json\n// module id = 3727\n// module chunks = 149889153889892"],"sourceRoot":""}