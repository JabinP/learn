webpackJsonp([0xe143099f9f1d],{2842:function(e,n){e.exports={data:{challengeNode:{title:"Perform a Difference on Two Sets of Data",description:["在本次练习中，我们需要在<code>Set</code>数据结构中创建一个计算两集合差集的<code>difference</code>方法。两个集合差集的概念为：由第一个集合中存在且第二个集合中不存在的元素组成的集合。该方法应该接收另一个<code>Set</code>作为参数并且返回两个集合的差集。","举个例子，集合<code>setA = ['a','b','c']</code>与<code>setB = ['a','b','d','e']</code>的差集比较结果为：<code>setA.difference(setB) = ['c']</code>。"],challengeType:1,fields:{slug:"/coding-interview-prep/data-structures/perform-a-difference-on-two-sets-of-data",blockName:"Data Structures",tests:[{text:"<code>Set</code>应该有<code>difference</code>方法。",testString:"assert(function(){var test = new Set(); return (typeof test.difference === 'function')}, '<code>Set</code>应该有<code>difference</code>方法。');"},{text:"<code>difference</code>方法应返回正确的集合结果。",testString:"assert(function(){var setA = new Set(); var setB = new Set(); setA.add('a'); setA.add('b'); setA.add('c'); setB.add('c'); setB.add('d'); var differenceSetAB = setA.difference(setB); return (differenceSetAB.size() === 2) && (differenceSetAB.values() === [ 'a', 'b' ])}, '<code>difference</code>方法应返回正确的集合结果。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function Set() {\n    // collection 变量用来存储集合中的元素\n    var collection = [];\n    // 当集合中存在 element 元素时返回 true 否则返回 false\n    this.has = function(element) {\n        return (collection.indexOf(element) !== -1);\n    };\n    // 该方法会返回集合内所有元素\n    this.values = function() {\n        return collection;\n    };\n    // 该方法会把 element 添加到集合中\n    this.add = function(element) {\n        if(!this.has(element)){\n            collection.push(element);\n            return true;\n        }\n        return false;\n    };\n    // 该方法用于从集合中移除 element 元素\n    this.remove = function(element) {\n        if(this.has(element)){\n           var index = collection.indexOf(element);\n            collection.splice(index,1);\n            return true;\n        }\n        return false;\n    };\n    // 该方法返回集合长度\n    this.size = function() {\n        return collection.length;\n    };\n    // 该方法会返回两个集合的交集\n    this.union = function(otherSet) {\n        var unionSet = new Set();\n        var firstSet = this.values();\n        var secondSet = otherSet.values();\n        firstSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        secondSet.forEach(function(e){\n            unionSet.add(e);\n        });\n        return unionSet;\n    };\n    // 该方法会返回两个集合的差集\n    this.intersection = function(otherSet) {\n        var intersectionSet = new Set();\n        var firstSet = this.values();\n        firstSet.forEach(function(e){\n            if(otherSet.has(e)){\n                intersectionSet.add(e);\n            }\n        });\n        return intersectionSet;\n    };\n    // 请把你的代码写在这条注释以下\n    // 请把你的代码写在这条注释以上\n}",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/data-structures/perform-a-subset-check-on-two-sets-of-data",id:"587d8254367417b2b2512c6e"},slug:"/coding-interview-prep/data-structures/perform-a-difference-on-two-sets-of-data"}}}});
//# sourceMappingURL=path---coding-interview-prep-data-structures-perform-a-difference-on-two-sets-of-data-541b055386aedbdaf20e.js.map