{"version":3,"sources":["webpack:///path---coding-interview-prep-data-structures-create-a-doubly-linked-list-52e064ca317066a395ff.js","webpack:///./.cache/json/coding-interview-prep-data-structures-create-a-doubly-linked-list.json"],"names":["webpackJsonp","2820","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,8BAAAC,aAAA,+YAAAC,cAAA,EAAAC,QAAgeC,KAAA,qEAAAC,UAAA,kBAAAC,QAAoHC,KAAA,YAAAC,WAAA,+KAA+MD,KAAA,kBAAAC,WAAA,yOAA+QD,KAAA,qBAAAC,WAAA,kPAA2RD,KAAA,wBAAAC,WAAA,8LAA0OD,KAAA,sBAAAC,WAAA,6OAAuRD,KAAA,qBAAAC,WAAA,qPAA8RD,KAAA,iBAAAC,WAAA,0PAA+RD,KAAA,kBAAAC,WAAA,4PAAiSC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,oOAAuRC,KAAA,GAAAC,KAAA,2pBAA6qBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sEAAAC,GAAA,4BAAuKrB,KAAA","file":"path---coding-interview-prep-data-structures-create-a-doubly-linked-list-52e064ca317066a395ff.js","sourcesContent":["webpackJsonp([22530596316260],{\n\n/***/ 2820:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Doubly Linked List\",\"description\":[\"之前我们创建的都是单向链表，现在我们来创建双向链表。顾名思义，双向链表拥有两个指针，一个指向前一个节点，一个指向后一个节点。\",\"对于这种链表，我们可以从两个方向遍历元素，但因为每个节点都有两个指针，因此这种链表会占据更多的内存空间。\",\"<hr>\",\"在右边的编辑器中，我们已经为你写好了一个<code>Node</code>和<code>DoublyLinkedList</code>。现在我们来给双向链表添加<code>add</code>和<code>remove</code>方法。<code>add</code>方法应该把指定的元素添加到双向链表中，而<code>remove</code>方法应该移除双向链表中的指定元素。\",\"对于双向链表中边界元素的操作，比如移除移除头部或尾部元素时需要谨慎。以及，如果尝试从空链表中移除元素，则应该返回<code>null</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-doubly-linked-list\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"应该存在双向链表。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (typeof test == 'object')})(), '应该存在双向链表。');\"},{\"text\":\"双向链表应该有 add 方法。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.add == undefined) { return false; }; return (typeof test.add == 'function')})(), '双向链表应该有 add 方法。');\"},{\"text\":\"双向链表应该有 remove 方法。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.remove == undefined) { return false; }; return (typeof test.remove == 'function')})(), '双向链表应该有 remove 方法。');\"},{\"text\":\"试图从空表中移除元素时应该返回 null。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (test.remove(100) == null); })(), '试图从空表中移除元素时应该返回 null。');\"},{\"text\":\"add 方法应可以把元素添加到链表中。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(5); test.add(6); test.add(723); return (test.print().join('') == '56723'); })(), 'add 方法应可以把元素添加到链表中。');\"},{\"text\":\"每个节点应该有指向前一个节点的指针。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(50); test.add(68); test.add(73); return (test.printReverse().join('') == '736850'); })(), '每个节点应该有指向前一个节点的指针。');\"},{\"text\":\"表中第一个元素应可以被移除。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(25); test.add(35); test.add(60); test.remove(25); return ( test.print().join('') == '3560' ) })(), '表中第一个元素应可以被移除。');\"},{\"text\":\"表中最后一个元素应可以被移除。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(25); test.add(35); test.add(60); test.remove(60); return ( test.print().join('') == '2535' ) })(), '表中最后一个元素应可以被移除。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var Node = function(data, prev) {\\n  this.data = data;\\n  this.prev = prev;\\n  this.next = null;\\n};\\nvar DoublyLinkedList = function() {\\n  this.head = null;\\n  this.tail = null;\\n  // 请把你的代码写在这条注释以下\\n  // 请把你的代码写在这条注释以上\\n};\",\"head\":\"\",\"tail\":\"DoublyLinkedList.prototype = {\\n  print() {\\n    if (this.head == null) {\\n      return null;\\n    } else {\\n      var result = new Array();\\n      var node = this.head;\\n      while (node.next != null) {\\n        result.push(node.data);\\n        node = node.next;\\n      };\\n      result.push(node.data);\\n      return result;\\n    };\\n  },\\n  printReverse() {\\n    if (this.tail == null) {\\n      return null;\\n    } else {\\n      var result = new Array();\\n      var node = this.tail;\\n      while (node.prev != null) {\\n        result.push(node.data);\\n        node = node.prev;\\n      };\\n      result.push(node.data);\\n      return result;\\n    };\\n  } \\n};\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/reverse-a-doubly-linked-list\",\"id\":\"587d825a367417b2b2512c87\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-doubly-linked-list\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-data-structures-create-a-doubly-linked-list-52e064ca317066a395ff.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Doubly Linked List\",\"description\":[\"之前我们创建的都是单向链表，现在我们来创建双向链表。顾名思义，双向链表拥有两个指针，一个指向前一个节点，一个指向后一个节点。\",\"对于这种链表，我们可以从两个方向遍历元素，但因为每个节点都有两个指针，因此这种链表会占据更多的内存空间。\",\"<hr>\",\"在右边的编辑器中，我们已经为你写好了一个<code>Node</code>和<code>DoublyLinkedList</code>。现在我们来给双向链表添加<code>add</code>和<code>remove</code>方法。<code>add</code>方法应该把指定的元素添加到双向链表中，而<code>remove</code>方法应该移除双向链表中的指定元素。\",\"对于双向链表中边界元素的操作，比如移除移除头部或尾部元素时需要谨慎。以及，如果尝试从空链表中移除元素，则应该返回<code>null</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-doubly-linked-list\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"应该存在双向链表。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (typeof test == 'object')})(), '应该存在双向链表。');\"},{\"text\":\"双向链表应该有 add 方法。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.add == undefined) { return false; }; return (typeof test.add == 'function')})(), '双向链表应该有 add 方法。');\"},{\"text\":\"双向链表应该有 remove 方法。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; if (test.remove == undefined) { return false; }; return (typeof test.remove == 'function')})(), '双向链表应该有 remove 方法。');\"},{\"text\":\"试图从空表中移除元素时应该返回 null。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; return (test.remove(100) == null); })(), '试图从空表中移除元素时应该返回 null。');\"},{\"text\":\"add 方法应可以把元素添加到链表中。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(5); test.add(6); test.add(723); return (test.print().join('') == '56723'); })(), 'add 方法应可以把元素添加到链表中。');\"},{\"text\":\"每个节点应该有指向前一个节点的指针。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(50); test.add(68); test.add(73); return (test.printReverse().join('') == '736850'); })(), '每个节点应该有指向前一个节点的指针。');\"},{\"text\":\"表中第一个元素应可以被移除。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(25); test.add(35); test.add(60); test.remove(25); return ( test.print().join('') == '3560' ) })(), '表中第一个元素应可以被移除。');\"},{\"text\":\"表中最后一个元素应可以被移除。\",\"testString\":\"assert((function() { var test = false; if (typeof DoublyLinkedList !== 'undefined') { test = new DoublyLinkedList() }; test.add(25); test.add(35); test.add(60); test.remove(60); return ( test.print().join('') == '2535' ) })(), '表中最后一个元素应可以被移除。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var Node = function(data, prev) {\\n  this.data = data;\\n  this.prev = prev;\\n  this.next = null;\\n};\\nvar DoublyLinkedList = function() {\\n  this.head = null;\\n  this.tail = null;\\n  // 请把你的代码写在这条注释以下\\n  // 请把你的代码写在这条注释以上\\n};\",\"head\":\"\",\"tail\":\"DoublyLinkedList.prototype = {\\n  print() {\\n    if (this.head == null) {\\n      return null;\\n    } else {\\n      var result = new Array();\\n      var node = this.head;\\n      while (node.next != null) {\\n        result.push(node.data);\\n        node = node.next;\\n      };\\n      result.push(node.data);\\n      return result;\\n    };\\n  },\\n  printReverse() {\\n    if (this.tail == null) {\\n      return null;\\n    } else {\\n      var result = new Array();\\n      var node = this.tail;\\n      while (node.prev != null) {\\n        result.push(node.data);\\n        node = node.prev;\\n      };\\n      result.push(node.data);\\n      return result;\\n    };\\n  } \\n};\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/reverse-a-doubly-linked-list\",\"id\":\"587d825a367417b2b2512c87\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-doubly-linked-list\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-data-structures-create-a-doubly-linked-list.json\n// module id = 2820\n// module chunks = 22530596316260"],"sourceRoot":""}