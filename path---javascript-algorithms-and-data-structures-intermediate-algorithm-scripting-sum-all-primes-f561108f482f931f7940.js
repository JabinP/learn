webpackJsonp([18453980361254],{3944:function(e,t){e.exports={data:{challengeNode:{title:"Sum All Primes",description:["在这道题目中，我们需要写一个函数，它接收一个数字参数<code>num</code>，返回值为不大于这个数字的所有质数之和。","质数是大于 1 且仅可以被 1 和自己整除的数。比如，2 就是一个质数，因为它只可以被 1 和 2（它本身）整除。","注意，传入函数的<code>num</code>不一定是质数。","如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。"],challengeType:5,fields:{slug:"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-primes",blockName:"Intermediate Algorithm Scripting",tests:[{text:"<code>sumPrimes(10)</code>应该返回一个数字。",testString:"assert.deepEqual(typeof sumPrimes(10), 'number', '<code>sumPrimes(10)</code>应该返回一个数字。');"},{text:"<code>sumPrimes(10)</code>应该返回 17。",testString:"assert.deepEqual(sumPrimes(10), 17, '<code>sumPrimes(10)</code>应该返回 17。');"},{text:"<code>sumPrimes(977)</code>应该返回 73156。",testString:"assert.deepEqual(sumPrimes(977), 73156, '<code>sumPrimes(977)</code>应该返回 73156。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function sumPrimes(num) {\n  return num;\n}\n\nsumPrimes(10);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/smallest-common-multiple",id:"a3bfc1673c0526e06d3ac698"},slug:"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-primes"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-sum-all-primes-f561108f482f931f7940.js.map