{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-information-security-with-helmetjs-mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter-954089489ade700ac831.js","webpack:///./.cache/json/information-security-and-quality-assurance-information-security-with-helmetjs-mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter.json"],"names":["webpackJsonp","3684","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,kFAAAC,SAAA,KAAAC,aAAA,0iBAAAC,cAAA,EAAAC,QAA+rBC,UAAA,qCAAAC,KAAA,6JAAAC,QAA+NC,KAAA,8BAAAC,WAAA,0OAA2RC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,4IAAAC,GAAA,4BAA6OV,KAAA","file":"path---information-security-and-quality-assurance-information-security-with-helmetjs-mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter-954089489ade700ac831.js","sourcesContent":["webpackJsonp([274309574723722],{\n\n/***/ 3684:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Mitigate the Risk of Cross Site Scripting (XSS) Attacks with helmet.xssFilter()\",\"guideUrl\":null,\"description\":[\"温馨提醒，本项目在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>这个 Glitch 项目</a> 的基础上进行开发。你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a> 上克隆。\",\"跨站脚本攻击 (XSS) 是一种比较常见的攻击手段，通过给页面注入恶意脚本来获取用户的 session, 密码等信息。\",\"防止这类型的攻击也非常简单：“永远不要相信用户的输入”。 作为一名开发人员，你一定要对所有外部的输入进行审查，其中包括来自表单，GET 请求，POST 请求主体的内容。审核就是说你需要查找并给有潜在风险的字符进行编码，例如：<, >.\",\"现代浏览器已经有非常好的软件策略来应对着类型问题。通常是通过配置 http 头部来实现.\",\"X-XSS-Protection HTTP 头部是一个基本的防护。浏览器通过启发式过滤法则来检测有潜在风险的注入脚本，这是有如果这个头部被启用了，浏览器就能改成脚本里面的代码从而使恶意代码不再生效。\",\"但是浏览器对这个功能的支持有限。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Information Security with HelmetJS\",\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter\",\"tests\":[{\"text\":\"helmet.xssFilter() 应该被正确地加载\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'xXssProtection'); assert.property(data.headers, 'x-xss-protection'); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/avoid-inferring-the-response-mime-type-with-helmet-nosniff\",\"id\":\"587d8247367417b2b2512c39\"},\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-information-security-with-helmetjs-mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter-954089489ade700ac831.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Mitigate the Risk of Cross Site Scripting (XSS) Attacks with helmet.xssFilter()\",\"guideUrl\":null,\"description\":[\"温馨提醒，本项目在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>这个 Glitch 项目</a> 的基础上进行开发。你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a> 上克隆。\",\"跨站脚本攻击 (XSS) 是一种比较常见的攻击手段，通过给页面注入恶意脚本来获取用户的 session, 密码等信息。\",\"防止这类型的攻击也非常简单：“永远不要相信用户的输入”。 作为一名开发人员，你一定要对所有外部的输入进行审查，其中包括来自表单，GET 请求，POST 请求主体的内容。审核就是说你需要查找并给有潜在风险的字符进行编码，例如：<, >.\",\"现代浏览器已经有非常好的软件策略来应对着类型问题。通常是通过配置 http 头部来实现.\",\"X-XSS-Protection HTTP 头部是一个基本的防护。浏览器通过启发式过滤法则来检测有潜在风险的注入脚本，这是有如果这个头部被启用了，浏览器就能改成脚本里面的代码从而使恶意代码不再生效。\",\"但是浏览器对这个功能的支持有限。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Information Security with HelmetJS\",\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter\",\"tests\":[{\"text\":\"helmet.xssFilter() 应该被正确地加载\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'xXssProtection'); assert.property(data.headers, 'x-xss-protection'); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/avoid-inferring-the-response-mime-type-with-helmet-nosniff\",\"id\":\"587d8247367417b2b2512c39\"},\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-information-security-with-helmetjs-mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter.json\n// module id = 3684\n// module chunks = 274309574723722"],"sourceRoot":""}