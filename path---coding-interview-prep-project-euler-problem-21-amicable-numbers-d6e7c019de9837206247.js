webpackJsonp([0xbc5c56c6a550],{2984:function(e,a){e.exports={data:{challengeNode:{title:"Problem 21: Amicable numbers",description:["记 d(<var>n</var>) 为 <var>n</var> 的所有真因数(小于 <var>n</var> 且整除 <var>n</var> 的正整数)之和。","如果 d(<var>a</var>) = <var>b</var> 且 d(<var>b</var>) = <var>a</var>，同时 <var>a</var> ≠ <var>b</var>，那么 <var>a</var> 和 <var>b</var> 构成一个亲和数对，<var>a</var> 和 <var>b</var> 被称为亲和数。","例如，220 的真因数包括 1、2、4、5、10、11、20、22、44、55和100，因此 d(220) = 284；而 284 的真因数包括 1、2、4、71 和142，因此 d(284) = 220。","求所有小于给定参数值 n 的亲和数的和。"],challengeType:5,fields:{slug:"/coding-interview-prep/project-euler/problem-21-amicable-numbers",blockName:"Project Euler",tests:[{text:"<code>sumAmicableNum(1000)</code>应该返回 504。",testString:"assert.strictEqual(sumAmicableNum(1000), 504, '<code>sumAmicableNum(1000)</code>应该返回 504。');"},{text:"<code>sumAmicableNum(2000)</code>应该返回 2898。",testString:"assert.strictEqual(sumAmicableNum(2000), 2898, '<code>sumAmicableNum(2000)</code>应该返回 2898。');"},{text:"<code>sumAmicableNum(5000)</code>应该返回 8442。",testString:"assert.strictEqual(sumAmicableNum(5000), 8442, '<code>sumAmicableNum(5000)</code>应该返回 8442。');"},{text:"<code>sumAmicableNum(10000)</code>应该返回 31626。",testString:"assert.strictEqual(sumAmicableNum(10000), 31626, '<code>sumAmicableNum(10000)</code>应该返回 31626。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function sumAmicableNum(n) {\n  // 祝你好运！\n  return n;\n}\n\nsumAmicableNum(10000);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/project-euler/problem-22-names-scores",id:"5900f3811000cf542c50fe94"},slug:"/coding-interview-prep/project-euler/problem-21-amicable-numbers"}}}});
//# sourceMappingURL=path---coding-interview-prep-project-euler-problem-21-amicable-numbers-d6e7c019de9837206247.js.map