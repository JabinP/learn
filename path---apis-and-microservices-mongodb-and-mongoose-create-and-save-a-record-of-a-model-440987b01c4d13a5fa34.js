webpackJsonp([0x9e15b5d49d75],{2791:function(e,o){e.exports={data:{challengeNode:{title:"Create and Save a Record of a Model",guideUrl:null,description:["使用 Person 的 constructor（构造器）函数可以创建一个 document 对象，该对象包含<code>name</code>、<code>age</code>和<code>favoriteFoods</code>字段。这些字段的类型必须符合 Person Schema 里面定义的类型。然后调用<code>document.save()</code>。使用 Node 惯例传递 callback。通常情况下，所有的 CRUD（增查改删）方法都会像下面一样作为最后一个参数去执行一个<code>callback()</code>。","<code>/* 示例 */</code>","<code>// ...</code>","<code>person.save(function(err, data) {</code>","<code>// 你的代码</code>","<code>});</code>"],challengeType:2,fields:{blockName:"MongoDB and Mongoose",slug:"/apis-and-microservices/mongodb-and-mongoose/create-and-save-a-record-of-a-model",tests:[{text:"成功创建一条 db 并保存。",testString:"getUserInput => $.get(getUserInput('url') + '/_api/create-and-save-person').then(data => { assert.isString(data.name, '\"item.name\" should be a String'); assert.isNumber(data.age, '28', '\"item.age\" should be a Number'); assert.isArray(data.favoriteFoods, '\"item.favoriteFoods\" should be an Array'); assert.equal(data.__v, 0, 'The db item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"}]}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/apis-and-microservices/mongodb-and-mongoose/create-many-records-with-model-create",id:"587d7fb6367417b2b2512c09"},slug:"/apis-and-microservices/mongodb-and-mongoose/create-and-save-a-record-of-a-model"}}}});
//# sourceMappingURL=path---apis-and-microservices-mongodb-and-mongoose-create-and-save-a-record-of-a-model-440987b01c4d13a5fa34.js.map