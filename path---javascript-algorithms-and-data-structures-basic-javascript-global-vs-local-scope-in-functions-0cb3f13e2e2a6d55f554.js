webpackJsonp([79332731763083],{3802:function(e,t){e.exports={data:{challengeNode:{title:"Global vs. Local Scope in Functions",description:["一个程序中有可能具有相同名称的<dfn>局部</dfn>变量 和<dfn>全局</dfn>变量。在这种情况下，<code>局部</code>变量将会优先于<code>全局</code>变量。","下面为例：",'<blockquote>var someVar = "Hat";<br>function myFun() {<br>  var someVar = "Head";<br>  return someVar;<br>}</blockquote>','函数<code>myFun</code>将会返回<code>"Head"</code>，因为<code>局部变量</code>优先级更高。',"<hr>",'给<code>myOutfit</code>添加一个局部变量来覆盖<code>outerWear</code>的值为<code>"sweater"</code>。'],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/basic-javascript/global-vs--local-scope-in-functions",blockName:"Basic JavaScript",tests:[{text:"不要修改全局变量<code>outerWear</code>的值",testString:"assert(outerWear === \"T-Shirt\", '不要修改全局变量<code>outerWear</code>的值');"},{text:'<code>myOutfit</code>应该返回<code>"sweater"</code>',testString:'assert(myOutfit() === "sweater", \'<code>myOutfit</code>应该返回<code>"sweater"</code>\');'},{text:"不要修改<code>return</code>语句",testString:"assert(/return outerWear/.test(code), '不要修改<code>return</code>语句');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'// 初始化变量\nvar outerWear = "T-Shirt";\n\nfunction myOutfit() {\n  // 请把你的代码写在这条注释以下\n  \n  \n  \n  // 请把你的代码写在这条注释以上\n  return outerWear;\n}\n\nmyOutfit();',head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/basic-javascript/return-a-value-from-a-function-with-return",id:"56533eb9ac21ba0edf2244c0"},slug:"/javascript-algorithms-and-data-structures/basic-javascript/global-vs--local-scope-in-functions"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-basic-javascript-global-vs-local-scope-in-functions-0cb3f13e2e2a6d55f554.js.map