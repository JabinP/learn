{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-javascript-nesting-for-loops-8bc3b67672ef624a564c.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-nesting-for-loops.json"],"names":["webpackJsonp","3825","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,oBAAAC,aAAA,iTAA6U,6NAAAC,cAAA,EAAAC,QAAwQC,KAAA,gFAAAC,UAAA,mBAAAC,QAAgIC,KAAA,6DAAAC,WAAA,4GAA6LD,KAAA,wEAAAC,WAAA,kIAA8ND,KAAA,6EAAAC,WAAA,6IAA6OC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,mLAAoOC,KAAA,GAAAC,KAAA,IAAwBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,uGAAAC,GAAA,4BAAwMrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-javascript-nesting-for-loops-8bc3b67672ef624a564c.js","sourcesContent":["webpackJsonp([15772020208822],{\n\n/***/ 3825:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Nesting For Loops\",\"description\":[\"如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。下面是一个例子：\",\"<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote>\",\"一次输出<code>arr</code>中的每个子元素。提示，对于内部循环，我们可以通过<code>arr[i]</code>的<code>.length</code>来获得子数组的长度，因为<code>arr[i]</code>的本身就是一个数组。\",\"<hr>\",\"修改函数<code>multiplyAll</code>，获得<code>arr</code>内部数组的每个数字相乘的结果<code>product</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"<code>multiplyAll([[1],[2],[3]])</code>应该返回 <code>6</code>\",\"testString\":\"assert(multiplyAll([[1],[2],[3]]) === 6, '<code>multiplyAll([[1],[2],[3]])</code>应该返回 <code>6</code>');\"},{\"text\":\"<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code>应该返回 <code>5040</code>\",\"testString\":\"assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, '<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code>应该返回 <code>5040</code>');\"},{\"text\":\"<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code>应该返回 <code>54</code>\",\"testString\":\"assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, '<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code>应该返回 <code>54</code>');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function multiplyAll(arr) {\\n  var product = 1;\\n  // 请把你的代码写在这条注释以下\\n  \\n  // 请把你的代码写在这条注释以上\\n  return product;\\n}\\n\\n// 你可以修改这一行来测试你的代码\\nmultiplyAll([[1,2],[3,4],[5,6,7]]);\\n\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-do---while-loops\",\"id\":\"56533eb9ac21ba0edf2244e1\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-javascript-nesting-for-loops-8bc3b67672ef624a564c.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Nesting For Loops\",\"description\":[\"如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。下面是一个例子：\",\"<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote>\",\"一次输出<code>arr</code>中的每个子元素。提示，对于内部循环，我们可以通过<code>arr[i]</code>的<code>.length</code>来获得子数组的长度，因为<code>arr[i]</code>的本身就是一个数组。\",\"<hr>\",\"修改函数<code>multiplyAll</code>，获得<code>arr</code>内部数组的每个数字相乘的结果<code>product</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"<code>multiplyAll([[1],[2],[3]])</code>应该返回 <code>6</code>\",\"testString\":\"assert(multiplyAll([[1],[2],[3]]) === 6, '<code>multiplyAll([[1],[2],[3]])</code>应该返回 <code>6</code>');\"},{\"text\":\"<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code>应该返回 <code>5040</code>\",\"testString\":\"assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, '<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code>应该返回 <code>5040</code>');\"},{\"text\":\"<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code>应该返回 <code>54</code>\",\"testString\":\"assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, '<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code>应该返回 <code>54</code>');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function multiplyAll(arr) {\\n  var product = 1;\\n  // 请把你的代码写在这条注释以下\\n  \\n  // 请把你的代码写在这条注释以上\\n  return product;\\n}\\n\\n// 你可以修改这一行来测试你的代码\\nmultiplyAll([[1,2],[3,4],[5,6,7]]);\\n\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-do---while-loops\",\"id\":\"56533eb9ac21ba0edf2244e1\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-nesting-for-loops.json\n// module id = 3825\n// module chunks = 15772020208822"],"sourceRoot":""}