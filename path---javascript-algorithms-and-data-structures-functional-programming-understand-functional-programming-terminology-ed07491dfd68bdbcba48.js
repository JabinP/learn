webpackJsonp([65400597159986],{3917:function(e,a){e.exports={data:{challengeNode:{title:"Understand Functional Programming Terminology",description:["FCC 团队需求有变更，现在想要两种茶：绿茶（green tea）和红茶（black tea）。事实证明，用户需求变更是很常见的。","基于以上信息，我们需要重构上一节挑战中的<code>getTea</code>函数来处理多种茶的请求。我们可以修改<code>getTea</code>接受一个函数作为参数，使它能够修改茶的类型。这让<code>getTea</code>更灵活，也使需求变更时为程序员提供更多控制权。","首先，我们将介绍一些术语：","<code>Callbacks</code>是被传递到另一个函数中调用的函数。你应该已经在其他函数中看过这个写法，例如在<code>filter</code>中，回调函数告诉 JavaScript 以什么规则过滤数组。","函数就像其他正常值一样，可以赋值给变量、传递给另一个函数，或从其它函数返回，这种函数叫做<code>first class</code>函数。在 JavaScript 中，所有函数都是<code>first class</code>函数。","将函数为参数或返回值的函数叫做<code>higher order</code>函数。","当函数传递给另一个函数或从另一个函数返回时，那些传入或返回的函数可以叫做<code>lambda</code>。","<hr>","准备 27 杯绿茶和 13 杯红茶，分别存入<code>tea4GreenTeamFCC</code>和<code>tea4BlackTeamFCC</code>变量。请注意，<code>getTea</code>函数已经变了，现在它接收一个函数作为第一个参数。","注意：数据（茶的数量）作为最后一个参数。我们将在后面的课程中对此进行更多讨论。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology",blockName:"Functional Programming",tests:[{text:"<code>tea4GreenTeamFCC</code>变量应存有为团队准备的 27 杯茶。",testString:"assert(tea4GreenTeamFCC.length === 27, '<code>tea4GreenTeamFCC</code>变量应存有为团队准备的 27 杯茶。');"},{text:"<code>tea4GreenTeamFCC</code>变量应存有绿茶。",testString:"assert(tea4GreenTeamFCC[0] === 'greenTea', '<code>tea4GreenTeamFCC</code>变量应存有绿茶。');"},{text:"<code>tea4BlackTeamFCC</code>变量应存有 13 杯红茶。",testString:"assert(tea4BlackTeamFCC.length === 13, '<code>tea4BlackTeamFCC</code>变量应存有 13 杯红茶。');"},{text:"<code>tea4BlackTeamFCC</code>变量应存有红茶。",testString:"assert(tea4BlackTeamFCC[0] === 'blackTea', '<code>tea4BlackTeamFCC</code>变量应存有红茶。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"/**\n * 绿茶准备过程\n * @return {string} 一杯绿茶\n **/\nconst prepareGreenTea = () => 'greenTea';\n\n/**\n * 备红茶准备过程\n * @return {string} 一杯红茶\n **/\nconst prepareBlackTea = () => 'blackTea';\n\n/**\n * 获得一定数量的茶\n * @param {function():string} prepareTea 茶的类型\n * @param {number} numOfCups 需要茶的数量\n * @return {Array<string>} 给定的茶\n **/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\n// 请在本行以下添加你的代码\n\nconst tea4GreenTeamFCC = null; // :(\nconst tea4BlackTeamFCC = null; // :(\n\n// 请在本行以上添加你的代码\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/functional-programming/understand-the-hazards-of-using-imperative-code",id:"587d7b8e367417b2b2512b5c"},slug:"/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-functional-programming-understand-functional-programming-terminology-ed07491dfd68bdbcba48.js.map