{"version":3,"sources":["webpack:///path---responsive-web-design-applied-visual-design-use-a-bezier-curve-to-move-a-graphic-101601dcdcdc305a1bc6.js","webpack:///./.cache/json/responsive-web-design-applied-visual-design-use-a-bezier-curve-to-move-a-graphic.json"],"names":["webpackJsonp","4077","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","key","ext","name","contents","head","tail","indexjs","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,uCAAAC,aAAA,+XAAob,8dAAAC,cAAA,EAAAC,QAAmgBC,KAAA,oFAAAC,UAAA,wBAAAC,QAAyIC,KAAA,kIAAAC,WAAA,4NAAkXD,KAAA,gFAAAC,WAAA,sJAA0PD,KAAA,2EAAAC,WAAA,oJAAkPC,YAAAC,OAAwBC,WAAaC,IAAA,YAAAC,IAAA,OAAAC,KAAA,QAAAC,SAAA,gmBAAkkBC,KAAA,GAAAC,KAAA,IAAmHC,QAAA,KAAAC,SAAA,QAAkCC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,6FAAAC,GAAA,4BAA8LrB,KAAA","file":"path---responsive-web-design-applied-visual-design-use-a-bezier-curve-to-move-a-graphic-101601dcdcdc305a1bc6.js","sourcesContent":["webpackJsonp([99692627152060],{\n\n/***/ 4077:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use a Bezier Curve to Move a Graphic\",\"description\":[\"前面的关卡涉及的<code>ease-out</code>预定义值描述了动画以高速开始低速结束。右边的动画展示了<code>ease-out</code>预定义值（蓝色的元素）和<code>linear</code>预定义值（红色的元素）的区别。同样的，<code>ease-out</code>预定义值也可以用贝塞尔曲线函数实现。\",\"通俗的讲，将一条直线放在范围只有 1 的坐标轴中，并从中间拿<code>p1</code>和<code>p2</code>两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。下面是贝塞尔曲线模仿 ease-out 预定义值的例子：\",\"<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>\",\"记住所有的<code>cubic-bezier</code>函数都是从坐标为 (0, 0) 的<code>p0</code>开始，在坐标为 (1, 1) 的<code>p3</code>结束。在这个例子里，曲线在 y 轴（从 0 开始，运动到<code>p1</code>的 0，然后运动到<code>p2</code>的 1）上移动的比在 x 轴（从 0 开始，运动到<code>p1</code>的 0，到<code>p2</code>的 0.58）上移动的快。结果是，在这一段动画内元素运动的快。到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为1，没有变化，x 值从 0.58 变为 1，元素运动的慢。\",\"<hr>\",\"为了看贝塞尔曲线的运动效果，把 id 为<code>red</code>的元素的<code>animation-timing-function</code>属性赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。这会使两个元素运动过程类似。\"],\"challengeType\":0,\"fields\":{\"slug\":\"/responsive-web-design/applied-visual-design/use-a-bezier-curve-to-move-a-graphic\",\"blockName\":\"Applied Visual Design\",\"tests\":[{\"text\":\"id 为<code>red</code>的元素的<code>animation-timing-function</code>属性应当赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。\",\"testString\":\"assert($('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)', 'id 为<code>red</code>的元素的<code>animation-timing-function</code>属性应当赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。');\"},{\"text\":\"id 为<code>red</code>的元素的<code>animation-timing-function</code>属性不应该取值 linear。\",\"testString\":\"assert($('#red').css('animation-timing-function') !== 'linear', 'id 为<code>red</code>的元素的<code>animation-timing-function</code>属性不应该取值 linear。');\"},{\"text\":\"id 为<code>blue</code>的元素的<code>animation-timing-function</code>属性不应该被改变。\",\"testString\":\"assert($('#blue').css('animation-timing-function') == 'ease-out', 'id 为<code>blue</code>的元素的<code>animation-timing-function</code>属性不应该被改变。');\"}]},\"required\":[],\"files\":{\"indexhtml\":{\"key\":\"indexhtml\",\"ext\":\"html\",\"name\":\"index\",\"contents\":\"<style>\\n  .balls{\\n    border-radius: 50%;\\n    position: fixed;\\n    width: 50px;\\n    height: 50px;\\n    margin-top: 50px;\\n    animation-name: bounce;\\n    animation-duration: 2s;\\n    animation-iteration-count: infinite;\\n  }\\n  #red {\\n    background: red;\\n    left: 27%;\\n    animation-timing-function: linear;\\n  }\\n  #blue {\\n    background: blue;\\n    left: 56%;\\n    animation-timing-function: ease-out;\\n  }\\n  @keyframes bounce {\\n    0% {\\n      top: 0px;\\n    }\\n    100% {\\n      top: 249px;\\n    }\\n  }\\n</style>\\n<div class=\\\"balls\\\" id= \\\"red\\\"></div>\\n<div class=\\\"balls\\\" id= \\\"blue\\\"></div>\",\"head\":\"\",\"tail\":\"\"},\"indexjs\":null,\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/responsive-web-design/applied-visual-design/make-motion-more-natural-using-a-bezier-curve\",\"id\":\"587d78a9367417b2b2512ae9\"},\"slug\":\"/responsive-web-design/applied-visual-design/use-a-bezier-curve-to-move-a-graphic\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---responsive-web-design-applied-visual-design-use-a-bezier-curve-to-move-a-graphic-101601dcdcdc305a1bc6.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use a Bezier Curve to Move a Graphic\",\"description\":[\"前面的关卡涉及的<code>ease-out</code>预定义值描述了动画以高速开始低速结束。右边的动画展示了<code>ease-out</code>预定义值（蓝色的元素）和<code>linear</code>预定义值（红色的元素）的区别。同样的，<code>ease-out</code>预定义值也可以用贝塞尔曲线函数实现。\",\"通俗的讲，将一条直线放在范围只有 1 的坐标轴中，并从中间拿<code>p1</code>和<code>p2</code>两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。下面是贝塞尔曲线模仿 ease-out 预定义值的例子：\",\"<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>\",\"记住所有的<code>cubic-bezier</code>函数都是从坐标为 (0, 0) 的<code>p0</code>开始，在坐标为 (1, 1) 的<code>p3</code>结束。在这个例子里，曲线在 y 轴（从 0 开始，运动到<code>p1</code>的 0，然后运动到<code>p2</code>的 1）上移动的比在 x 轴（从 0 开始，运动到<code>p1</code>的 0，到<code>p2</code>的 0.58）上移动的快。结果是，在这一段动画内元素运动的快。到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为1，没有变化，x 值从 0.58 变为 1，元素运动的慢。\",\"<hr>\",\"为了看贝塞尔曲线的运动效果，把 id 为<code>red</code>的元素的<code>animation-timing-function</code>属性赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。这会使两个元素运动过程类似。\"],\"challengeType\":0,\"fields\":{\"slug\":\"/responsive-web-design/applied-visual-design/use-a-bezier-curve-to-move-a-graphic\",\"blockName\":\"Applied Visual Design\",\"tests\":[{\"text\":\"id 为<code>red</code>的元素的<code>animation-timing-function</code>属性应当赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。\",\"testString\":\"assert($('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)', 'id 为<code>red</code>的元素的<code>animation-timing-function</code>属性应当赋为<code>cubic-bezier</code>函数，其中 x1，y1，x2，y2 值分别为 0，0，0.58，1。');\"},{\"text\":\"id 为<code>red</code>的元素的<code>animation-timing-function</code>属性不应该取值 linear。\",\"testString\":\"assert($('#red').css('animation-timing-function') !== 'linear', 'id 为<code>red</code>的元素的<code>animation-timing-function</code>属性不应该取值 linear。');\"},{\"text\":\"id 为<code>blue</code>的元素的<code>animation-timing-function</code>属性不应该被改变。\",\"testString\":\"assert($('#blue').css('animation-timing-function') == 'ease-out', 'id 为<code>blue</code>的元素的<code>animation-timing-function</code>属性不应该被改变。');\"}]},\"required\":[],\"files\":{\"indexhtml\":{\"key\":\"indexhtml\",\"ext\":\"html\",\"name\":\"index\",\"contents\":\"<style>\\n  .balls{\\n    border-radius: 50%;\\n    position: fixed;\\n    width: 50px;\\n    height: 50px;\\n    margin-top: 50px;\\n    animation-name: bounce;\\n    animation-duration: 2s;\\n    animation-iteration-count: infinite;\\n  }\\n  #red {\\n    background: red;\\n    left: 27%;\\n    animation-timing-function: linear;\\n  }\\n  #blue {\\n    background: blue;\\n    left: 56%;\\n    animation-timing-function: ease-out;\\n  }\\n  @keyframes bounce {\\n    0% {\\n      top: 0px;\\n    }\\n    100% {\\n      top: 249px;\\n    }\\n  }\\n</style>\\n<div class=\\\"balls\\\" id= \\\"red\\\"></div>\\n<div class=\\\"balls\\\" id= \\\"blue\\\"></div>\",\"head\":\"\",\"tail\":\"\"},\"indexjs\":null,\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/responsive-web-design/applied-visual-design/make-motion-more-natural-using-a-bezier-curve\",\"id\":\"587d78a9367417b2b2512ae9\"},\"slug\":\"/responsive-web-design/applied-visual-design/use-a-bezier-curve-to-move-a-graphic\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/responsive-web-design-applied-visual-design-use-a-bezier-curve-to-move-a-graphic.json\n// module id = 4077\n// module chunks = 99692627152060"],"sourceRoot":""}