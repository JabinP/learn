webpackJsonp([0x947fc81a91b3],{3964:function(e,o){e.exports={data:{challengeNode:{title:"Reset an Inherited Constructor Property",description:["当一个对象从另一个对象那里继承了其<code>原型</code>，那它也继承了<code>父类</code>的 constructor 属性。","请看下面的举例：","<blockquote>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>let duck = new Bird();<br>duck.constructor // function Animal(){...}</blockquote>","但是<code>duck</code>和其他所有<code>Bird</code>的实例都应该表明它们是由<code>Bird</code>创建的，而不是由<code>Animal</code>创建的。为此，你可以手动把<code>Bird</code>的 constructor 属性设置为<code>Bird</code>对象：","<blockquote>Bird.prototype.constructor = Bird;<br>duck.constructor // function Bird(){...}</blockquote>","<hr>","修改你的代码，使得<code>duck.constructor</code>和<code>beagle.constructor</code>返回各自的构造函数。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property",blockName:"Object Oriented Programming",tests:[{text:"<code>Bird.prototype</code>应该是<code>Animal</code>的一个实例。",testString:"assert(Animal.prototype.isPrototypeOf(Bird.prototype), '<code>Bird.prototype</code>应该是<code>Animal</code>的一个实例。');"},{text:"<code>duck.constructor</code>应该返回<code>Bird</code>。",testString:"assert(duck.constructor === Bird, '<code>duck.constructor</code>应该返回<code>Bird</code>。');"},{text:"<code>Dog.prototype</code>应该是<code>Animal</code>的一个实例。",testString:"assert(Animal.prototype.isPrototypeOf(Dog.prototype), '<code>Dog.prototype</code>应该是<code>Animal</code>的一个实例。');"},{text:"<code>beagle.constructor</code>应该返回<code>Dog</code>。",testString:"assert(beagle.constructor === Dog, '<code>beagle.constructor</code>应该返回<code>Dog</code>。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\n\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\n// 请把你的代码写在这条注释以下\n\n\n\nlet duck = new Bird();\nlet beagle = new Dog();",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance",id:"587d7db1367417b2b2512b86"},slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-object-oriented-programming-reset-an-inherited-constructor-property-91e5f3aa4c90a64c5146.js.map