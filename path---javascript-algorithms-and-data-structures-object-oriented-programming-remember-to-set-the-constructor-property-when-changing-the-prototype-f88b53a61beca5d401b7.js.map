{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-object-oriented-programming-remember-to-set-the-constructor-property-when-changing-the-prototype-f88b53a61beca5d401b7.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-object-oriented-programming-remember-to-set-the-constructor-property-when-changing-the-prototype.json"],"names":["webpackJsonp","3963","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,uEAAAC,aAAA,opBAAuuB,iEAAAC,cAAA,EAAAC,QAA4GC,KAAA,8IAAAC,UAAA,8BAAAC,QAAyMC,KAAA,8DAAAC,WAAA,+GAAgMC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,0PAAiTC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,0HAAAC,GAAA,4BAA2NrB,KAAA","file":"path---javascript-algorithms-and-data-structures-object-oriented-programming-remember-to-set-the-constructor-property-when-changing-the-prototype-f88b53a61beca5d401b7.js","sourcesContent":["webpackJsonp([109984731080103],{\n\n/***/ 3963:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Remember to Set the Constructor Property when Changing the Prototype\",\"description\":[\"手动给新对象重新设置<code>原型</code>对象，会产生一个重要的副作用：删除了<code>constructor</code>属性！我们来看一下，上一个挑战中<code>duck</code>的<code>constructor</code>属性输出到控制台的结果：\",\"<blockquote>console.log(duck.constructor)<br>// 哎呀，控制台中输出了 undefined！</blockquote>\",\"为了解决这个问题，凡是手动给新对象重新设置过原型对象的，都别忘记在原型对象中定义一个<code>constructor</code>属性：\",\"<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird, // 定义 constructor 属性<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"nom nom nom\\\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name); <br>&nbsp;&nbsp;}<br>};</blockquote>\",\"<hr>\",\"给<code>Dog 的原型</code>对象定义一个<code>constructor</code>属性。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype\",\"blockName\":\"Object Oriented Programming\",\"tests\":[{\"text\":\"<code>Dog.prototype</code>应该定义一个<code>constructor</code>属性。\",\"testString\":\"assert(Dog.prototype.constructor === Dog, '<code>Dog.prototype</code>应该定义一个<code>constructor</code>属性。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Dog(name) {\\n  this.name = name; \\n}\\n\\n// 请只修改这条注释以下的代码\\nDog.prototype = {\\n  \\n  numLegs: 2, \\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\"); \\n  }, \\n  describe: function() {\\n    console.log(\\\"My name is \\\" + this.name); \\n  }\\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from\",\"id\":\"587d7daf367417b2b2512b80\"},\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-object-oriented-programming-remember-to-set-the-constructor-property-when-changing-the-prototype-f88b53a61beca5d401b7.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Remember to Set the Constructor Property when Changing the Prototype\",\"description\":[\"手动给新对象重新设置<code>原型</code>对象，会产生一个重要的副作用：删除了<code>constructor</code>属性！我们来看一下，上一个挑战中<code>duck</code>的<code>constructor</code>属性输出到控制台的结果：\",\"<blockquote>console.log(duck.constructor)<br>// 哎呀，控制台中输出了 undefined！</blockquote>\",\"为了解决这个问题，凡是手动给新对象重新设置过原型对象的，都别忘记在原型对象中定义一个<code>constructor</code>属性：\",\"<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird, // 定义 constructor 属性<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"nom nom nom\\\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name); <br>&nbsp;&nbsp;}<br>};</blockquote>\",\"<hr>\",\"给<code>Dog 的原型</code>对象定义一个<code>constructor</code>属性。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype\",\"blockName\":\"Object Oriented Programming\",\"tests\":[{\"text\":\"<code>Dog.prototype</code>应该定义一个<code>constructor</code>属性。\",\"testString\":\"assert(Dog.prototype.constructor === Dog, '<code>Dog.prototype</code>应该定义一个<code>constructor</code>属性。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Dog(name) {\\n  this.name = name; \\n}\\n\\n// 请只修改这条注释以下的代码\\nDog.prototype = {\\n  \\n  numLegs: 2, \\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\"); \\n  }, \\n  describe: function() {\\n    console.log(\\\"My name is \\\" + this.name); \\n  }\\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from\",\"id\":\"587d7daf367417b2b2512b80\"},\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-object-oriented-programming-remember-to-set-the-constructor-property-when-changing-the-prototype.json\n// module id = 3963\n// module chunks = 109984731080103"],"sourceRoot":""}