webpackJsonp([40127033127790],{3950:function(e,o){e.exports={data:{challengeNode:{title:"Roman Numeral Converter",description:["把传入的数字转变为罗马数字。",'转换后的<a href="http://www.mathsisfun.com/roman-numerals.html" target="_blank">罗马数字</a>字母必须都是大写。',"如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。"],challengeType:5,fields:{slug:"/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter",blockName:"JavaScript Algorithms and Data Structures Projects",tests:[{text:'<code>convertToRoman(2)</code>应该返回 "II"。',testString:'assert.deepEqual(convertToRoman(2), "II", \'<code>convertToRoman(2)</code>应该返回 "II"。\');'},{text:'<code>convertToRoman(3)</code>应该返回 "III"。',testString:'assert.deepEqual(convertToRoman(3), "III", \'<code>convertToRoman(3)</code>应该返回 "III"。\');'},{text:'<code>convertToRoman(4)</code>应该返回 "IV"。',testString:'assert.deepEqual(convertToRoman(4), "IV", \'<code>convertToRoman(4)</code>应该返回 "IV"。\');'},{text:'<code>convertToRoman(5)</code>应该返回 "V"。',testString:'assert.deepEqual(convertToRoman(5), "V", \'<code>convertToRoman(5)</code>应该返回 "V"。\');'},{text:'<code>convertToRoman(9)</code>应该返回 "IX"。',testString:'assert.deepEqual(convertToRoman(9), "IX", \'<code>convertToRoman(9)</code>应该返回 "IX"。\');'},{text:'<code>convertToRoman(12)</code>应该返回 "XII"。',testString:'assert.deepEqual(convertToRoman(12), "XII", \'<code>convertToRoman(12)</code>应该返回 "XII"。\');'},{text:'<code>convertToRoman(16)</code>应该返回 "XVI"。',testString:'assert.deepEqual(convertToRoman(16), "XVI", \'<code>convertToRoman(16)</code>应该返回 "XVI"。\');'},{text:'<code>convertToRoman(29)</code>应该返回 "XXIX"。',testString:'assert.deepEqual(convertToRoman(29), "XXIX", \'<code>convertToRoman(29)</code>应该返回 "XXIX"。\');'},{text:'<code>convertToRoman(44)</code>应该返回 "XLIV"。',testString:'assert.deepEqual(convertToRoman(44), "XLIV", \'<code>convertToRoman(44)</code>应该返回 "XLIV"。\');'},{text:'<code>convertToRoman(45)</code>应该返回 "XLV"。',testString:'assert.deepEqual(convertToRoman(45), "XLV", \'<code>convertToRoman(45)</code>应该返回 "XLV"。\');'},{text:'<code>convertToRoman(68)</code>应该返回 "LXVIII"。',testString:'assert.deepEqual(convertToRoman(68), "LXVIII", \'<code>convertToRoman(68)</code>应该返回 "LXVIII"。\');'},{text:'<code>convertToRoman(83)</code>应该返回 "LXXXIII"。',testString:'assert.deepEqual(convertToRoman(83), "LXXXIII", \'<code>convertToRoman(83)</code>应该返回 "LXXXIII"。\');'},{text:'<code>convertToRoman(97)</code>应该返回 "XCVII"。',testString:'assert.deepEqual(convertToRoman(97), "XCVII", \'<code>convertToRoman(97)</code>应该返回 "XCVII"。\');'},{text:'<code>convertToRoman(99)</code>应该返回 "XCIX"。',testString:'assert.deepEqual(convertToRoman(99), "XCIX", \'<code>convertToRoman(99)</code>应该返回 "XCIX"。\');'},{text:'<code>convertToRoman(400)</code>应该返回 "CD"。',testString:'assert.deepEqual(convertToRoman(400), "CD", \'<code>convertToRoman(400)</code>应该返回 "CD"。\');'},{text:'<code>convertToRoman(500)</code>应该返回 "D"。',testString:'assert.deepEqual(convertToRoman(500), "D", \'<code>convertToRoman(500)</code>应该返回 "D"。\');'},{text:'<code>convertToRoman(501)</code>应该返回 "DI"。',testString:'assert.deepEqual(convertToRoman(501), "DI", \'<code>convertToRoman(501)</code>应该返回 "DI"。\');'},{text:'<code>convertToRoman(649)</code>应该返回 "DCXLIX"。',testString:'assert.deepEqual(convertToRoman(649), "DCXLIX", \'<code>convertToRoman(649)</code>应该返回 "DCXLIX"。\');'},{text:'<code>convertToRoman(798)</code>应该返回 "DCCXCVIII"。',testString:'assert.deepEqual(convertToRoman(798), "DCCXCVIII", \'<code>convertToRoman(798)</code>应该返回 "DCCXCVIII"。\');'},{text:'<code>convertToRoman(891)</code>应该返回 "DCCCXCI"。',testString:'assert.deepEqual(convertToRoman(891), "DCCCXCI", \'<code>convertToRoman(891)</code>应该返回 "DCCCXCI"。\');'},{text:'<code>convertToRoman(1000)</code>应该返回 "M"。',testString:'assert.deepEqual(convertToRoman(1000), "M", \'<code>convertToRoman(1000)</code>应该返回 "M"。\');'},{text:'<code>convertToRoman(1004)</code>应该返回 "MIV"。',testString:'assert.deepEqual(convertToRoman(1004), "MIV", \'<code>convertToRoman(1004)</code>应该返回 "MIV"。\');'},{text:'<code>convertToRoman(1006)</code>应该返回 "MVI"。',testString:'assert.deepEqual(convertToRoman(1006), "MVI", \'<code>convertToRoman(1006)</code>应该返回 "MVI"。\');'},{text:'<code>convertToRoman(1023)</code>应该返回 "MXXIII"。',testString:'assert.deepEqual(convertToRoman(1023), "MXXIII", \'<code>convertToRoman(1023)</code>应该返回 "MXXIII"。\');'},{text:'<code>convertToRoman(2014)</code>应该返回 "MMXIV"。',testString:'assert.deepEqual(convertToRoman(2014), "MMXIV", \'<code>convertToRoman(2014)</code>应该返回 "MMXIV"。\');'},{text:'<code>convertToRoman(3999)</code>应该返回 "MMMCMXCIX"。',testString:'assert.deepEqual(convertToRoman(3999), "MMMCMXCIX", \'<code>convertToRoman(3999)</code>应该返回 "MMMCMXCIX"。\');'}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/caesars-cipher",id:"a7f4d8f2483413a6ce226cac"},slug:"/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-javascript-algorithms-and-data-structures-projects-roman-numeral-converter-a7b3e0cbc81c8163a861.js.map