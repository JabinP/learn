{"version":3,"sources":["webpack:///path---front-end-libraries-react-override-default-props-180d282775ca97398323.js","webpack:///./.cache/json/front-end-libraries-react-override-default-props.json"],"names":["webpackJsonp","3587","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,yBAAAC,aAAA,2aAA6aC,cAAA,EAAAC,QAA0EC,KAAA,oDAAAC,UAAA,QAAAC,QAAyFC,KAAA,mCAAAC,WAAA,uMAA8PD,KAAA,4BAAAC,WAAA,yLAAyOD,KAAA,yGAAuDC,WAAA,6WAAkbC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,sXAA2aC,KAAA,GAAAC,KAAA,yEAA2FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,0EAAAC,GAAA,4BAAgIxB,KAAA","file":"path---front-end-libraries-react-override-default-props-180d282775ca97398323.js","sourcesContent":["webpackJsonp([12141081506547],{\n\n/***/ 3587:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Override Default Props\",\"description\":[\"在 React 中，设置默认的 props 是一个很有用的特性，显式设置组件的 prop 值即可覆盖默认 props。\",\"<hr>\",\"<code>ShoppingCart</code>组件现在渲染了一个子组件<code>Items</code>。该<code>Items</code>组件有一个默认<code>quantity</code>prop，其值被设置为整数<code>0</code>。通过传入数值<code>10</code>来覆盖<code>quantity</code>的默认 prop。\",\"<strong>注意：</strong>&nbsp;请记住，向组件添加 prop 的语法与添加 HTML 属性类似。但是，由于<code>quantity</code>的值是整数，所以它不会加引号，但应该用花括号括起来，例如<code>{100}</code>。这个语法告诉 JSX 直接将花括号中的值解释为 JavaScript。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/override-default-props\",\"blockName\":\"React\",\"tests\":[{\"text\":\"应该渲染<code>ShoppingCart</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })(), '应该渲染<code>ShoppingCart</code>组件。');\"},{\"text\":\"应该渲染<code>Items</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').length === 1; })(), '应该渲染<code>Items</code>组件。');\"},{\"text\":\"<code>Items</code>组件应该有一个<code>{ quantity: 10 }</code>的prop，该 prop 是从<code>ShoppingCart</code>组件传递过去的。\",\"testString\":\"getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').props().quantity == 10 && getUserInput('index').replace(/ /g,'').includes('<Itemsquantity={10}/>'); })(), '<code>Items</code>组件应该有一个<code>{ quantity: 10 }</code>的prop，该 prop 是从<code>ShoppingCart</code>组件传递过去的。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"const Items = (props) => {\\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\\n}\\n\\nItems.defaultProps = {\\n  quantity: 0\\n}\\n\\nclass ShoppingCart extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  render() {\\n    { /* change code below this line */ }\\n    return <Items />\\n    { /* change code above this line */ }\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<ShoppingCart />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/use-proptypes-to-define-the-props-you-expect\",\"id\":\"5a24c314108439a4d403616c\"},\"slug\":\"/front-end-libraries/react/override-default-props\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-override-default-props-180d282775ca97398323.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Override Default Props\",\"description\":[\"在 React 中，设置默认的 props 是一个很有用的特性，显式设置组件的 prop 值即可覆盖默认 props。\",\"<hr>\",\"<code>ShoppingCart</code>组件现在渲染了一个子组件<code>Items</code>。该<code>Items</code>组件有一个默认<code>quantity</code>prop，其值被设置为整数<code>0</code>。通过传入数值<code>10</code>来覆盖<code>quantity</code>的默认 prop。\",\"<strong>注意：</strong>&nbsp;请记住，向组件添加 prop 的语法与添加 HTML 属性类似。但是，由于<code>quantity</code>的值是整数，所以它不会加引号，但应该用花括号括起来，例如<code>{100}</code>。这个语法告诉 JSX 直接将花括号中的值解释为 JavaScript。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/override-default-props\",\"blockName\":\"React\",\"tests\":[{\"text\":\"应该渲染<code>ShoppingCart</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('ShoppingCart').length === 1; })(), '应该渲染<code>ShoppingCart</code>组件。');\"},{\"text\":\"应该渲染<code>Items</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').length === 1; })(), '应该渲染<code>Items</code>组件。');\"},{\"text\":\"<code>Items</code>组件应该有一个<code>{ quantity: 10 }</code>的prop，该 prop 是从<code>ShoppingCart</code>组件传递过去的。\",\"testString\":\"getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart)); return mockedComponent.find('Items').props().quantity == 10 && getUserInput('index').replace(/ /g,'').includes('<Itemsquantity={10}/>'); })(), '<code>Items</code>组件应该有一个<code>{ quantity: 10 }</code>的prop，该 prop 是从<code>ShoppingCart</code>组件传递过去的。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"const Items = (props) => {\\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\\n}\\n\\nItems.defaultProps = {\\n  quantity: 0\\n}\\n\\nclass ShoppingCart extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  render() {\\n    { /* change code below this line */ }\\n    return <Items />\\n    { /* change code above this line */ }\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<ShoppingCart />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/use-proptypes-to-define-the-props-you-expect\",\"id\":\"5a24c314108439a4d403616c\"},\"slug\":\"/front-end-libraries/react/override-default-props\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-override-default-props.json\n// module id = 3587\n// module chunks = 12141081506547"],"sourceRoot":""}