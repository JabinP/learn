webpackJsonp([0x6c53ab82c011],{2827:function(e,t){e.exports={data:{challengeNode:{title:"Create a Stack Class",description:["在上一节，我们讨论了什么是栈以及如何用数组来表示栈。在本节，我们将构造自己的栈。","虽然我们可以使用数组来表示栈，但如果我们可以更完备地定义栈拥有的方法，就可以在开发中更好地使用它。","除了<code>push</code>和<code>pop</code>两个方法，栈还应有一些其他方法。现在我们来给栈添加<code>peek</code>、<code>isEmpty</code>以及<code>clear</code>方法。","挑战说明：","请编写能够将元素压入栈顶的<code>push</code>方法、移除栈顶元素的<code>pop</code>方法、查看栈中第一个元素的<code>peek</code>方法、判断栈是否为空的<code>isEmpty</code>方法、以及清空栈内所有元素的<code>clear</code>方法。","顺便，我们在右侧代码区为栈添加了一个<code>print</code>方法，该方法会打印出集合。不过一般来说，栈是没有这个方法的。"],challengeType:1,fields:{slug:"/coding-interview-prep/data-structures/create-a-stack-class",blockName:"Data Structures",tests:[{text:"<code>Stack</code>应该有<code>push</code>方法。",testString:"assert((function(){var test = new Stack(); return (typeof test.push === 'function')}()), '<code>Stack</code>应该有<code>push</code>方法。');"},{text:"<code>Stack</code>应该有<code>pop</code>方法。",testString:"assert((function(){var test = new Stack(); return (typeof test.pop === 'function')}()), '<code>Stack</code>应该有<code>pop</code>方法。');"},{text:"<code>Stack</code>应该有<code>peek</code>方法。",testString:"assert((function(){var test = new Stack(); return (typeof test.peek === 'function')}()), '<code>Stack</code>应该有<code>peek</code>方法。');"},{text:"<code>Stack</code>应该有<code>isEmpty</code>方法。",testString:"assert((function(){var test = new Stack(); return (typeof test.isEmpty === 'function')}()), '<code>Stack</code>应该有<code>isEmpty</code>方法。');"},{text:"<code>Stack</code>应该有<code>clear</code>方法。",testString:"assert((function(){var test = new Stack(); return (typeof test.clear === 'function')}()), '<code>Stack</code>应该有<code>clear</code>方法。');"},{text:"<code>peek</code>方法应该返回栈顶元素。",testString:"assert((function(){var test = new Stack();  test.push('CS50'); return (test.peek() === 'CS50')}()), '<code>peek</code>方法应该返回栈顶元素。');"},{text:"<code>pop</code>方法应该移除栈顶元素并返回该元素。",testString:"assert((function(){var test = new Stack(); test.push('CS50'); return (test.pop() === 'CS50');}()), '<code>pop</code>方法应该移除栈顶元素并返回该元素。');"},{text:"当栈内没有元素时，<code>isEmpty</code>方法应该返回<code>true</code>。",testString:"assert((function(){var test = new Stack(); return test.isEmpty()}()), '当栈内没有元素时，<code>isEmpty</code>方法应该返回<code>true</code>。');"},{text:"<code>clear</code>应该移除栈内所有元素。",testString:"assert((function(){var test = new Stack();  test.push('CS50'); test.clear(); return (test.isEmpty())}()), '<code>clear</code>应该移除栈内所有元素。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function Stack() { \n    var collection = [];\n    this.print = function() {\n        console.log(collection);\n    };\n    // 请把你的代码写在这条注释以下\n\n    // 请把你的代码写在这条注释以上\n}",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/data-structures/create-a-queue-class",id:"587d8250367417b2b2512c5f"},slug:"/coding-interview-prep/data-structures/create-a-stack-class"}}}});
//# sourceMappingURL=path---coding-interview-prep-data-structures-create-a-stack-class-840c24e0c6a14e1dbd11.js.map