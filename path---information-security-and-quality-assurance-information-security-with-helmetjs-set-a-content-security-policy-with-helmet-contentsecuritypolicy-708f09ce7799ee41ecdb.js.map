{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-information-security-with-helmetjs-set-a-content-security-policy-with-helmet-contentsecuritypolicy-708f09ce7799ee41ecdb.js","webpack:///./.cache/json/information-security-and-quality-assurance-information-security-with-helmetjs-set-a-content-security-policy-with-helmet-contentsecuritypolicy.json"],"names":["webpackJsonp","3686","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,oEAAAC,SAAA,KAAAC,aAAA,2yBAAAC,cAAA,EAAAC,QAAk7BC,UAAA,qCAAAC,KAAA,iJAAAC,QAAmNC,KAAA,0BAAAC,WAAA,yKAAuND,KAAA,4FAAAC,WAAA,iZAAggBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,qIAAAC,GAAA,4BAAsOV,KAAA","file":"path---information-security-and-quality-assurance-information-security-with-helmetjs-set-a-content-security-policy-with-helmet-contentsecuritypolicy-708f09ce7799ee41ecdb.js","sourcesContent":["webpackJsonp([5521502480187],{\n\n/***/ 3686:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Set a Content Security Policy with helmet.contentSecurityPolicy()\",\"guideUrl\":null,\"description\":[\"温馨提醒，本项目在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>这个 Glitch 项目</a> 的基础上进行开发。你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a> 上克隆。\",\"这个挑战重点讨论一种现代浏览器中有效并且能大幅度减轻安全风险和很多种类型常见攻击的安全防护。通过配置内容安全策略你可以防治很多类型的脚本恶意注入。这会让你的应用远离 XSS 风险，攻击, 恶意 frames, 和很多很多其他攻击. CSP 通过配置资源白名单来工作. 你可以给任何一种类型的页面资源 (脚本, 样式文件, 字体, frames, 媒体文件等等等）做这个配置， 它支持很多指令, 所以网站管理员可以做细致的控制. 更多详情请参考 HTML 5 Rocks, KeyCDN，不幸的是 老的浏览器不支持 CSP。\",\"默认的指令很容易受到攻击, 所以设置 defaultSrc 指令作为降级方案很重要. Helmet 同时支持 defaultSrc 和 default-src 命名规范. 降级方案可以被应用在大部分指令上， 在这个练习中, 我们使用 helmet.contentSecurityPolicy(), 并配置 defaultSrc 指令为 [\\\"self\\\"] (允许的资源列表必须在一个数组当中), 如果想只信任你的网站域名。另外再配置 scriptSrc 指令这样你就可以限制脚本只能在你的网站域名上下载, 或者你信任的域名 'trusted-cdn.com'.\",\"提示: 在 \\\"'self'\\\" 关键词, 单引号也是关键词的一部分, 所以你应该用双引号来包起它才能正常工作.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Information Security with HelmetJS\",\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/set-a-content-security-policy-with-helmet-contentsecuritypolicy\",\"tests\":[{\"text\":\"helmet.csp() 中间件应该被正确加载\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'csp'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"你的 csp 配置不正确. defaultSrc 应该是 [\\\"'self'\\\"] 并且scriptSrc 应该是 [\\\"'self'\\\", 'trusted-cdn.com']\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { var cspHeader = Object.keys(data.headers).filter(function(k){ return k === 'content-security-policy' || k === 'x-webkit-csp' || k === 'x-content-security-policy' })[0]; assert.equal(data.headers[cspHeader], \\\"default-src 'self'; script-src 'self' trusted-cdn.com\\\"); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/configure-helmet-using-the-parent-helmet-middleware\",\"id\":\"587d8249367417b2b2512c3f\"},\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/set-a-content-security-policy-with-helmet-contentsecuritypolicy\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-information-security-with-helmetjs-set-a-content-security-policy-with-helmet-contentsecuritypolicy-708f09ce7799ee41ecdb.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Set a Content Security Policy with helmet.contentSecurityPolicy()\",\"guideUrl\":null,\"description\":[\"温馨提醒，本项目在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-infosec/'>这个 Glitch 项目</a> 的基础上进行开发。你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-infosec/'>GitHub</a> 上克隆。\",\"这个挑战重点讨论一种现代浏览器中有效并且能大幅度减轻安全风险和很多种类型常见攻击的安全防护。通过配置内容安全策略你可以防治很多类型的脚本恶意注入。这会让你的应用远离 XSS 风险，攻击, 恶意 frames, 和很多很多其他攻击. CSP 通过配置资源白名单来工作. 你可以给任何一种类型的页面资源 (脚本, 样式文件, 字体, frames, 媒体文件等等等）做这个配置， 它支持很多指令, 所以网站管理员可以做细致的控制. 更多详情请参考 HTML 5 Rocks, KeyCDN，不幸的是 老的浏览器不支持 CSP。\",\"默认的指令很容易受到攻击, 所以设置 defaultSrc 指令作为降级方案很重要. Helmet 同时支持 defaultSrc 和 default-src 命名规范. 降级方案可以被应用在大部分指令上， 在这个练习中, 我们使用 helmet.contentSecurityPolicy(), 并配置 defaultSrc 指令为 [\\\"self\\\"] (允许的资源列表必须在一个数组当中), 如果想只信任你的网站域名。另外再配置 scriptSrc 指令这样你就可以限制脚本只能在你的网站域名上下载, 或者你信任的域名 'trusted-cdn.com'.\",\"提示: 在 \\\"'self'\\\" 关键词, 单引号也是关键词的一部分, 所以你应该用双引号来包起它才能正常工作.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Information Security with HelmetJS\",\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/set-a-content-security-policy-with-helmet-contentsecuritypolicy\",\"tests\":[{\"text\":\"helmet.csp() 中间件应该被正确加载\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { assert.include(data.appStack, 'csp'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"你的 csp 配置不正确. defaultSrc 应该是 [\\\"'self'\\\"] 并且scriptSrc 应该是 [\\\"'self'\\\", 'trusted-cdn.com']\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/app-info').then(data => { var cspHeader = Object.keys(data.headers).filter(function(k){ return k === 'content-security-policy' || k === 'x-webkit-csp' || k === 'x-content-security-policy' })[0]; assert.equal(data.headers[cspHeader], \\\"default-src 'self'; script-src 'self' trusted-cdn.com\\\"); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/configure-helmet-using-the-parent-helmet-middleware\",\"id\":\"587d8249367417b2b2512c3f\"},\"slug\":\"/information-security-and-quality-assurance/information-security-with-helmetjs/set-a-content-security-policy-with-helmet-contentsecuritypolicy\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-information-security-with-helmetjs-set-a-content-security-policy-with-helmet-contentsecuritypolicy.json\n// module id = 3686\n// module chunks = 5521502480187"],"sourceRoot":""}