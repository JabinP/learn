{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-advanced-node-and-express-how-to-use-passport-strategies-a47cc2ce2272811e170d.js","webpack:///./.cache/json/information-security-and-quality-assurance-advanced-node-and-express-how-to-use-passport-strategies.json"],"names":["webpackJsonp","3654","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,iCAAAC,SAAA,KAAAC,aAAA,u3BAAu0B,kKAAoO,2IAAAC,cAAA,EAAAC,QAA6NC,UAAA,4BAAAC,KAAA,uGAAAC,QAAgKC,KAAA,wBAAAC,WAAA,yaAAqdD,KAAA,4BAAAC,WAAA,uPAAsSC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,8FAAAC,GAAA,4BAA+LV,KAAA","file":"path---information-security-and-quality-assurance-advanced-node-and-express-how-to-use-passport-strategies-a47cc2ce2272811e170d.js","sourcesContent":["webpackJsonp([136443922496306],{\n\n/***/ 3654:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"How to Use Passport Strategies\",\"guideUrl\":null,\"description\":[\"注意，本项目在<a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>这个 Glitch 项目</a>的基础上进行开发，你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a> 上克隆。\",\"在提供的 index.pug 文件里有一个登录表单。因为这个表单中存在行内 JavaScript 代码<code>if showLogin</code>，因此它是隐藏的。因为 showLogin 未定义，所以表单不会渲染。如果在该页面的<code>res.render()</code>里添加一个包含<code>showLogin: true</code>的对象，你就可以在刷新页面后看到表单。当你点击 login 时，表单会向服务器的 <em>/login</code> 发送 POST 请求，此时服务器端就可以接受 POST 请求信息并进行用户验证。\",\"在这次挑战中，你需要为 POST 请求添加路由<code>/login</code>。为了用这个路由进行验证，你需要添加一个中间件，中间件应作为参数添加到用于处理请求的回调函数<code>function(req,res)</code>之前。对于 passport 的验证中间件，应这样调用：<code>passport.authenticate('local')</code>。\",\"<em>passport.authenticate</em> 也接收选项作为参数，这些选项用于设置验证，例如<code>{ failureRedirect: '/' }</code>就很有用，请记得添加到你的代码中。如果中间件验证通过，我们就应该提供相应的后续处理。在这个挑战中，我们需要让用户重定到 <em>/profile</em>，这样<code>profile.pug</code>页面就会渲染。\",\"如果验证通过，用户对象将会储存到 <em>req.user</em> 中。\",\"这时，如果你在表单里输入了用户名和密码，路由将会重定向到主页 <em>/</em>，在服务端将会打印 'User {USERNAME} attempted to log in.'，由于现在我们还没有实现注册功能，因此所有登录尝试都会失败。\",\"完成上述要求后，你就可以在左边提交你的页面链接。如果运行出错，你可以在<a href='https://gist.github.com/JosephLivengood/8a335d1a68ed9170da02bb9d8f5b71d5'>这里</a>检查你的项目完成情况。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Advanced Node and Express\",\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/how-to-use-passport-strategies\",\"tests\":[{\"text\":\"server.js 中应正确执行所有步骤。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /showLogin:( |)true/gi, '你应该在主页的 render 函数中将变量 \\\"showLogin\\\" 设置为 true。'); assert.match(data, /failureRedirect:( |)('|\\\")\\\\/('|\\\")/gi, '你的代码应该包含重定向到 \\\"/\\\" 路由的错误处理。'); assert.match(data, /login[^]*post[^]*local/gi, '你应该有一个处理登录的路由，它可以接收 POST 请求，并通过 passport.authenticates 验证。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"到 /login 的 POST 请求应重定向到 /\",\"testString\":\"getUserInput => $.post(getUserInput('url')+ '/login') .then(data => { assert.match(data, /Looks like this page is being rendered from Pug into HTML!/gi, '由于我们还没有已注册的用户，因此现在尝试登录的请求都应重定向到主页。'); }, xhr => { throw new Error(xhr.statusText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/advanced-node-and-express/create-new-middleware\",\"id\":\"5895f70df9fc0f352b528e69\"},\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/how-to-use-passport-strategies\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-advanced-node-and-express-how-to-use-passport-strategies-a47cc2ce2272811e170d.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"How to Use Passport Strategies\",\"guideUrl\":null,\"description\":[\"注意，本项目在<a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>这个 Glitch 项目</a>的基础上进行开发，你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a> 上克隆。\",\"在提供的 index.pug 文件里有一个登录表单。因为这个表单中存在行内 JavaScript 代码<code>if showLogin</code>，因此它是隐藏的。因为 showLogin 未定义，所以表单不会渲染。如果在该页面的<code>res.render()</code>里添加一个包含<code>showLogin: true</code>的对象，你就可以在刷新页面后看到表单。当你点击 login 时，表单会向服务器的 <em>/login</code> 发送 POST 请求，此时服务器端就可以接受 POST 请求信息并进行用户验证。\",\"在这次挑战中，你需要为 POST 请求添加路由<code>/login</code>。为了用这个路由进行验证，你需要添加一个中间件，中间件应作为参数添加到用于处理请求的回调函数<code>function(req,res)</code>之前。对于 passport 的验证中间件，应这样调用：<code>passport.authenticate('local')</code>。\",\"<em>passport.authenticate</em> 也接收选项作为参数，这些选项用于设置验证，例如<code>{ failureRedirect: '/' }</code>就很有用，请记得添加到你的代码中。如果中间件验证通过，我们就应该提供相应的后续处理。在这个挑战中，我们需要让用户重定到 <em>/profile</em>，这样<code>profile.pug</code>页面就会渲染。\",\"如果验证通过，用户对象将会储存到 <em>req.user</em> 中。\",\"这时，如果你在表单里输入了用户名和密码，路由将会重定向到主页 <em>/</em>，在服务端将会打印 'User {USERNAME} attempted to log in.'，由于现在我们还没有实现注册功能，因此所有登录尝试都会失败。\",\"完成上述要求后，你就可以在左边提交你的页面链接。如果运行出错，你可以在<a href='https://gist.github.com/JosephLivengood/8a335d1a68ed9170da02bb9d8f5b71d5'>这里</a>检查你的项目完成情况。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Advanced Node and Express\",\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/how-to-use-passport-strategies\",\"tests\":[{\"text\":\"server.js 中应正确执行所有步骤。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /showLogin:( |)true/gi, '你应该在主页的 render 函数中将变量 \\\"showLogin\\\" 设置为 true。'); assert.match(data, /failureRedirect:( |)('|\\\")\\\\/('|\\\")/gi, '你的代码应该包含重定向到 \\\"/\\\" 路由的错误处理。'); assert.match(data, /login[^]*post[^]*local/gi, '你应该有一个处理登录的路由，它可以接收 POST 请求，并通过 passport.authenticates 验证。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"到 /login 的 POST 请求应重定向到 /\",\"testString\":\"getUserInput => $.post(getUserInput('url')+ '/login') .then(data => { assert.match(data, /Looks like this page is being rendered from Pug into HTML!/gi, '由于我们还没有已注册的用户，因此现在尝试登录的请求都应重定向到主页。'); }, xhr => { throw new Error(xhr.statusText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/advanced-node-and-express/create-new-middleware\",\"id\":\"5895f70df9fc0f352b528e69\"},\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/how-to-use-passport-strategies\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-advanced-node-and-express-how-to-use-passport-strategies.json\n// module id = 3654\n// module chunks = 136443922496306"],"sourceRoot":""}