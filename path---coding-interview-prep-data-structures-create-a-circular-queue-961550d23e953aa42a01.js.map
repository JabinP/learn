{"version":3,"sources":["webpack:///path---coding-interview-prep-data-structures-create-a-circular-queue-961550d23e953aa42a01.js","webpack:///./.cache/json/coding-interview-prep-data-structures-create-a-circular-queue.json"],"names":["webpackJsonp","2819","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,0BAAAC,aAAA,owCAAAC,cAAA,EAAAC,QAAi1CC,KAAA,iEAAAC,UAAA,kBAAAC,QAAgHC,KAAA,wCAAAC,WAAA,yPAAqTD,KAAA,eAAAC,WAAA,sRAAyTD,KAAA,mCAAAC,WAAA,4OAAmSD,KAAA,qCAAAC,WAAA,0RAAmVD,KAAA,0DAAAC,WAAA,uaAAofC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,mbAAseC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,4DAAAC,GAAA,4BAA6JrB,KAAA","file":"path---coding-interview-prep-data-structures-create-a-circular-queue-961550d23e953aa42a01.js","sourcesContent":["webpackJsonp([275122216095816],{\n\n/***/ 2819:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Circular Queue\",\"description\":[\"在本次挑战中我们来创建一个 Circular Queue（循环队列），与普通队列的不同之处在于循环队列的末尾是指向开头的。添加数据时，新元素还是会出现在末尾；但如果队列中的元素已经达到了尽头，则会把新元素添加到开头。这种数据结构在一些特定的场合会比较有用。比如流媒体服务，当队列满了以后新的媒体数据会从头部开始直接覆盖历史数据。\",\"下面我们用数组来举例说明循环队列的概念：\",\"<blockquote>[1, 2, 3, 4, 5]<br> ^Read @ 0<br> ^Write @ 0</blockquote>\",\"读和写两个操作都从<code>0</code>这个位置开始。现在队列添加了<code>a</code>、<code>b</code>和<code>c</code>3 个数据。新队列如下：\",\"<blockquote>[a, b, c, 4, 5]<br> ^Read @ 0<br>       ^Write @ 3</blockquote>\",\"读取数据时，我们可以选择移除或者保留数据：\",\"<blockquote>[null, null, null, 4, 5]<br>                   ^Read @ 3<br>                   ^Write @ 3</blockquote>\",\"一旦写入操作达队列末尾，就会从队列头开始继续写入数据：\",\"<blockquote>[f, null, null, d, e]<br>                ^Read @ 3<br> ^Write @ 1</blockquote>\",\"虽然这种数据结构有着固定的内存空间，但它可以用于处理占内存较大的文件。\",\"挑战说明：\",\"在本次挑战中我们来实现一个循环队列。该循环队列应该有<code>enqueue</code>和<code>dequeue</code>这两个方法，我们可以通过这两个方法从队列中读取和写入数据。这个类的构造器应该接收一个整数为参数，因为我们需要通过它来定义队列的长度。我们已经在右边的编辑器中为你写好了这个循环队列的初始版本。循环队列中存在两个指针（在这里，指针就是一个用于表示数组中元素位置的整数），分别是 read pointer（读指针）与 write pointer（写指针），它们分别用于表示数据的开始和结尾。在往循环队列中插入数据时，写指针需要向后移动一个位置，而如果写指针已经到达队列的末尾，则需要回到队列头部继续进行写入操作。类似地，在进行出队操作时，读指针也应该向后移动。写指针的位置不应越过读指针（我们的类当中不允许发生一个数据未经读取就已经被覆盖的情况发生），同时读指针也不应越过已经写入的数据。\",\"此外，<code>enqueue</code>方法应该返回成功入队的元素，否则需要返回<code>null</code>；类似地，<code>dequeue</code>方法应该返回成功出队的元素，否则需要返回<code>null</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-circular-queue\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>enqueue</code>方法应该能够将元素添加进循环队列。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); var print = test.print(); return print[0] === 17 && print[1] === 32 && print[2] === 591; })(), '<code>enqueue</code>方法应该能够将元素添加进循环队列。');\"},{\"text\":\"入队元素不能越过读指针。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); test.enqueue(13); test.enqueue(25); test.enqueue(59); var print = test.print(); return print[0] === 17 && print[1] === 32 && print[2] === 591; })(), '入队元素不能越过读指针。');\"},{\"text\":\"<code>dequeue</code>方法应该能够让元素出队。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); return test.dequeue() === 17 && test.dequeue() === 32 && test.dequeue() === 591; })(), '<code>dequeue</code>方法应该能够让元素出队。');\"},{\"text\":\"元素出队之后，该位置应该被设置为<code>null</code>。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(672); test.dequeue(); test.dequeue(); var print = test.print(); return print[0] === null && print[1] === null && print[2] === 672; })(), '元素出队之后，该位置应该被设置为<code>null</code>。');\"},{\"text\":\"如果越过写指针让元素出队，则应返回<code>null</code>。在这之后，读指针的位置也不应越过写指针。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); return test.dequeue() === 17 && test.dequeue() === 32 && test.dequeue() === 591 && test.dequeue() === null && test.dequeue() === null && test.dequeue() === null && test.dequeue() === null && test.enqueue(100) === 100 && test.dequeue() === 100; })(), '如果越过写指针让元素出队，则应返回<code>null</code>。在这之后，读指针的位置也不应越过写指针。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"class CircularQueue {\\n   constructor(size) {\\n\\n     this.queue = [];\\n     this.read = 0;\\n     this.write = 0;\\n     this.max = size - 1;\\n\\n     while (size > 0) {\\n        this.queue.push(null);\\n        size--;\\n     }\\n\\n   }\\n\\n   print() {\\n     return this.queue;\\n   }\\n\\n\\n   enqueue(item) {\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n   }\\n\\n   dequeue() {\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n   }\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/create-a-set-class\",\"id\":\"587d8255367417b2b2512c75\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-circular-queue\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-data-structures-create-a-circular-queue-961550d23e953aa42a01.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Circular Queue\",\"description\":[\"在本次挑战中我们来创建一个 Circular Queue（循环队列），与普通队列的不同之处在于循环队列的末尾是指向开头的。添加数据时，新元素还是会出现在末尾；但如果队列中的元素已经达到了尽头，则会把新元素添加到开头。这种数据结构在一些特定的场合会比较有用。比如流媒体服务，当队列满了以后新的媒体数据会从头部开始直接覆盖历史数据。\",\"下面我们用数组来举例说明循环队列的概念：\",\"<blockquote>[1, 2, 3, 4, 5]<br> ^Read @ 0<br> ^Write @ 0</blockquote>\",\"读和写两个操作都从<code>0</code>这个位置开始。现在队列添加了<code>a</code>、<code>b</code>和<code>c</code>3 个数据。新队列如下：\",\"<blockquote>[a, b, c, 4, 5]<br> ^Read @ 0<br>       ^Write @ 3</blockquote>\",\"读取数据时，我们可以选择移除或者保留数据：\",\"<blockquote>[null, null, null, 4, 5]<br>                   ^Read @ 3<br>                   ^Write @ 3</blockquote>\",\"一旦写入操作达队列末尾，就会从队列头开始继续写入数据：\",\"<blockquote>[f, null, null, d, e]<br>                ^Read @ 3<br> ^Write @ 1</blockquote>\",\"虽然这种数据结构有着固定的内存空间，但它可以用于处理占内存较大的文件。\",\"挑战说明：\",\"在本次挑战中我们来实现一个循环队列。该循环队列应该有<code>enqueue</code>和<code>dequeue</code>这两个方法，我们可以通过这两个方法从队列中读取和写入数据。这个类的构造器应该接收一个整数为参数，因为我们需要通过它来定义队列的长度。我们已经在右边的编辑器中为你写好了这个循环队列的初始版本。循环队列中存在两个指针（在这里，指针就是一个用于表示数组中元素位置的整数），分别是 read pointer（读指针）与 write pointer（写指针），它们分别用于表示数据的开始和结尾。在往循环队列中插入数据时，写指针需要向后移动一个位置，而如果写指针已经到达队列的末尾，则需要回到队列头部继续进行写入操作。类似地，在进行出队操作时，读指针也应该向后移动。写指针的位置不应越过读指针（我们的类当中不允许发生一个数据未经读取就已经被覆盖的情况发生），同时读指针也不应越过已经写入的数据。\",\"此外，<code>enqueue</code>方法应该返回成功入队的元素，否则需要返回<code>null</code>；类似地，<code>dequeue</code>方法应该返回成功出队的元素，否则需要返回<code>null</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-circular-queue\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>enqueue</code>方法应该能够将元素添加进循环队列。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); var print = test.print(); return print[0] === 17 && print[1] === 32 && print[2] === 591; })(), '<code>enqueue</code>方法应该能够将元素添加进循环队列。');\"},{\"text\":\"入队元素不能越过读指针。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); test.enqueue(13); test.enqueue(25); test.enqueue(59); var print = test.print(); return print[0] === 17 && print[1] === 32 && print[2] === 591; })(), '入队元素不能越过读指针。');\"},{\"text\":\"<code>dequeue</code>方法应该能够让元素出队。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); return test.dequeue() === 17 && test.dequeue() === 32 && test.dequeue() === 591; })(), '<code>dequeue</code>方法应该能够让元素出队。');\"},{\"text\":\"元素出队之后，该位置应该被设置为<code>null</code>。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(672); test.dequeue(); test.dequeue(); var print = test.print(); return print[0] === null && print[1] === null && print[2] === 672; })(), '元素出队之后，该位置应该被设置为<code>null</code>。');\"},{\"text\":\"如果越过写指针让元素出队，则应返回<code>null</code>。在这之后，读指针的位置也不应越过写指针。\",\"testString\":\"assert((function(){ var test = new CircularQueue(3); test.enqueue(17); test.enqueue(32); test.enqueue(591); return test.dequeue() === 17 && test.dequeue() === 32 && test.dequeue() === 591 && test.dequeue() === null && test.dequeue() === null && test.dequeue() === null && test.dequeue() === null && test.enqueue(100) === 100 && test.dequeue() === 100; })(), '如果越过写指针让元素出队，则应返回<code>null</code>。在这之后，读指针的位置也不应越过写指针。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"class CircularQueue {\\n   constructor(size) {\\n\\n     this.queue = [];\\n     this.read = 0;\\n     this.write = 0;\\n     this.max = size - 1;\\n\\n     while (size > 0) {\\n        this.queue.push(null);\\n        size--;\\n     }\\n\\n   }\\n\\n   print() {\\n     return this.queue;\\n   }\\n\\n\\n   enqueue(item) {\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n   }\\n\\n   dequeue() {\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n   }\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/create-a-set-class\",\"id\":\"587d8255367417b2b2512c75\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-circular-queue\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-data-structures-create-a-circular-queue.json\n// module id = 2819\n// module chunks = 275122216095816"],"sourceRoot":""}