{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-object-oriented-programming-use-inheritance-so-you-dont-repeat-yourself-051c0d31eca62b92af75.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-object-oriented-programming-use-inheritance-so-you-dont-repeat-yourself.json"],"names":["webpackJsonp","3976","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,+CAAAC,aAAA,omBAA+pB,sWAAwW,4PAA4P,kJAAAC,cAAA,EAAAC,QAA6LC,KAAA,qHAAAC,UAAA,8BAAAC,QAAgLC,KAAA,sDAAAC,WAAA,2GAAqLD,KAAA,qDAAAC,WAAA,2GAAoLD,KAAA,oDAAAC,WAAA,0GAAiLC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,yYAAgcC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,4GAAAC,GAAA,4BAA6MrB,KAAA","file":"path---javascript-algorithms-and-data-structures-object-oriented-programming-use-inheritance-so-you-dont-repeat-yourself-051c0d31eca62b92af75.js","sourcesContent":["webpackJsonp([183174825491342],{\n\n/***/ 3976:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use Inheritance So You Don't Repeat Yourself\",\"description\":[\"有一条原则叫做：<code>Don't Repeat Yourself</code>，常以缩写形式<code>DRY</code>出现，意思是“不要自己重复”。编写重复代码会产生的问题是：任何改变都需要去多个地方修复所有重复的代码。这通常意味着我们需要做更多的工作，会产生更高的出错率。\",\"请观察下面的示例，<code>Bird</code>和<code>Dog</code>共享<code>describe</code>方法：\",\"<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name);<br>&nbsp;&nbsp;}<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"我们可以看到<code>describe</code>方法在两个地方重复定义了。根据以上所说的<code>DRY</code>原则，我们可以通过创建一个<code>Animal 超类（或者父类）</code>来重写这段代码：\",\"<blockquote>function Animal() { };<br><br>Animal.prototype = {<br>&nbsp;&nbsp;constructor: Animal, <br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"<code>Animal</code>构造函数中定义了<code>describe</code>方法，可将<code>Bird</code>和<code>Dog</code>这两个构造函数的方法删除掉：\",\"<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog<br>};</blockquote>\",\"<hr>\",\"<code>Cat</code>和<code>Bear</code>重复定义了<code>eat</code>方法。本着<code>DRY</code>的原则，通过将<code>eat</code>方法移动到<code>Animal 超类</code>中来重写你的代码。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself\",\"blockName\":\"Object Oriented Programming\",\"tests\":[{\"text\":\"<code>Animal.prototype</code>应该有<code>eat</code>属性。\",\"testString\":\"assert(Animal.prototype.hasOwnProperty('eat'), '<code>Animal.prototype</code>应该有<code>eat</code>属性。');\"},{\"text\":\"<code>Bear.prototype</code>不应该有<code>eat</code>属性。\",\"testString\":\"assert(!(Bear.prototype.hasOwnProperty('eat')), '<code>Bear.prototype</code>不应该有<code>eat</code>属性。');\"},{\"text\":\"<code>Cat.prototype</code>不应该有<code>eat</code>属性。\",\"testString\":\"assert(!(Cat.prototype.hasOwnProperty('eat')), '<code>Cat.prototype</code>不应该有<code>eat</code>属性。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Cat(name) {\\n  this.name = name; \\n}\\n\\nCat.prototype = {\\n  constructor: Cat, \\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\");\\n  }\\n};\\n\\nfunction Bear(name) {\\n  this.name = name; \\n}\\n\\nBear.prototype = {\\n  constructor: Bear, \\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\");\\n  }\\n};\\n\\nfunction Animal() { }\\n\\nAnimal.prototype = {\\n  constructor: Animal,\\n  \\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype\",\"id\":\"587d7db0367417b2b2512b83\"},\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-object-oriented-programming-use-inheritance-so-you-dont-repeat-yourself-051c0d31eca62b92af75.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use Inheritance So You Don't Repeat Yourself\",\"description\":[\"有一条原则叫做：<code>Don't Repeat Yourself</code>，常以缩写形式<code>DRY</code>出现，意思是“不要自己重复”。编写重复代码会产生的问题是：任何改变都需要去多个地方修复所有重复的代码。这通常意味着我们需要做更多的工作，会产生更高的出错率。\",\"请观察下面的示例，<code>Bird</code>和<code>Dog</code>共享<code>describe</code>方法：\",\"<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name);<br>&nbsp;&nbsp;}<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"我们可以看到<code>describe</code>方法在两个地方重复定义了。根据以上所说的<code>DRY</code>原则，我们可以通过创建一个<code>Animal 超类（或者父类）</code>来重写这段代码：\",\"<blockquote>function Animal() { };<br><br>Animal.prototype = {<br>&nbsp;&nbsp;constructor: Animal, <br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\\\"My name is \\\" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\",\"<code>Animal</code>构造函数中定义了<code>describe</code>方法，可将<code>Bird</code>和<code>Dog</code>这两个构造函数的方法删除掉：\",\"<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog<br>};</blockquote>\",\"<hr>\",\"<code>Cat</code>和<code>Bear</code>重复定义了<code>eat</code>方法。本着<code>DRY</code>的原则，通过将<code>eat</code>方法移动到<code>Animal 超类</code>中来重写你的代码。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself\",\"blockName\":\"Object Oriented Programming\",\"tests\":[{\"text\":\"<code>Animal.prototype</code>应该有<code>eat</code>属性。\",\"testString\":\"assert(Animal.prototype.hasOwnProperty('eat'), '<code>Animal.prototype</code>应该有<code>eat</code>属性。');\"},{\"text\":\"<code>Bear.prototype</code>不应该有<code>eat</code>属性。\",\"testString\":\"assert(!(Bear.prototype.hasOwnProperty('eat')), '<code>Bear.prototype</code>不应该有<code>eat</code>属性。');\"},{\"text\":\"<code>Cat.prototype</code>不应该有<code>eat</code>属性。\",\"testString\":\"assert(!(Cat.prototype.hasOwnProperty('eat')), '<code>Cat.prototype</code>不应该有<code>eat</code>属性。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Cat(name) {\\n  this.name = name; \\n}\\n\\nCat.prototype = {\\n  constructor: Cat, \\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\");\\n  }\\n};\\n\\nfunction Bear(name) {\\n  this.name = name; \\n}\\n\\nBear.prototype = {\\n  constructor: Bear, \\n  eat: function() {\\n    console.log(\\\"nom nom nom\\\");\\n  }\\n};\\n\\nfunction Animal() { }\\n\\nAnimal.prototype = {\\n  constructor: Animal,\\n  \\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype\",\"id\":\"587d7db0367417b2b2512b83\"},\"slug\":\"/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-object-oriented-programming-use-inheritance-so-you-dont-repeat-yourself.json\n// module id = 3976\n// module chunks = 183174825491342"],"sourceRoot":""}