webpackJsonp([0xe16b1723fcd3],{3928:function(e,d){e.exports={data:{challengeNode:{title:"Diff Two Arrays",description:["在这道题目中，我们需要写一个函数，比较两个数组，返回一个新的数组。这个新数组需要包含传入的两个数组所有元素中，仅在其中一个数组里出现的元素。如果某个元素同时出现在两个数组中，则不应包含在返回的数组里。换言之，我们需要返回这两个数组的对称差。","如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。","<strong>注意：</strong><br>返回数组中的元素顺序不会影响测试结果。"],challengeType:5,fields:{slug:"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/diff-two-arrays",blockName:"Intermediate Algorithm Scripting",tests:[{text:"<code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code>应该返回一个数组。",testString:"assert(typeof diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) === \"object\", '<code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code>应该返回一个数组。');"},{text:'<code>["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回<code>["pink wool"]</code>。',testString:'assert.sameMembers(diffArray(["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]), ["pink wool"], \'<code>["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回<code>["pink wool"]</code>。\');'},{text:'<code>["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回一个长度为 1 的数组。',testString:'assert(diffArray(["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]).length === 1, \'<code>["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回一个长度为 1 的数组。\');'},{text:'<code>["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回<code>["diorite", "pink wool"]</code>。',testString:'assert.sameMembers(diffArray(["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]), ["diorite", "pink wool"], \'<code>["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回<code>["diorite", "pink wool"]</code>。\');'},{text:'<code>["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回一个长度为 2 的数组。',testString:'assert(diffArray(["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]).length === 2, \'<code>["andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]</code>应该返回一个长度为 2 的数组。\');'},{text:'<code>["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"]</code>应该返回<code>[]</code>。',testString:'assert.sameMembers(diffArray(["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"]), [], \'<code>["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"]</code>应该返回<code>[]</code>。\');'},{text:'<code>["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"]</code>应该返回一个空数组。',testString:'assert(diffArray(["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"]).length === 0, \'<code>["andesite", "grass", "dirt", "dead shrub"], ["andesite", "grass", "dirt", "dead shrub"]</code>应该返回一个空数组。\');'},{text:"<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code>应该返回<code>[4]</code>。",testString:"assert.sameMembers(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]), [4], '<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code>应该返回<code>[4]</code>。');"},{text:"<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code>应该返回一个长度为 1 的数组。",testString:"assert(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]).length  === 1, '<code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code>应该返回一个长度为 1 的数组。');"},{text:'<code>[1, "calf", 3, "piglet"], [1, "calf", 3, 4]</code>应该返回<code>["piglet", 4]</code>。',testString:'assert.sameMembers(diffArray([1, "calf", 3, "piglet"], [1, "calf", 3, 4]), ["piglet", 4], \'<code>[1, "calf", 3, "piglet"], [1, "calf", 3, 4]</code>应该返回<code>["piglet", 4]</code>。\');'},{text:'<code>[1, "calf", 3, "piglet"], [1, "calf", 3, 4]</code>应该返回一个长度为 2 的数组。',testString:'assert(diffArray([1, "calf", 3, "piglet"], [1, "calf", 3, 4]).length === 2, \'<code>[1, "calf", 3, "piglet"], [1, "calf", 3, 4]</code>应该返回一个长度为 2 的数组。\');'},{text:'<code>[], ["snuffleupagus", "cookie monster", "elmo"]</code>应该返回<code>["snuffleupagus", "cookie monster", "elmo"]</code>。',testString:'assert.sameMembers(diffArray([], ["snuffleupagus", "cookie monster", "elmo"]), ["snuffleupagus", "cookie monster", "elmo"], \'<code>[], ["snuffleupagus", "cookie monster", "elmo"]</code>应该返回<code>["snuffleupagus", "cookie monster", "elmo"]</code>。\');'},{text:'<code>[], ["snuffleupagus", "cookie monster", "elmo"]</code>应该返回一个长度为 3 的数组。',testString:'assert(diffArray([], ["snuffleupagus", "cookie monster", "elmo"]).length === 3, \'<code>[], ["snuffleupagus", "cookie monster", "elmo"]</code>应该返回一个长度为 3 的数组。\');'},{text:'<code>[1, "calf", 3, "piglet"], [7, "filly"]</code>应该返回<code>[1, "calf", 3, "piglet", 7, "filly"]</code>。',testString:'assert.sameMembers(diffArray([1, "calf", 3, "piglet"], [7, "filly"]), [1, "calf", 3, "piglet", 7, "filly"], \'<code>[1, "calf", 3, "piglet"], [7, "filly"]</code>应该返回<code>[1, "calf", 3, "piglet", 7, "filly"]</code>。\');'},{text:'<code>[1, "calf", 3, "piglet"], [7, "filly"]</code>应该返回一个长度为 6 的数组。',testString:'assert(diffArray([1, "calf", 3, "piglet"], [7, "filly"]).length === 6, \'<code>[1, "calf", 3, "piglet"], [7, "filly"]</code>应该返回一个长度为 6 的数组。\');'}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function diffArray(arr1, arr2) {\n  var newArr = [];\n  // 这是一个党异伐同的过程\n  return newArr;\n}\n\ndiffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/seek-and-destroy",id:"a5de63ebea8dbee56860f4f2"},slug:"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/diff-two-arrays"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-diff-two-arrays-e3079af4cbf0e869eb59.js.map