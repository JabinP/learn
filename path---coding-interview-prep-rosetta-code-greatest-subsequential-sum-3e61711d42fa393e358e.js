webpackJsonp([38611216454660],{3398:function(e,s){e.exports={data:{challengeNode:{title:"Greatest subsequential sum",description:["Given a sequence of integers, find a continuous subsequence which maximizes the sum of its elements, that is, the elements of no other single subsequence add up to a value larger than this one.","An empty subsequence is considered to have the sum of \\( 0 \\);  thus if all elements are negative, the result must be the empty sequence."],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/greatest-subsequential-sum",blockName:"Rosetta Code",tests:[{text:"'<code>maximumSubsequence</code> should be a function.'",testString:"assert(typeof maximumSubsequence=='function','<code>maximumSubsequence</code> should be a function.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return an array.'",testString:"assert(Array.isArray(maximumSubsequence(tests[0])),'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return an array.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.'",testString:"assert.deepEqual(maximumSubsequence(tests[0]),results[0],'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.'",testString:"assert.deepEqual(maximumSubsequence(tests[1]),results[1],'<code>maximumSubsequence('+JSON.stringify(tests[1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[2])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.'",testString:"assert.deepEqual(maximumSubsequence(tests[2]),results[2],'<code>maximumSubsequence('+JSON.stringify(tests[2])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[3])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.'",testString:"assert.deepEqual(maximumSubsequence(tests[3]),results[3],'<code>maximumSubsequence('+JSON.stringify(tests[3])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[4])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.'",testString:"assert.deepEqual(maximumSubsequence(tests[4]),results[4],'<code>maximumSubsequence('+JSON.stringify(tests[4])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"},{text:"'<code>maximumSubsequence('+JSON.stringify(tests[5])+')</code> should return <code>'+JSON.stringify(results[5])+'</code>.'",testString:"assert.deepEqual(maximumSubsequence(tests[5]),results[5],'<code>maximumSubsequence('+JSON.stringify(tests[5])+')</code> should return <code>'+JSON.stringify(results[5])+'</code>.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function maximumSubsequence (population) {\n  // Good luck!\n}",head:"",tail:"let tests=[ [1,2,-1,3,10,-10],\n            [0, 8, 10, -2, -4, -1, -5, -3],\n            [9, 9, -10, 1],\n            [7, 1, -5, -3, -8, 1],\n            [-3, 6, -1, 4, -4, -6],\n            [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1]]\nlet results=[ [ 1, 2, -1, 3, 10 ],\n          [ 0, 8, 10 ],\n          [ 9, 9 ],\n          [ 7, 1 ],\n          [ 6, -1, 4 ],\n          [ 3, 5, 6, -2, -1, 4 ] ]"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/hailstone-sequence",id:"5a23c84252665b21eecc7e84"},slug:"/coding-interview-prep/rosetta-code/greatest-subsequential-sum"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-greatest-subsequential-sum-3e61711d42fa393e358e.js.map