webpackJsonp([0xbe8e1d7323c1],{3381:function(e,n){e.exports={data:{challengeNode:{title:"Execute Brain****",description:["<p>Write a function to implement a Brain**** interpreter. The function will take a string as a parameter and should return a string as the output. More details are given below : </p>",'<p>RCBF is a set of <a href="http://rosettacode.org/wiki/Brainf***" title="Brainf***">Brainf***</a> compilers and interpreters written for Rosetta Code in a variety of languages.</p><p>Below are links to each of the versions of RCBF.</p><p>An implementation need only properly implement the following instructions:</p>',"<p>{|</p>","<p>!Command</p>","<p>!Description</p>","<p>|-</p>",'<p>| style="text-align:center"| <code>&gt;</code> || Move the pointer to the right</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>&lt;</code> || Move the pointer to the left</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>+</code> || Increment the memory cell under the pointer</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>-</code> || Decrement the memory cell under the pointer</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>.</code> || Output the character signified by the cell at the pointer</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>,</code> || Input a character and store it in the cell at the pointer</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>[</code> || Jump past the matching <code>]</code> if the cell under the pointer is 0</p>',"<p>|-</p>",'<p>| style="text-align:center"| <code>]</code> || Jump back to the matching <code>[</code> if the cell under the pointer is nonzero</p>',"<p>|}</p>","<p>Any cell size is allowed,  EOF   (<u>E</u>nd-<u>O</u>-<u>F</u>ile)  support is optional, as is whether you have bounded or unbounded memory.</p>",""],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/execute-brain",blockName:"Rosetta Code",tests:[{text:"<code>brain(bye)</code> should retuen a string",testString:"assert(typeof brain(bye) === 'string', '<code>brain(bye)</code> should return a string');"},{text:'<code>brain("++++++[>++++++++++<-]>+++++.")</code should return "A"',testString:'assert.equal(brain("++++++[>++++++++++<-]>+++++."),"A", \'<code>brain("++++++[>++++++++++<-]>+++++.")</code should return "A"\');'},{text:"<code>brain(bye)</code> should return <code>Goodbye, World!\\\\r\\\\n</code>",testString:"assert.equal(brain(bye), 'Goodbye, World!\\r\\n', '<code>brain(bye)</code> should return <code>Goodbye, World!\\\\r\\\\n</code>');"},{text:"<code>brain(hello)</code> should return <code>Hello World!\\\\n</code>'",testString:"assert.equal(brain(hello), \"Hello World!\\n\", '<code>brain(hello)</code> should return <code>Hello World!\\\\n</code>');"},{text:"<code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code>",testString:"assert.equal(brain(fib), \"1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89\", '<code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code>');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function brain (prog) {\n  // Good luck!\n}",head:"let fib=`+\n\n++\n\n+++\n\n++++\n\n+>+>>\n\n>>++++\n\n+++++++\n\n++++++++\n\n+++++++++\n\n++++++++++\n\n++++++>++++\n\n++++++++++++\n\n+++++++++++++\n\n+++<<<<<<[>[>>\n\n>>>>+>+<<<<<<<-\n\n]>>>>>>>[<<<<<<<\n\n+>>>>>>>-]<[>++++\n\n++++++[-<-[>>+>+<<\n\n<-]>>>[<<<+>>>-]+<[\n\n>[-]<[-]]>[<<[>>>+<<\n\n<-]>>[-]]<<]>>>[>>+>+\n\n<<<-]>>>[<<<+>>>-]+<[>\n\n[-]<[-]]>[<<+>>[-]]<<<<\n\n<<<]>>>>>[++++++++++++++\n\n+++++++++++++++++++++++++\n\n+++++++++.[-]]++++++++++<[\n\n->-<]>+++++++++++++++++++++\n\n+++++++++++++++++++++++++++.\n\n[-]<<<<<<<<<<<<[>>>+>+<<<<-]>\n\n>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]\n\n<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+\n\n>-]>[<+>-]<<<-]`;\nlet hello='++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.'\nlet bye='++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>>+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.<+++++++.--------.<<<<<+.<+++.---.';",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/extensible-prime-generator",id:"59e0a8df964e4540d5abe599"},slug:"/coding-interview-prep/rosetta-code/execute-brain"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-execute-brain-2defc735d436904a6c14.js.map