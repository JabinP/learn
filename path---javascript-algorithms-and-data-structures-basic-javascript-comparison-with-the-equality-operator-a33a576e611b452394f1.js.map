{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-javascript-comparison-with-the-equality-operator-a33a576e611b452394f1.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-comparison-with-the-equality-operator.json"],"names":["webpackJsonp","3768","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,wCAAAC,aAAA,sYAA0b,2eAAAC,cAAA,EAAAC,QAA4hBC,KAAA,oGAAAC,UAAA,mBAAAC,QAAoJC,KAAA,6CAAAC,WAAA,2FAAgKD,KAAA,yCAAAC,WAAA,mFAAoJD,KAAA,2CAAAC,WAAA,uFAAgKD,KAAA,0BAAAC,WAAA,kFAA+HC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,wJAA+MC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,2GAAAC,GAAA,4BAA4MrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-javascript-comparison-with-the-equality-operator-a33a576e611b452394f1.js","sourcesContent":["webpackJsonp([246914297147322],{\n\n/***/ 3768:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Comparison with the Equality Operator\",\"description\":[\"在 JavaScript 中，有很多<dfn>相互比较的操作</dfn>。所有这些操作符都返回一个<code>true</code>或<code>false</code>值。\",\"最基本的运算符是相等运算符：<code>==</code>。相等运算符比较两个值，如果它们是同等，返回<code>true</code>，如果它们不等，返回<code>false</code>。值得注意的是相等运算符不同于赋值运算符（<code>=</code>），赋值运算符是把等号右边的值赋给左边的变量。\",\"<blockquote>function equalityTest(myVal) {<br>  if (myVal == 10) {<br>     return \\\"Equal\\\";<br>  }<br>  return \\\"Not Equal\\\";<br>}</blockquote>\",\"如果<code>myVal</code>等于<code>10</code>，相等运算符会返回<code>true</code>，因此大括号里面的代码会被执行，函数将返回<code>\\\"Equal\\\"</code>。否则，函数返回<code>\\\"Not Equal\\\"</code>。\",\"在 JavaScript 中，为了让两个不同的<code>数据类型</code>（例如<code>数字</code>和<code>字符串</code>）的值可以作比较，它必须把一种类型转换为另一种类型。然而一旦这样做，它可以像下面这样来比较：\",\"<blockquote>   1   ==  1    // true<br>   1   ==  2    // false<br>   1   == '1'   // true<br>  \\\"3\\\"  ==  3    // true</blockquote>\",\"<hr>\",\"把<code>相等运算符</code>添加到指定的行，这样当<code>val</code>的值为<code>12</code>的时候，函数会返回\\\"Equal\\\"。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"<code>testEqual(10)</code>应该返回 \\\"Not Equal\\\"\",\"testString\":\"assert(testEqual(10) === \\\"Not Equal\\\", '<code>testEqual(10)</code>应该返回 \\\"Not Equal\\\"');\"},{\"text\":\"<code>testEqual(12)</code>应该返回 \\\"Equal\\\"\",\"testString\":\"assert(testEqual(12) === \\\"Equal\\\", '<code>testEqual(12)</code>应该返回 \\\"Equal\\\"');\"},{\"text\":\"<code>testEqual(\\\"12\\\")</code>应该返回 \\\"Equal\\\"\",\"testString\":\"assert(testEqual(\\\"12\\\") === \\\"Equal\\\", '<code>testEqual(\\\"12\\\")</code>应该返回 \\\"Equal\\\"');\"},{\"text\":\"你应该使用<code>==</code>运算符\",\"testString\":\"assert(code.match(/==/g) && !code.match(/===/g), '你应该使用<code>==</code>运算符');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 初始化变量\\nfunction testEqual(val) {\\n  if (val) { // 请修改这一行\\n    return \\\"Equal\\\";\\n  }\\n  return \\\"Not Equal\\\";\\n}\\n\\n// 你可以修改这一行来测试你的代码\\ntestEqual(10);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-strict-equality-operator\",\"id\":\"56533eb9ac21ba0edf2244d0\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-javascript-comparison-with-the-equality-operator-a33a576e611b452394f1.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Comparison with the Equality Operator\",\"description\":[\"在 JavaScript 中，有很多<dfn>相互比较的操作</dfn>。所有这些操作符都返回一个<code>true</code>或<code>false</code>值。\",\"最基本的运算符是相等运算符：<code>==</code>。相等运算符比较两个值，如果它们是同等，返回<code>true</code>，如果它们不等，返回<code>false</code>。值得注意的是相等运算符不同于赋值运算符（<code>=</code>），赋值运算符是把等号右边的值赋给左边的变量。\",\"<blockquote>function equalityTest(myVal) {<br>  if (myVal == 10) {<br>     return \\\"Equal\\\";<br>  }<br>  return \\\"Not Equal\\\";<br>}</blockquote>\",\"如果<code>myVal</code>等于<code>10</code>，相等运算符会返回<code>true</code>，因此大括号里面的代码会被执行，函数将返回<code>\\\"Equal\\\"</code>。否则，函数返回<code>\\\"Not Equal\\\"</code>。\",\"在 JavaScript 中，为了让两个不同的<code>数据类型</code>（例如<code>数字</code>和<code>字符串</code>）的值可以作比较，它必须把一种类型转换为另一种类型。然而一旦这样做，它可以像下面这样来比较：\",\"<blockquote>   1   ==  1    // true<br>   1   ==  2    // false<br>   1   == '1'   // true<br>  \\\"3\\\"  ==  3    // true</blockquote>\",\"<hr>\",\"把<code>相等运算符</code>添加到指定的行，这样当<code>val</code>的值为<code>12</code>的时候，函数会返回\\\"Equal\\\"。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"<code>testEqual(10)</code>应该返回 \\\"Not Equal\\\"\",\"testString\":\"assert(testEqual(10) === \\\"Not Equal\\\", '<code>testEqual(10)</code>应该返回 \\\"Not Equal\\\"');\"},{\"text\":\"<code>testEqual(12)</code>应该返回 \\\"Equal\\\"\",\"testString\":\"assert(testEqual(12) === \\\"Equal\\\", '<code>testEqual(12)</code>应该返回 \\\"Equal\\\"');\"},{\"text\":\"<code>testEqual(\\\"12\\\")</code>应该返回 \\\"Equal\\\"\",\"testString\":\"assert(testEqual(\\\"12\\\") === \\\"Equal\\\", '<code>testEqual(\\\"12\\\")</code>应该返回 \\\"Equal\\\"');\"},{\"text\":\"你应该使用<code>==</code>运算符\",\"testString\":\"assert(code.match(/==/g) && !code.match(/===/g), '你应该使用<code>==</code>运算符');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 初始化变量\\nfunction testEqual(val) {\\n  if (val) { // 请修改这一行\\n    return \\\"Equal\\\";\\n  }\\n  return \\\"Not Equal\\\";\\n}\\n\\n// 你可以修改这一行来测试你的代码\\ntestEqual(10);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-strict-equality-operator\",\"id\":\"56533eb9ac21ba0edf2244d0\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-comparison-with-the-equality-operator.json\n// module id = 3768\n// module chunks = 246914297147322"],"sourceRoot":""}