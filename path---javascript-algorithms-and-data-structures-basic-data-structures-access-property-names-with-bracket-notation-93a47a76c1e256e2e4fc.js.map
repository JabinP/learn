{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-data-structures-access-property-names-with-bracket-notation-93a47a76c1e256e2e4fc.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-data-structures-access-property-names-with-bracket-notation.json"],"names":["webpackJsonp","3733","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,8CAAAC,aAAA,iSAAuV,sWAAAC,cAAA,EAAAC,QAAiZC,KAAA,+GAAAC,UAAA,wBAAAC,QAAoKC,KAAA,sCAAAC,WAAA,kGAA4JD,KAAA,0LAAAC,WAAA,ySAAufD,KAAA,4DAAAC,WAAA,qHAAuMD,KAAA,6DAAAC,WAAA,uHAA0MD,KAAA,kEAAAC,WAAA,kIAAyNC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,yQAA8TC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sHAAAC,GAAA,4BAAuNrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-data-structures-access-property-names-with-bracket-notation-93a47a76c1e256e2e4fc.js","sourcesContent":["webpackJsonp([162063214884857],{\n\n/***/ 3733:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Access Property Names with Bracket Notation\",\"description\":[\"在关于对象的第一个挑战中，我们提到可以在方括号符号中用一个变量作为属性名来访问属性值。假设一个超市的收银台的程序中使用了一个<code>foods</code>对象，并且有一些程序逻辑会设置<code>selectedFood</code>，我们需要查询<code>foods</code>对象来检查某种食物是否存在，我们可以这样写检查逻辑：\",\"<blockquote>let selectedFood = getCurrentFood(scannedItem);<br>let inventory = foods[selectedFood];</blockquote>\",\"上述代码会先计算<code>selectedFood</code>变量的值，并返回<code>foods</code>对象中以该值命名的属性对应的值，若没有以该值命名的属性则会返回<code>undefined</code>。有时候对象的属性名在运行之前是不确定的，或者我们需要动态地访问对象的属性，这时方括号符号就会很有用。\",\"<hr>\",\"我们已经定义了一个<code>checkInventory</code>函数，它接受一个被扫描到的商品名作为输入参数。它要返回<code>foods</code>对象中以<code>scannedItem</code>的值命名的属性的值。只有有效的属性名会作为参数传入<code>checkInventory</code>，你在完成挑战时不需处理参数无效的情况。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation\",\"blockName\":\"Basic Data Structures\",\"tests\":[{\"text\":\"<code>checkInventory</code>应该是一个函数。\",\"testString\":\"assert.strictEqual(typeof checkInventory, 'function', '<code>checkInventory</code>应该是一个函数。');\"},{\"text\":\"<code>foods</code>对象应该有且只有以下键值对：<code>apples: 25</code>、<code>oranges: 32</code>、<code>plums: 28</code>、<code>bananas: 13</code>、<code>grapes: 35</code>、<code>strawberries: 27</code>。\",\"testString\":\"assert.deepEqual(foods, {apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27}, '<code>foods</code>对象应该有且只有以下键值对：<code>apples: 25</code>、<code>oranges: 32</code>、<code>plums: 28</code>、<code>bananas: 13</code>、<code>grapes: 35</code>、<code>strawberries: 27</code>。');\"},{\"text\":\"<code>checkInventory(\\\"apples\\\")</code>应该返回<code>25</code>。\",\"testString\":\"assert.strictEqual(checkInventory('apples'), 25, '<code>checkInventory(\\\"apples\\\")</code>应该返回<code>25</code>。');\"},{\"text\":\"<code>checkInventory(\\\"bananas\\\")</code>应该返回<code>13</code>。\",\"testString\":\"assert.strictEqual(checkInventory('bananas'), 13, '<code>checkInventory(\\\"bananas\\\")</code>应该返回<code>13</code>。');\"},{\"text\":\"<code>checkInventory(\\\"strawberries\\\")</code>应该返回<code>27</code>。\",\"testString\":\"assert.strictEqual(checkInventory('strawberries'), 27, '<code>checkInventory(\\\"strawberries\\\")</code>应该返回<code>27</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let foods = {\\n  apples: 25,\\n  oranges: 32,\\n  plums: 28,\\n  bananas: 13,\\n  grapes: 35,\\n  strawberries: 27\\n};\\n// 请不要修改本行以上的代码\\n\\nfunction checkInventory(scannedItem) {\\n  // 请把你的代码写在这条注释以下\\n\\n}\\n\\n// 你可以修改这行代码来测试不同的输入\\nconsole.log(checkInventory(\\\"apples\\\"));\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-data-structures/use-the-delete-keyword-to-remove-object-properties\",\"id\":\"587d7b7c367417b2b2512b1a\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-data-structures-access-property-names-with-bracket-notation-93a47a76c1e256e2e4fc.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Access Property Names with Bracket Notation\",\"description\":[\"在关于对象的第一个挑战中，我们提到可以在方括号符号中用一个变量作为属性名来访问属性值。假设一个超市的收银台的程序中使用了一个<code>foods</code>对象，并且有一些程序逻辑会设置<code>selectedFood</code>，我们需要查询<code>foods</code>对象来检查某种食物是否存在，我们可以这样写检查逻辑：\",\"<blockquote>let selectedFood = getCurrentFood(scannedItem);<br>let inventory = foods[selectedFood];</blockquote>\",\"上述代码会先计算<code>selectedFood</code>变量的值，并返回<code>foods</code>对象中以该值命名的属性对应的值，若没有以该值命名的属性则会返回<code>undefined</code>。有时候对象的属性名在运行之前是不确定的，或者我们需要动态地访问对象的属性，这时方括号符号就会很有用。\",\"<hr>\",\"我们已经定义了一个<code>checkInventory</code>函数，它接受一个被扫描到的商品名作为输入参数。它要返回<code>foods</code>对象中以<code>scannedItem</code>的值命名的属性的值。只有有效的属性名会作为参数传入<code>checkInventory</code>，你在完成挑战时不需处理参数无效的情况。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation\",\"blockName\":\"Basic Data Structures\",\"tests\":[{\"text\":\"<code>checkInventory</code>应该是一个函数。\",\"testString\":\"assert.strictEqual(typeof checkInventory, 'function', '<code>checkInventory</code>应该是一个函数。');\"},{\"text\":\"<code>foods</code>对象应该有且只有以下键值对：<code>apples: 25</code>、<code>oranges: 32</code>、<code>plums: 28</code>、<code>bananas: 13</code>、<code>grapes: 35</code>、<code>strawberries: 27</code>。\",\"testString\":\"assert.deepEqual(foods, {apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27}, '<code>foods</code>对象应该有且只有以下键值对：<code>apples: 25</code>、<code>oranges: 32</code>、<code>plums: 28</code>、<code>bananas: 13</code>、<code>grapes: 35</code>、<code>strawberries: 27</code>。');\"},{\"text\":\"<code>checkInventory(\\\"apples\\\")</code>应该返回<code>25</code>。\",\"testString\":\"assert.strictEqual(checkInventory('apples'), 25, '<code>checkInventory(\\\"apples\\\")</code>应该返回<code>25</code>。');\"},{\"text\":\"<code>checkInventory(\\\"bananas\\\")</code>应该返回<code>13</code>。\",\"testString\":\"assert.strictEqual(checkInventory('bananas'), 13, '<code>checkInventory(\\\"bananas\\\")</code>应该返回<code>13</code>。');\"},{\"text\":\"<code>checkInventory(\\\"strawberries\\\")</code>应该返回<code>27</code>。\",\"testString\":\"assert.strictEqual(checkInventory('strawberries'), 27, '<code>checkInventory(\\\"strawberries\\\")</code>应该返回<code>27</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let foods = {\\n  apples: 25,\\n  oranges: 32,\\n  plums: 28,\\n  bananas: 13,\\n  grapes: 35,\\n  strawberries: 27\\n};\\n// 请不要修改本行以上的代码\\n\\nfunction checkInventory(scannedItem) {\\n  // 请把你的代码写在这条注释以下\\n\\n}\\n\\n// 你可以修改这行代码来测试不同的输入\\nconsole.log(checkInventory(\\\"apples\\\"));\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-data-structures/use-the-delete-keyword-to-remove-object-properties\",\"id\":\"587d7b7c367417b2b2512b1a\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-data-structures-access-property-names-with-bracket-notation.json\n// module id = 3733\n// module chunks = 162063214884857"],"sourceRoot":""}