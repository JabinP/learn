{"version":3,"sources":["webpack:///path---front-end-libraries-redux-register-a-store-listener-c82bbcbf426b2fe2cc12.js","webpack:///./.cache/json/front-end-libraries-redux-register-a-store-listener.json"],"names":["webpackJsonp","3624","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,4BAAAC,aAAA,+yBAAAC,cAAA,EAAAC,QAA83BC,KAAA,uDAAAC,UAAA,QAAAC,QAA4FC,KAAA,qGAAAC,WAAA,yRAAkZD,KAAA,kGAAAC,WAAA,mLAAySD,KAAA,qIAAAC,WAAA,+KAAuUC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2GC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,ueAA4hBC,KAAA,aAAoBC,KAAA,OAAeC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAjB,WAA4CC,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2Ge,kBAAA,uDAAAC,GAAA,4BAA6GxB,KAAA","file":"path---front-end-libraries-redux-register-a-store-listener-c82bbcbf426b2fe2cc12.js","sourcesContent":["webpackJsonp([218749891613220],{\n\n/***/ 3624:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Register a Store Listener\",\"description\":[\"Another method you have access to on the Redux <code>store</code> object is <code>store.subscribe()</code>. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.\",\"<hr>\",\"Write a callback function that increments the global variable <code>count</code> every time the store receives an action, and pass this function in to the <code>store.subscribe()</code> method. You'll see that <code>store.dispatch()</code> is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place.\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/redux/register-a-store-listener\",\"blockName\":\"Redux\",\"tests\":[{\"text\":\"Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.\",\"testString\":\"assert((function() { const initialState = store.getState(); store.dispatch({ type: 'ADD' }); const newState = store.getState(); return newState === (initialState + 1); })(), 'Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.');\"},{\"text\":\"There should be a listener function subscribed to the store using <code>store.subscribe</code>.\",\"testString\":\"getUserInput => assert(getUserInput('index').includes('store.subscribe('), 'There should be a listener function subscribed to the store using <code>store.subscribe</code>.');\"},{\"text\":\"The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.\",\"testString\":\"assert(store.getState() === count, 'The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"const ADD = 'ADD';\\n\\nconst reducer = (state = 0, action) => {\\n  switch(action.type) {\\n    case ADD:\\n      return state + 1;\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst store = Redux.createStore(reducer);\\n\\n// global count variable:\\nlet count = 0;\\n\\n// change code below this line\\n\\n// change code above this line\\n\\nstore.dispatch({type: ADD});\\nconsole.log(count);\\nstore.dispatch({type: ADD});\\nconsole.log(count);\\nstore.dispatch({type: ADD});\\nconsole.log(count);\",\"head\":\"count = 0;\",\"tail\":\"\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/redux/combine-multiple-reducers\",\"id\":\"5a24c314108439a4d4036153\"},\"slug\":\"/front-end-libraries/redux/register-a-store-listener\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-redux-register-a-store-listener-c82bbcbf426b2fe2cc12.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Register a Store Listener\",\"description\":[\"Another method you have access to on the Redux <code>store</code> object is <code>store.subscribe()</code>. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.\",\"<hr>\",\"Write a callback function that increments the global variable <code>count</code> every time the store receives an action, and pass this function in to the <code>store.subscribe()</code> method. You'll see that <code>store.dispatch()</code> is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place.\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/redux/register-a-store-listener\",\"blockName\":\"Redux\",\"tests\":[{\"text\":\"Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.\",\"testString\":\"assert((function() { const initialState = store.getState(); store.dispatch({ type: 'ADD' }); const newState = store.getState(); return newState === (initialState + 1); })(), 'Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.');\"},{\"text\":\"There should be a listener function subscribed to the store using <code>store.subscribe</code>.\",\"testString\":\"getUserInput => assert(getUserInput('index').includes('store.subscribe('), 'There should be a listener function subscribed to the store using <code>store.subscribe</code>.');\"},{\"text\":\"The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.\",\"testString\":\"assert(store.getState() === count, 'The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"const ADD = 'ADD';\\n\\nconst reducer = (state = 0, action) => {\\n  switch(action.type) {\\n    case ADD:\\n      return state + 1;\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst store = Redux.createStore(reducer);\\n\\n// global count variable:\\nlet count = 0;\\n\\n// change code below this line\\n\\n// change code above this line\\n\\nstore.dispatch({type: ADD});\\nconsole.log(count);\\nstore.dispatch({type: ADD});\\nconsole.log(count);\\nstore.dispatch({type: ADD});\\nconsole.log(count);\",\"head\":\"count = 0;\",\"tail\":\"\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/redux/combine-multiple-reducers\",\"id\":\"5a24c314108439a4d4036153\"},\"slug\":\"/front-end-libraries/redux/register-a-store-listener\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-redux-register-a-store-listener.json\n// module id = 3624\n// module chunks = 218749891613220"],"sourceRoot":""}