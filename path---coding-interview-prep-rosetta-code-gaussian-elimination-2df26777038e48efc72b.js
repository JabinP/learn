webpackJsonp([0x8fa03e3572bb],{3392:function(s,t){s.exports={data:{challengeNode:{title:"Gaussian elimination",description:["Write a function to solve \\(A.x = b\\) using Gaussian elimination then backwards substitution. \\(A\\) being an \\(n \\times n\\) matrix. Also, \\(x\\) and \\(b\\) are \\(n\\) by 1 vectors. To improve accuracy, please use partial pivoting and scaling."],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/gaussian-elimination",blockName:"Rosetta Code",tests:[{text:"'<code>gaussianElimination</code> should be a function.'",testString:"assert(typeof gaussianElimination=='function','<code>gaussianElimination</code> should be a function.');"},{text:"'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return an array.'",testString:"assert(Array.isArray(gaussianElimination(tests[0][0],tests[0][1])),'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return an array.');"},{text:"'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.'",testString:"assert.deepEqual(gaussianElimination(tests[0][0],tests[0][1]),results[0],'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"},{text:"'<code>gaussianElimination('+JSON.stringify(tests[1][0])+','+JSON.stringify(tests[1][1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.'",testString:"assert.deepEqual(gaussianElimination(tests[1][0],tests[1][1]),results[1],'<code>gaussianElimination('+JSON.stringify(tests[1][0])+','+JSON.stringify(tests[1][1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"},{text:"'<code>gaussianElimination('+JSON.stringify(tests[2][0])+','+JSON.stringify(tests[2][1])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.'",testString:"assert.deepEqual(gaussianElimination(tests[2][0],tests[2][1]),results[2],'<code>gaussianElimination('+JSON.stringify(tests[2][0])+','+JSON.stringify(tests[2][1])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"},{text:"'<code>gaussianElimination('+JSON.stringify(tests[3][0])+','+JSON.stringify(tests[3][1])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.'",testString:"assert.deepEqual(gaussianElimination(tests[3][0],tests[3][1]),results[3],'<code>gaussianElimination('+JSON.stringify(tests[3][0])+','+JSON.stringify(tests[3][1])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"},{text:"'<code>gaussianElimination('+JSON.stringify(tests[4][0])+','+JSON.stringify(tests[4][1])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.'",testString:"assert.deepEqual(gaussianElimination(tests[4][0],tests[4][1]),results[4],'<code>gaussianElimination('+JSON.stringify(tests[4][0])+','+JSON.stringify(tests[4][1])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function gaussianElimination (A,b) {\n  // Good luck!\n}",head:"",tail:"let tests=[\n  [ [[1,1],[1,-1]] , [5,1] ],\n  [ [[2,3],[2,1]] , [8,4] ],\n  [ [[1,3],[5,-2]] , [14,19] ],\n  [ [[1,1],[5,-1]] , [10,14] ],\n  [ [[1,2,3],[4,5,6],[7,8,8]] , [6,15,23] ]\n];\nlet results=[\n  [ 3, 2 ],\n  [ 1, 2 ],\n  [ 5, 3 ],\n  [ 4, 6 ],\n  [ 1, 1, 1 ]\n]"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/general-fizzbuzz",id:"5a23c84252665b21eecc7e77"},slug:"/coding-interview-prep/rosetta-code/gaussian-elimination"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-gaussian-elimination-2df26777038e48efc72b.js.map