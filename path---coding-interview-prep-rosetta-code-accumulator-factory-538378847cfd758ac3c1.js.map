{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-accumulator-factory-538378847cfd758ac3c1.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-accumulator-factory.json"],"names":["webpackJsonp","3347","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,sBAAAC,aAAA,kKAAAC,cAAA,EAAAC,QAA2OC,KAAA,0DAAAC,UAAA,eAAAC,QAAsGC,KAAA,kCAAAC,WAAA,kFAAwID,KAAA,uCAAAC,WAAA,0FAAqJD,KAAA,0CAAAC,WAAA,8FAA4JD,KAAA,wBAAAC,WAAA,yDAAoGC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,8CAAiGC,KAAA,GAAAC,KAAA,2HAA6IC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,yDAAAC,GAAA,4BAA0JrB,KAAA","file":"path---coding-interview-prep-rosetta-code-accumulator-factory-538378847cfd758ac3c1.js","sourcesContent":["webpackJsonp([253755803117507],{\n\n/***/ 3347:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Accumulator factory\",\"description\":[\"<p>创建一个接收单个(数值)参数并返回另一个累加器函数的函数。返回的累加器函数依次接受一个数值参数，并返回迄今为止传递给累加器的所有数值的总和（包括在创建累加器时传递的初始值）。</p>\",\"<p>规则：</p>\",\"<p>不得使用全局变量：</p>\",\"<p>提示：</p>\",\"<p>闭包保存外部状态。</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/accumulator-factory\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>accumulator</code> 是一个函数。\",\"testString\":\"assert(typeof accumulator === 'function', '<code>accumulator</code> 是一个函数。');\"},{\"text\":\"<code>accumulator(0)</code> 应返回一个函数。\",\"testString\":\"assert(typeof accumulator(0) === 'function', '<code>accumulator(0)</code> 应返回一个函数。');\"},{\"text\":\"<code>accumulator(0)(2)</code> 应返回一个数字。\",\"testString\":\"assert(typeof accumulator(0)(2) === 'number', '<code>accumulator(0)(2)</code> 应返回一个数字。');\"},{\"text\":\"传入值3、-4、1.5和5，应返回5.5。\",\"testString\":\"assert(testFn(5) === 5.5, '传入值3、-4、1.5和5，应返回5.5。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function accumulator (sum) {\\n  // 祝你好运！\\n}\",\"head\":\"\",\"tail\":\"const testFn = typeof accumulator(3) === 'function' && accumulator(3);\\nif (testFn) {\\n  testFn(-4);\\n  testFn(1.5);\\n}\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/ackermann-function\",\"id\":\"594810f028c0303b75339ace\"},\"slug\":\"/coding-interview-prep/rosetta-code/accumulator-factory\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-accumulator-factory-538378847cfd758ac3c1.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Accumulator factory\",\"description\":[\"<p>创建一个接收单个(数值)参数并返回另一个累加器函数的函数。返回的累加器函数依次接受一个数值参数，并返回迄今为止传递给累加器的所有数值的总和（包括在创建累加器时传递的初始值）。</p>\",\"<p>规则：</p>\",\"<p>不得使用全局变量：</p>\",\"<p>提示：</p>\",\"<p>闭包保存外部状态。</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/accumulator-factory\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>accumulator</code> 是一个函数。\",\"testString\":\"assert(typeof accumulator === 'function', '<code>accumulator</code> 是一个函数。');\"},{\"text\":\"<code>accumulator(0)</code> 应返回一个函数。\",\"testString\":\"assert(typeof accumulator(0) === 'function', '<code>accumulator(0)</code> 应返回一个函数。');\"},{\"text\":\"<code>accumulator(0)(2)</code> 应返回一个数字。\",\"testString\":\"assert(typeof accumulator(0)(2) === 'number', '<code>accumulator(0)(2)</code> 应返回一个数字。');\"},{\"text\":\"传入值3、-4、1.5和5，应返回5.5。\",\"testString\":\"assert(testFn(5) === 5.5, '传入值3、-4、1.5和5，应返回5.5。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function accumulator (sum) {\\n  // 祝你好运！\\n}\",\"head\":\"\",\"tail\":\"const testFn = typeof accumulator(3) === 'function' && accumulator(3);\\nif (testFn) {\\n  testFn(-4);\\n  testFn(1.5);\\n}\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/ackermann-function\",\"id\":\"594810f028c0303b75339ace\"},\"slug\":\"/coding-interview-prep/rosetta-code/accumulator-factory\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-accumulator-factory.json\n// module id = 3347\n// module chunks = 253755803117507"],"sourceRoot":""}