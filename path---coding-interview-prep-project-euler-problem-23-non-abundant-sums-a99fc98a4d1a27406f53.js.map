{"version":3,"sources":["webpack:///path---coding-interview-prep-project-euler-problem-23-non-abundant-sums-a99fc98a4d1a27406f53.js","webpack:///./.cache/json/coding-interview-prep-project-euler-problem-23-non-abundant-sums.json"],"names":["webpackJsonp","3006","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gCAAAC,aAAA,6UAAAC,cAAA,EAAAC,QAAgaC,KAAA,oEAAAC,UAAA,gBAAAC,QAAiHC,KAAA,2DAAAC,WAAA,oHAAmMD,KAAA,2DAAAC,WAAA,oHAAmMD,KAAA,2DAAAC,WAAA,oHAAmMD,KAAA,2DAAAC,WAAA,qHAAmMC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,uGAA0JC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,6EAAAC,GAAA,4BAA8KrB,KAAA","file":"path---coding-interview-prep-project-euler-problem-23-non-abundant-sums-a99fc98a4d1a27406f53.js","sourcesContent":["webpackJsonp([130750496878470],{\n\n/***/ 3006:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 23: Non-abundant sums\",\"description\":[\"完全数是指真因数之和等于自身的那些数。例如，28 的真因数之和为 1 + 2 + 4 + 7 + 14 = 28，因此 28 是一个完全数。\",\"如果一个数 <var>n</var> 的真因数之和小于 <var>n</var>，这个数被称为亏数；反之则被称为盈数。\",\"由于 12 是最小的盈数，它的真因数之和为 1 + 2 + 3 + 4 + 6 = 16，所以最小的能够表示成两个盈数之和的数是 24。通过数学分析可以得出，所有大于 28123 的数都可以被写成两个盈数的和；尽管我们知道最大的不能被写成两个盈数的和的数要小于这个值，但这是通过分析所能得到的最好上界。\",\"找出所有小于等于给定参数值 n 且不能被写成两个盈数之和的正整数，并求它们的和。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-23-non-abundant-sums\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>sumOfNonAbundantNumbers(10000)</code>应该返回 3731004。\",\"testString\":\"assert(sumOfNonAbundantNumbers(10000) === 3731004, '<code>sumOfNonAbundantNumbers(10000)</code>应该返回 3731004。');\"},{\"text\":\"<code>sumOfNonAbundantNumbers(15000)</code>应该返回 4039939。\",\"testString\":\"assert(sumOfNonAbundantNumbers(15000) === 4039939, '<code>sumOfNonAbundantNumbers(15000)</code>应该返回 4039939。');\"},{\"text\":\"<code>sumOfNonAbundantNumbers(20000)</code>应该返回 4159710。\",\"testString\":\"assert(sumOfNonAbundantNumbers(20000) === 4159710, '<code>sumOfNonAbundantNumbers(20000)</code>应该返回 4159710。');\"},{\"text\":\"<code>sumOfNonAbundantNumbers(28123)</code>应该返回 4179871。\",\"testString\":\"assert(sumOfNonAbundantNumbers(28123) === 4179871, '<code>sumOfNonAbundantNumbers(28123)</code>应该返回 4179871。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function sumOfNonAbundantNumbers(n) {\\n  // 祝你好运！\\n  return n;\\n}\\n\\nsumOfNonAbundantNumbers(28123);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-24-lexicographic-permutations\",\"id\":\"5900f3831000cf542c50fe96\"},\"slug\":\"/coding-interview-prep/project-euler/problem-23-non-abundant-sums\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-project-euler-problem-23-non-abundant-sums-a99fc98a4d1a27406f53.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 23: Non-abundant sums\",\"description\":[\"完全数是指真因数之和等于自身的那些数。例如，28 的真因数之和为 1 + 2 + 4 + 7 + 14 = 28，因此 28 是一个完全数。\",\"如果一个数 <var>n</var> 的真因数之和小于 <var>n</var>，这个数被称为亏数；反之则被称为盈数。\",\"由于 12 是最小的盈数，它的真因数之和为 1 + 2 + 3 + 4 + 6 = 16，所以最小的能够表示成两个盈数之和的数是 24。通过数学分析可以得出，所有大于 28123 的数都可以被写成两个盈数的和；尽管我们知道最大的不能被写成两个盈数的和的数要小于这个值，但这是通过分析所能得到的最好上界。\",\"找出所有小于等于给定参数值 n 且不能被写成两个盈数之和的正整数，并求它们的和。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-23-non-abundant-sums\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>sumOfNonAbundantNumbers(10000)</code>应该返回 3731004。\",\"testString\":\"assert(sumOfNonAbundantNumbers(10000) === 3731004, '<code>sumOfNonAbundantNumbers(10000)</code>应该返回 3731004。');\"},{\"text\":\"<code>sumOfNonAbundantNumbers(15000)</code>应该返回 4039939。\",\"testString\":\"assert(sumOfNonAbundantNumbers(15000) === 4039939, '<code>sumOfNonAbundantNumbers(15000)</code>应该返回 4039939。');\"},{\"text\":\"<code>sumOfNonAbundantNumbers(20000)</code>应该返回 4159710。\",\"testString\":\"assert(sumOfNonAbundantNumbers(20000) === 4159710, '<code>sumOfNonAbundantNumbers(20000)</code>应该返回 4159710。');\"},{\"text\":\"<code>sumOfNonAbundantNumbers(28123)</code>应该返回 4179871。\",\"testString\":\"assert(sumOfNonAbundantNumbers(28123) === 4179871, '<code>sumOfNonAbundantNumbers(28123)</code>应该返回 4179871。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function sumOfNonAbundantNumbers(n) {\\n  // 祝你好运！\\n  return n;\\n}\\n\\nsumOfNonAbundantNumbers(28123);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-24-lexicographic-permutations\",\"id\":\"5900f3831000cf542c50fe96\"},\"slug\":\"/coding-interview-prep/project-euler/problem-23-non-abundant-sums\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-project-euler-problem-23-non-abundant-sums.json\n// module id = 3006\n// module chunks = 130750496878470"],"sourceRoot":""}