{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-es-6-create-strings-using-template-literals-b7c73688c7e8311beee9.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-es-6-create-strings-using-template-literals.json"],"names":["webpackJsonp","3876","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,yCAAAC,aAAA,sYAA8W,wKAA0O,kSAAAC,cAAA,EAAAC,QAAsVC,KAAA,wFAAAC,UAAA,MAAAC,QAA2HC,KAAA,8EAAAC,WAAA,4KAA8QD,KAAA,2CAAAC,WAAA,gKAA+ND,KAAA,YAAAC,WAAA,gFAA+GC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,2jBAAsoBC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,+GAAAC,GAAA,4BAAgNrB,KAAA","file":"path---javascript-algorithms-and-data-structures-es-6-create-strings-using-template-literals-b7c73688c7e8311beee9.js","sourcesContent":["webpackJsonp([145518226850617],{\n\n/***/ 3876:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create Strings using Template Literals\",\"description\":[\"模板字符串是 ES6 的另外一项新的功能。这是一种可以轻松构建复杂字符串的方法。\",\"请看以下代码：\",\"<blockquote>const person = {<br>&nbsp;&nbsp;name: \\\"Zodiac Hasbro\\\",<br>&nbsp;&nbsp;age: 56<br>};<br><br>// string interpolation<br>const greeting = `Hello, my name is ${person.name}!<br>I am ${person.age} years old.`;<br><br>console.log(greeting); // 打印出<br>// Hello, my name is Zodiac Hasbro!<br>// I am 56 years old.<br></blockquote>\",\"这段代码有许多的不同：\",\"首先，上面使用的<code>${variable}</code>语法是一个占位符。这样一来，你将不再需要使用<code>+</code>运算符来连接字符串。当需要在字符串里增加变量的时候，你只需要在变量的外面括上<code>${</code>和<code>}</code>，并将其放在字符串里就可以了。\",\"其次，在例子使用了反引号（<code>`</code>），而不是引号（<code>'</code>或者<code>\\\"</code>）将字符串括了起来，并且这个字符串可以换行。\",\"这个新的方式使你可以更灵活的创建复杂的字符串。\",\"<hr>\",\"使用模板字符串的反引号的语法来展示<code>result</code>对象的<code>failure</code>数组内的每个条目。每个条目应该括在带有<code>text-warning</code>类属性的<code>li</code>标签中，并赋值给<code>resultDisplayArray</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals\",\"blockName\":\"ES6\",\"tests\":[{\"text\":\"<code>resultDisplayArray</code> 是一个包含了 <code>result failure</code> 内的消息的数组。\",\"testString\":\"assert(typeof makeList(result.failure) === 'object' && resultDisplayArray.length === 3, '<code>resultDisplayArray</code> 是一个包含了 <code>result failure</code> 内的消息的数组。');\"},{\"text\":\"<code>resultDisplayArray</code> 要有正确的输出。\",\"testString\":\"assert(makeList(result.failure).every((v, i) => v === `<li class=\\\"text-warning\\\">${result.failure[i]}</li>`), '<code>resultDisplayArray</code> 要有正确的输出。');\"},{\"text\":\"应使用模板字符串。\",\"testString\":\"getUserInput => assert(getUserInput('index').match(/`.*`/g), '应使用模板字符串。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"const result = {\\n  success: [\\\"max-length\\\", \\\"no-amd\\\", \\\"prefer-arrow-functions\\\"],\\n  failure: [\\\"no-var\\\", \\\"var-on-top\\\", \\\"linebreak\\\"],\\n  skipped: [\\\"id-blacklist\\\", \\\"no-dup-keys\\\"]\\n};\\nfunction makeList(arr) {\\n  \\\"use strict\\\";\\n\\n  // 在这行以下修改代码\\n  const resultDisplayArray = null;\\n  // 在这行以上修改代码\\n\\n  return resultDisplayArray;\\n}\\n/**\\n * makeList(result.failure) 应该返回：\\n * [ <li class=\\\"text-warning\\\">no-var</li>,\\n *   <li class=\\\"text-warning\\\">var-on-top</li>, \\n *   <li class=\\\"text-warning\\\">linebreak</li> ]\\n **/\\nconst resultDisplayArray = makeList(result.failure);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields\",\"id\":\"587d7b8a367417b2b2512b4e\"},\"slug\":\"/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-es-6-create-strings-using-template-literals-b7c73688c7e8311beee9.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create Strings using Template Literals\",\"description\":[\"模板字符串是 ES6 的另外一项新的功能。这是一种可以轻松构建复杂字符串的方法。\",\"请看以下代码：\",\"<blockquote>const person = {<br>&nbsp;&nbsp;name: \\\"Zodiac Hasbro\\\",<br>&nbsp;&nbsp;age: 56<br>};<br><br>// string interpolation<br>const greeting = `Hello, my name is ${person.name}!<br>I am ${person.age} years old.`;<br><br>console.log(greeting); // 打印出<br>// Hello, my name is Zodiac Hasbro!<br>// I am 56 years old.<br></blockquote>\",\"这段代码有许多的不同：\",\"首先，上面使用的<code>${variable}</code>语法是一个占位符。这样一来，你将不再需要使用<code>+</code>运算符来连接字符串。当需要在字符串里增加变量的时候，你只需要在变量的外面括上<code>${</code>和<code>}</code>，并将其放在字符串里就可以了。\",\"其次，在例子使用了反引号（<code>`</code>），而不是引号（<code>'</code>或者<code>\\\"</code>）将字符串括了起来，并且这个字符串可以换行。\",\"这个新的方式使你可以更灵活的创建复杂的字符串。\",\"<hr>\",\"使用模板字符串的反引号的语法来展示<code>result</code>对象的<code>failure</code>数组内的每个条目。每个条目应该括在带有<code>text-warning</code>类属性的<code>li</code>标签中，并赋值给<code>resultDisplayArray</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals\",\"blockName\":\"ES6\",\"tests\":[{\"text\":\"<code>resultDisplayArray</code> 是一个包含了 <code>result failure</code> 内的消息的数组。\",\"testString\":\"assert(typeof makeList(result.failure) === 'object' && resultDisplayArray.length === 3, '<code>resultDisplayArray</code> 是一个包含了 <code>result failure</code> 内的消息的数组。');\"},{\"text\":\"<code>resultDisplayArray</code> 要有正确的输出。\",\"testString\":\"assert(makeList(result.failure).every((v, i) => v === `<li class=\\\"text-warning\\\">${result.failure[i]}</li>`), '<code>resultDisplayArray</code> 要有正确的输出。');\"},{\"text\":\"应使用模板字符串。\",\"testString\":\"getUserInput => assert(getUserInput('index').match(/`.*`/g), '应使用模板字符串。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"const result = {\\n  success: [\\\"max-length\\\", \\\"no-amd\\\", \\\"prefer-arrow-functions\\\"],\\n  failure: [\\\"no-var\\\", \\\"var-on-top\\\", \\\"linebreak\\\"],\\n  skipped: [\\\"id-blacklist\\\", \\\"no-dup-keys\\\"]\\n};\\nfunction makeList(arr) {\\n  \\\"use strict\\\";\\n\\n  // 在这行以下修改代码\\n  const resultDisplayArray = null;\\n  // 在这行以上修改代码\\n\\n  return resultDisplayArray;\\n}\\n/**\\n * makeList(result.failure) 应该返回：\\n * [ <li class=\\\"text-warning\\\">no-var</li>,\\n *   <li class=\\\"text-warning\\\">var-on-top</li>, \\n *   <li class=\\\"text-warning\\\">linebreak</li> ]\\n **/\\nconst resultDisplayArray = makeList(result.failure);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields\",\"id\":\"587d7b8a367417b2b2512b4e\"},\"slug\":\"/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-es-6-create-strings-using-template-literals.json\n// module id = 3876\n// module chunks = 145518226850617"],"sourceRoot":""}