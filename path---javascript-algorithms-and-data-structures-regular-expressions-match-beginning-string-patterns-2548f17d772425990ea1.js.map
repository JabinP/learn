{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-regular-expressions-match-beginning-string-patterns-2548f17d772425990ea1.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-regular-expressions-match-beginning-string-patterns.json"],"names":["webpackJsonp","3991","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,kCAAAC,aAAA,gfAAygB,8FAAAC,cAAA,EAAAC,QAA+JC,KAAA,iGAAAC,UAAA,sBAAAC,QAAoJC,KAAA,yCAAAC,WAAA,mFAAoJD,KAAA,oBAAAC,WAAA,yDAAiGD,KAAA,uCAAAC,WAAA,wGAAuKD,KAAA,wCAAAC,WAAA,2GAA0KC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,oIAAyLC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,8FAAAC,GAAA,4BAA+LrB,KAAA","file":"path---javascript-algorithms-and-data-structures-regular-expressions-match-beginning-string-patterns-2548f17d772425990ea1.js","sourcesContent":["webpackJsonp([267143798164916],{\n\n/***/ 3991:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Match Beginning String Patterns\",\"description\":[\"先前的挑战表明，正则表达式可以用于查找许多匹配项。它们还用于搜寻字符串中特定位置的匹配模式。\",\"在之前的挑战中，你使用<code>字符集</code>中的<code>插入</code>符号（<code>^</code>）来创建一个<code>否定字符集</code>，形如<code>[^thingsThatWillNotBeMatched]</code>。在<code>字符集</code>之外，<code>插入</code>符号用于字符串的开头搜寻匹配模式。\",\"<blockquote>let firstString = \\\"Ricky is first and can be found.\\\";<br>let firstRegex = /^Ricky/;<br>firstRegex.test(firstString);<br>// Returns true<br>let notFirst = \\\"You can't find Ricky now.\\\";<br>firstRegex.test(notFirst);<br>// Returns false</blockquote>\",\"<hr>\",\"在正则表达式中使用<code>^</code>符号，以匹配仅在字符串<code>rickyAndCal</code>的开头出现的<code>\\\"Cal\\\"</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-beginning-string-patterns\",\"blockName\":\"Regular Expressions\",\"tests\":[{\"text\":\"你的正则表达式应该搜寻有一个大写字母的<code>\\\"Cal\\\"</code>。\",\"testString\":\"assert(calRegex.source == \\\"^Cal\\\", '你的正则表达式应该搜寻有一个大写字母的<code>\\\"Cal\\\"</code>。');\"},{\"text\":\"你的正则表达式不应该使用任何标志。\",\"testString\":\"assert(calRegex.flags == \\\"\\\", '你的正则表达式不应该使用任何标志。');\"},{\"text\":\"你的正则表达式应该匹配字符串开头的<code>\\\"Cal\\\"</code>。\",\"testString\":\"assert(calRegex.test(\\\"Cal and Ricky both like racing.\\\"), '你的正则表达式应该匹配字符串开头的<code>\\\"Cal\\\"</code>。');\"},{\"text\":\"你的正则表达式不应该匹配字符串中间的<code>\\\"Cal\\\"</code>。\",\"testString\":\"assert(!calRegex.test(\\\"Ricky and Cal both like racing.\\\"), '你的正则表达式不应该匹配字符串中间的<code>\\\"Cal\\\"</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let rickyAndCal = \\\"Cal and Ricky both like racing.\\\";\\nlet calRegex = /change/; // 修改这一行\\nlet result = calRegex.test(rickyAndCal);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-ending-string-patterns\",\"id\":\"587d7db7367417b2b2512b9d\"},\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-beginning-string-patterns\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-regular-expressions-match-beginning-string-patterns-2548f17d772425990ea1.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Match Beginning String Patterns\",\"description\":[\"先前的挑战表明，正则表达式可以用于查找许多匹配项。它们还用于搜寻字符串中特定位置的匹配模式。\",\"在之前的挑战中，你使用<code>字符集</code>中的<code>插入</code>符号（<code>^</code>）来创建一个<code>否定字符集</code>，形如<code>[^thingsThatWillNotBeMatched]</code>。在<code>字符集</code>之外，<code>插入</code>符号用于字符串的开头搜寻匹配模式。\",\"<blockquote>let firstString = \\\"Ricky is first and can be found.\\\";<br>let firstRegex = /^Ricky/;<br>firstRegex.test(firstString);<br>// Returns true<br>let notFirst = \\\"You can't find Ricky now.\\\";<br>firstRegex.test(notFirst);<br>// Returns false</blockquote>\",\"<hr>\",\"在正则表达式中使用<code>^</code>符号，以匹配仅在字符串<code>rickyAndCal</code>的开头出现的<code>\\\"Cal\\\"</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-beginning-string-patterns\",\"blockName\":\"Regular Expressions\",\"tests\":[{\"text\":\"你的正则表达式应该搜寻有一个大写字母的<code>\\\"Cal\\\"</code>。\",\"testString\":\"assert(calRegex.source == \\\"^Cal\\\", '你的正则表达式应该搜寻有一个大写字母的<code>\\\"Cal\\\"</code>。');\"},{\"text\":\"你的正则表达式不应该使用任何标志。\",\"testString\":\"assert(calRegex.flags == \\\"\\\", '你的正则表达式不应该使用任何标志。');\"},{\"text\":\"你的正则表达式应该匹配字符串开头的<code>\\\"Cal\\\"</code>。\",\"testString\":\"assert(calRegex.test(\\\"Cal and Ricky both like racing.\\\"), '你的正则表达式应该匹配字符串开头的<code>\\\"Cal\\\"</code>。');\"},{\"text\":\"你的正则表达式不应该匹配字符串中间的<code>\\\"Cal\\\"</code>。\",\"testString\":\"assert(!calRegex.test(\\\"Ricky and Cal both like racing.\\\"), '你的正则表达式不应该匹配字符串中间的<code>\\\"Cal\\\"</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let rickyAndCal = \\\"Cal and Ricky both like racing.\\\";\\nlet calRegex = /change/; // 修改这一行\\nlet result = calRegex.test(rickyAndCal);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-ending-string-patterns\",\"id\":\"587d7db7367417b2b2512b9d\"},\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-beginning-string-patterns\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-regular-expressions-match-beginning-string-patterns.json\n// module id = 3991\n// module chunks = 267143798164916"],"sourceRoot":""}