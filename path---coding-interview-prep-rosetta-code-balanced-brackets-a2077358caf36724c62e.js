webpackJsonp([51028710642889],{3355:function(e,t){e.exports={data:{challengeNode:{title:"Balanced brackets",description:["<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>","Examples:","<p class='rosetta__paragraph'>(empty) true</p>","<p class='rosetta__paragraph'><code>[]</code> true</p>","<p class='rosetta__paragraph'><code>][</code> false</p>","<p class='rosetta__paragraph'><code>[][]</code> true</p>","<p class='rosetta__paragraph'><code>][][</code> false</p>","<p class='rosetta__paragraph'><code>[]][[]</code> false</p>","<p class='rosetta__paragraph'><code>[[[[]]]]</code> true</p>"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/balanced-brackets",blockName:"Rosetta Code",tests:[{text:"<code>isBalanced</code> is a function.",testString:"assert(typeof isBalanced === 'function', '<code>isBalanced</code> is a function.');"},{text:'<code>isBalanced("[]")</code> should return true.',testString:"assert(isBalanced(testCases[0]), '<code>isBalanced(\"[]\")</code> should return true.');"},{text:'<code>isBalanced("]][[[][][][]][")</code> should return false.',testString:"assert(!isBalanced(testCases[1]), '<code>isBalanced(\"]][[[][][][]][\")</code> should return false.');"},{text:'<code>isBalanced("[][[[[][][[[]]]]]]")</code> should return true.',testString:"assert(isBalanced(testCases[2]), '<code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.');"},{text:'<code>isBalanced("][")</code> should return true.',testString:"assert(!isBalanced(testCases[3]), '<code>isBalanced(\"][\")</code> should return true.');"},{text:'<code>isBalanced("[[[]]]][[]")</code> should return true.',testString:"assert(!isBalanced(testCases[4]), '<code>isBalanced(\"[[[]]]][[]\")</code> should return true.');"},{text:'<code>isBalanced("][[]")</code> should return true.',testString:"assert(!isBalanced(testCases[5]), '<code>isBalanced(\"][[]\")</code> should return true.');"},{text:'<code>isBalanced("][[][]][[[]]")</code> should return true.',testString:"assert(!isBalanced(testCases[6]), '<code>isBalanced(\"][[][]][[[]]\")</code> should return true.');"},{text:'<code>isBalanced("[[][]]][")</code> should return true.',testString:"assert(!isBalanced(testCases[7]), '<code>isBalanced(\"[[][]]][\")</code> should return true.');"},{text:'<code>isBalanced("[[[]]][[]]]][][[")</code> should return true.',testString:"assert(!isBalanced(testCases[8]), '<code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return true.');"},{text:'<code>isBalanced("[]][[]]][[[[][]]")</code> should return true.',testString:"assert(!isBalanced(testCases[9]), '<code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return true.');"},{text:'<code>isBalanced("][]][[][")</code> should return true.',testString:"assert(!isBalanced(testCases[10]), '<code>isBalanced(\"][]][[][\")</code> should return true.');"},{text:'<code>isBalanced("[[]][[][]]")</code> should return true.',testString:"assert(isBalanced(testCases[11]), '<code>isBalanced(\"[[]][[][]]\")</code> should return true.');"},{text:'<code>isBalanced("[[]]")</code> should return true.',testString:"assert(isBalanced(testCases[12]), '<code>isBalanced(\"[[]]\")</code> should return true.');"},{text:'<code>isBalanced("]][]][[]][[[")</code> should return true.',testString:"assert(!isBalanced(testCases[13]), '<code>isBalanced(\"]][]][[]][[[\")</code> should return true.');"},{text:'<code>isBalanced("][]][][[")</code> should return true.',testString:"assert(!isBalanced(testCases[14]), '<code>isBalanced(\"][]][][[\")</code> should return true.');"},{text:'<code>isBalanced("][][")</code> should return true.',testString:"assert(!isBalanced(testCases[15]), '<code>isBalanced(\"][][\")</code> should return true.');"},{text:'<code>isBalanced("[[]]][][][[]][")</code> should return true.',testString:"assert(!isBalanced(testCases[16]), '<code>isBalanced(\"[[]]][][][[]][\")</code> should return true.');"},{text:'<code>isBalanced("")</code> should return true.',testString:"assert(isBalanced(testCases[17]), '<code>isBalanced(\"\")</code> should return true.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function isBalanced (str) {\n  // Good luck!\n  return true;\n}",head:"",tail:"const testCases = [\n  '[]',\n  ']][[[][][][]][',\n  '[][[[[][][[[]]]]]]',\n  '][',\n  '[[[]]]][[]',\n  '][[]',\n  '][[][]][[[]]',\n  '[[][]]][',\n  '[[[]]][[]]]][][[',\n  '[]][[]]][[[[][]]',\n  '][]][[][',\n  '[[]][[][]]',\n  '[[]]',\n  ']][]][[]][[[',\n  '][]][][[',\n  '][][',\n  '[[]]][][][[]][',\n  ''\n];"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/circles-of-given-radius-through-two-points",id:"594dc6c729e5700999302b45"},slug:"/coding-interview-prep/rosetta-code/balanced-brackets"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-balanced-brackets-a2077358caf36724c62e.js.map