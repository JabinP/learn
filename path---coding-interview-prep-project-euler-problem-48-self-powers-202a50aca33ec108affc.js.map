{"version":3,"sources":["webpack:///path---coding-interview-prep-project-euler-problem-48-self-powers-202a50aca33ec108affc.js","webpack:///./.cache/json/coding-interview-prep-project-euler-problem-48-self-powers.json"],"names":["webpackJsonp","3283","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,0BAAAC,aAAA,yNAAAC,cAAA,EAAAC,QAAsSC,KAAA,8DAAAC,UAAA,gBAAAC,QAA2GC,KAAA,oDAAAC,WAAA,qGAA6KD,KAAA,uDAAAC,WAAA,2GAAsLD,KAAA,yDAAAC,WAAA,+GAA4LD,KAAA,8DAAAC,WAAA,0HAA2MC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,wGAA2JC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,qEAAAC,GAAA,4BAAsKrB,KAAA","file":"path---coding-interview-prep-project-euler-problem-48-self-powers-202a50aca33ec108affc.js","sourcesContent":["webpackJsonp([26951211694504],{\n\n/***/ 3283:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 48: Self powers\",\"description\":[\"The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317.\",\"Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>.\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-48-self-powers\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>selfPowers(10, 3)</code> should return 317.\",\"testString\":\"assert.strictEqual(selfPowers(10, 3), 317, '<code>selfPowers(10, 3)</code> should return 317.');\"},{\"text\":\"<code>selfPowers(150, 6)</code> should return 29045.\",\"testString\":\"assert.strictEqual(selfPowers(150, 6), 29045, '<code>selfPowers(150, 6)</code> should return 29045.');\"},{\"text\":\"<code>selfPowers(673, 7)</code> should return 2473989.\",\"testString\":\"assert.strictEqual(selfPowers(673, 7), 2473989, '<code>selfPowers(673, 7)</code> should return 2473989.');\"},{\"text\":\"<code>selfPowers(1000, 10)</code> should return 9110846700.\",\"testString\":\"assert.strictEqual(selfPowers(1000, 10), 9110846700, '<code>selfPowers(1000, 10)</code> should return 9110846700.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function selfPowers(power, lastDigits) {\\n  // Good luck!\\n  return true;\\n}\\n\\nselfPowers(1000, 10);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-49-prime-permutations\",\"id\":\"5900f39c1000cf542c50feaf\"},\"slug\":\"/coding-interview-prep/project-euler/problem-48-self-powers\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-project-euler-problem-48-self-powers-202a50aca33ec108affc.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 48: Self powers\",\"description\":[\"The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317.\",\"Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>.\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-48-self-powers\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>selfPowers(10, 3)</code> should return 317.\",\"testString\":\"assert.strictEqual(selfPowers(10, 3), 317, '<code>selfPowers(10, 3)</code> should return 317.');\"},{\"text\":\"<code>selfPowers(150, 6)</code> should return 29045.\",\"testString\":\"assert.strictEqual(selfPowers(150, 6), 29045, '<code>selfPowers(150, 6)</code> should return 29045.');\"},{\"text\":\"<code>selfPowers(673, 7)</code> should return 2473989.\",\"testString\":\"assert.strictEqual(selfPowers(673, 7), 2473989, '<code>selfPowers(673, 7)</code> should return 2473989.');\"},{\"text\":\"<code>selfPowers(1000, 10)</code> should return 9110846700.\",\"testString\":\"assert.strictEqual(selfPowers(1000, 10), 9110846700, '<code>selfPowers(1000, 10)</code> should return 9110846700.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function selfPowers(power, lastDigits) {\\n  // Good luck!\\n  return true;\\n}\\n\\nselfPowers(1000, 10);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-49-prime-permutations\",\"id\":\"5900f39c1000cf542c50feaf\"},\"slug\":\"/coding-interview-prep/project-euler/problem-48-self-powers\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-project-euler-problem-48-self-powers.json\n// module id = 3283\n// module chunks = 26951211694504"],"sourceRoot":""}