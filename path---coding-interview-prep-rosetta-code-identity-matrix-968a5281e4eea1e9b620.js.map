{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-identity-matrix-968a5281e4eea1e9b620.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-identity-matrix.json"],"names":["webpackJsonp","3409","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,kBAAAC,aAAA,4QAAmT,2GAAAC,cAAA,EAAAC,QAAyIC,KAAA,sDAAAC,UAAA,eAAAC,QAAkGC,KAAA,gDAAAC,WAAA,uFAA2JD,KAAA,qDAAAC,WAAA,2FAAoKD,KAAA,wFAAAC,WAAA,oIAAgPD,KAAA,wFAAAC,WAAA,oIAAgPD,KAAA,wFAAAC,WAAA,oIAAgPD,KAAA,wFAAAC,WAAA,qIAAgPC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,8CAAiGC,KAAA,GAAAC,KAAA,qKAAuLC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,+DAAAC,GAAA,4BAAgKrB,KAAA","file":"path---coding-interview-prep-rosetta-code-identity-matrix-968a5281e4eea1e9b620.js","sourcesContent":["webpackJsonp([50528781862568],{\n\n/***/ 3409:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Identity matrix\",\"description\":[\"An <i>identity matrix</i> is a square matrix of size \\\\( n \\\\times n \\\\),\",\"where the diagonal elements are all <b>1</b>s (ones),\",\"and all the other elements are all <b>0</b>s (zeroes).\",\"\\\\begin{bmatrix} 1 & 0 & 0 \\\\cr 0 & 1 & 0 \\\\cr 0 & 0 & 1 \\\\cr \\\\end{bmatrix}\",\"Write a function that takes a number 'n' as a parameter and returns the identity matrix of order n x n.\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/identity-matrix\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"'<code>idMatrix</code> should be a function.'\",\"testString\":\"assert(typeof idMatrix=='function','<code>idMatrix</code> should be a function.');\"},{\"text\":\"'<code>idMatrix(1)</code> should return an array.'\",\"testString\":\"assert(Array.isArray(idMatrix(1)),'<code>idMatrix(1)</code> should return an array.');\"},{\"text\":\"'<code>idMatrix(1)</code> should return <code>'+JSON.stringify(results[0])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(1),results[0],'<code>idMatrix(1)</code> should return <code>'+JSON.stringify(results[0])+'</code>.');\"},{\"text\":\"'<code>idMatrix(2)</code> should return <code>'+JSON.stringify(results[1])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(2),results[1],'<code>idMatrix(2)</code> should return <code>'+JSON.stringify(results[1])+'</code>.');\"},{\"text\":\"'<code>idMatrix(3)</code> should return <code>'+JSON.stringify(results[2])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(3),results[2],'<code>idMatrix(3)</code> should return <code>'+JSON.stringify(results[2])+'</code>.');\"},{\"text\":\"'<code>idMatrix(4)</code> should return <code>'+JSON.stringify(results[3])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(4),results[3],'<code>idMatrix(4)</code> should return <code>'+JSON.stringify(results[3])+'</code>.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function idMatrix (n) {\\n  // Good luck!\\n}\",\"head\":\"\",\"tail\":\"let results=[[ [ 1 ] ],\\n[ [ 1, 0 ], [ 0, 1 ] ],\\n[ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ],\\n[ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ]]\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/iterated-digits-squaring\",\"id\":\"5a23c84252665b21eecc7eb1\"},\"slug\":\"/coding-interview-prep/rosetta-code/identity-matrix\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-identity-matrix-968a5281e4eea1e9b620.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Identity matrix\",\"description\":[\"An <i>identity matrix</i> is a square matrix of size \\\\( n \\\\times n \\\\),\",\"where the diagonal elements are all <b>1</b>s (ones),\",\"and all the other elements are all <b>0</b>s (zeroes).\",\"\\\\begin{bmatrix} 1 & 0 & 0 \\\\cr 0 & 1 & 0 \\\\cr 0 & 0 & 1 \\\\cr \\\\end{bmatrix}\",\"Write a function that takes a number 'n' as a parameter and returns the identity matrix of order n x n.\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/identity-matrix\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"'<code>idMatrix</code> should be a function.'\",\"testString\":\"assert(typeof idMatrix=='function','<code>idMatrix</code> should be a function.');\"},{\"text\":\"'<code>idMatrix(1)</code> should return an array.'\",\"testString\":\"assert(Array.isArray(idMatrix(1)),'<code>idMatrix(1)</code> should return an array.');\"},{\"text\":\"'<code>idMatrix(1)</code> should return <code>'+JSON.stringify(results[0])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(1),results[0],'<code>idMatrix(1)</code> should return <code>'+JSON.stringify(results[0])+'</code>.');\"},{\"text\":\"'<code>idMatrix(2)</code> should return <code>'+JSON.stringify(results[1])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(2),results[1],'<code>idMatrix(2)</code> should return <code>'+JSON.stringify(results[1])+'</code>.');\"},{\"text\":\"'<code>idMatrix(3)</code> should return <code>'+JSON.stringify(results[2])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(3),results[2],'<code>idMatrix(3)</code> should return <code>'+JSON.stringify(results[2])+'</code>.');\"},{\"text\":\"'<code>idMatrix(4)</code> should return <code>'+JSON.stringify(results[3])+'</code>.'\",\"testString\":\"assert.deepEqual(idMatrix(4),results[3],'<code>idMatrix(4)</code> should return <code>'+JSON.stringify(results[3])+'</code>.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function idMatrix (n) {\\n  // Good luck!\\n}\",\"head\":\"\",\"tail\":\"let results=[[ [ 1 ] ],\\n[ [ 1, 0 ], [ 0, 1 ] ],\\n[ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ],\\n[ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ]]\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/iterated-digits-squaring\",\"id\":\"5a23c84252665b21eecc7eb1\"},\"slug\":\"/coding-interview-prep/rosetta-code/identity-matrix\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-identity-matrix.json\n// module id = 3409\n// module chunks = 50528781862568"],"sourceRoot":""}