webpackJsonp([0xf57cbd68a1fe],{3969:function(e,o){e.exports={data:{challengeNode:{title:"Understand the Prototype Chain",description:["JavaScript 中所有的对象（除了少数例外）都有自己的<code>原型</code>。而且，对象的<code>原型</code>本身也是一个对象。","<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>typeof Bird.prototype; // => object</blockquote>","正因为<code>原型</code>是一个对象，所以<code>原型</code>对象也有它自己的<code>原型</code>！这样看来的话，<code>Bird.prototype</code>的<code>原型</code>就是<code>Object.prototype</code>：","<blockquote>Object.prototype.isPrototypeOf(Bird.prototype);<br>// 返回 true</blockquote>","这有什么作用呢？你可能还记得我们在上一个挑战中学到的<code>hasOwnProperty</code>方法：",'<blockquote>let duck = new Bird("Donald");<br>duck.hasOwnProperty("name"); // => true</blockquote>',"<code>hasOwnProperty</code>是定义在<code>Object.prototype</code>上的一个方法，尽管在<code>Bird.prototype</code>和<code>duck</code>上并没有定义该方法，但是我们依然可以在这两个对象上访问到。这就是一个<code>原型</code>链。","在这个<code>原型</code>链中，<code>Bird</code>构造函数是<code>父级</code>，<code>duck</code>是<code>子级</code>。<code>Object</code>则是<code>Bird</code>构造函数和<code>duck</code>实例共同的<code>父级</code>。","<code>Object</code>是 JavaScript 中所有对象的<code>父级</code>，也就是原型链的最顶层。因此，所有对象都可以访问<code>hasOwnProperty</code>方法。","<hr>","修改以下代码使其展示出正确的原型链。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain",blockName:"Object Oriented Programming",tests:[{text:"你的代码应该展示<code>Object.prototype</code>是<code>Dog.prototype</code>的原型。",testString:'assert(/Object\\.prototype\\.isPrototypeOf/.test(code), "你的代码应该展示<code>Object.prototype</code>是<code>Dog.prototype</code>的原型。");'}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog("Snoopy");\n\nDog.prototype.isPrototypeOf(beagle);  // => true\n\n// 修改以下代码使其结果返回 true\n???.isPrototypeOf(Dog.prototype);\n',head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself",id:"587d7db0367417b2b2512b82"},slug:"/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-object-oriented-programming-understand-the-prototype-chain-ad651ccaf1f5bae1eecb.js.map