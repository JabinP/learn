webpackJsonp([79246914833055],{3625:function(e,t){e.exports={data:{challengeNode:{title:"Remove an Item from an Array",description:["Time to practice removing items from an array. The spread operator can be used here as well. Other useful JavaScript methods include <code>slice()</code> and <code>concat()</code>.","<hr>","The reducer and action creator were modified to remove an item from an array based on the index of the item. Finish writing the reducer so a new state array is returned with the item at the specific index removed."],challengeType:6,fields:{slug:"/front-end-libraries/redux/remove-an-item-from-an-array",blockName:"Redux",tests:[{text:"The Redux store should exist and initialize with a state equal to <code>[0,1,2,3,4,5]</code>",testString:"assert((function() { const initialState = store.getState(); return (Array.isArray(initialState) === true && DeepEqual(initialState, [0, 1, 2, 3, 4, 5])); })(), 'The Redux store should exist and initialize with a state equal to <code>[0,1,2,3,4,5]</code>');"},{text:"<code>removeItem</code> and <code>immutableReducer</code> both should be functions.",testString:"assert(typeof removeItem === 'function' && typeof immutableReducer === 'function', '<code>removeItem</code> and <code>immutableReducer</code> both should be functions.');"},{text:"Dispatching the <code>removeItem</code> action creator should remove items from the state and should NOT mutate state.",testString:"assert((function() { const initialState = store.getState(); const isFrozen = DeepFreeze(initialState); store.dispatch(removeItem(3)); const state_1 = store.getState(); store.dispatch(removeItem(2)); const state_2 = store.getState(); store.dispatch(removeItem(0)); store.dispatch(removeItem(0)); store.dispatch(removeItem(0)); const state_3 = store.getState(); return isFrozen && DeepEqual(state_1, [0, 1, 2, 4, 5]) && DeepEqual(state_2, [0, 1, 4, 5]) && DeepEqual(state_3, [5]); })(), 'Dispatching the <code>removeItem</code> action creator should remove items from the state and should NOT mutate state.');"}]},required:[{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],files:{indexhtml:null,indexjs:null,indexjsx:{key:"indexjsx",ext:"jsx",name:"index",contents:"const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      // don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);",head:"",tail:""}}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{link:null,raw:null,src:"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],nextChallengePath:"/front-end-libraries/redux/copy-an-object-with-object-assign",id:"5a24c314108439a4d403615a"},slug:"/front-end-libraries/redux/remove-an-item-from-an-array"}}}});
//# sourceMappingURL=path---front-end-libraries-redux-remove-an-item-from-an-array-fc40bb9c5a3c84e107f2.js.map