webpackJsonp([0xc6a1ce683ecd],{3885:function(e,t){e.exports={data:{challengeNode:{title:"Use class Syntax to Define a Constructor Function",description:["ES6 提供了一个新的创建对象的语法，使用关键字<code>class</code>。","值得注意的是，<code>class</code>只是一个语法糖，它并不像 Java、Python 或者 Ruby 这一类的语言一样，严格履行了面向对象的开发规范。","在 ES5 里面，我们通常会定义一个构造函数，然后使用 <code>new</code> 关键字来实例化一个对象：","<blockquote>var SpaceShuttle = function(targetPlanet){<br>&nbsp;&nbsp;this.targetPlanet = targetPlanet;<br>}<br>var zeus = new SpaceShuttle('Jupiter');</blockquote>","<code>class</code>的语法只是简单地替换了构造函数的写法：","<blockquote>class SpaceShuttle {<br>&nbsp;&nbsp;constructor(targetPlanet){<br>&nbsp;&nbsp;&nbsp;&nbsp;this.targetPlanet = targetPlanet;<br>&nbsp;&nbsp;}<br>}<br>const zeus = new SpaceShuttle('Jupiter');</blockquote>","注意<code>class</code>关键字声明了一个新的函数，并在其中添加了一个会在使用<code>new</code>关键字创建新对象时调用的构造函数。","<hr>","使用<code>class</code>关键字，并写出正确的构造函数，来创建<code>Vegetable</code>这个类：","<code>Vegetable</code>这个类可以创建 vegetable 对象，这个对象拥有一个在构造函数中赋值的<code>name</code>属性。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function",blockName:"ES6",tests:[{text:"<code>Vegetable</code> 应该是一个 <code>class</code>，并在其中定义了<code>constructor</code>方法。",testString:"assert(typeof Vegetable === 'function' && typeof Vegetable.constructor === 'function', '<code>Vegetable</code> 应该是一个 <code>class</code>，并在其中定义了<code>constructor</code>方法。');"},{text:"使用了<code>class</code>关键字。",testString:"getUserInput => assert(getUserInput('index').match(/class/g),'使用了<code>class</code>关键字。');"},{text:"<code>Vegetable</code>可以被实例化。",testString:"assert(() => {const a = new Vegetable(\"apple\"); return typeof a === 'object';},'<code>Vegetable</code>可以被实例化。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function makeClass() {\n  \"use strict\";\n  /* 在这行下面改写代码 */\n\n  /* 在这行上面改写代码 */\n  return Vegetable;\n}\nconst Vegetable = makeClass();\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // => 应该显示 'carrot'",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/es6/use-getters-and-setters-to-control-access-to-an-object",id:"587d7b8b367417b2b2512b53"},slug:"/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-es-6-use-class-syntax-to-define-a-constructor-function-73b311e9178043fa846b.js.map