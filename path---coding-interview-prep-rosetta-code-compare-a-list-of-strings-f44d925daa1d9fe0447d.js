webpackJsonp([3015510525350],{3360:function(e,t){e.exports={data:{challengeNode:{title:"Compare a list of strings",description:['<p>Given a  <a href="https://en.wikipedia.org/wiki/List_(abstract_data_type)" title="wp: List_(abstract_data_type)">list</a>  of arbitrarily many strings, implement a function for each of the following conditions:</p> test if they are all lexically equal'," test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/compare-a-list-of-strings",blockName:"Rosetta Code",tests:[{text:"<code>allEqual</code> is a function.",testString:"assert(typeof allEqual === 'function', '<code>allEqual</code> is a function.');"},{text:"<code>azSorted</code> is a function.",testString:"assert(typeof azSorted === 'function', '<code>azSorted</code> is a function.');"},{text:'<code>allEqual(["AA", "AA", "AA", "AA"])</code> returns true.',testString:'assert(allEqual(testCases[0]), \'<code>allEqual(["AA", "AA", "AA", "AA"])</code> returns true.\');'},{text:'<code>azSorted(["AA", "AA", "AA", "AA"])</code> returns false.',testString:'assert(!azSorted(testCases[0]), \'<code>azSorted(["AA", "AA", "AA", "AA"])</code> returns false.\');'},{text:'<code>allEqual(["AA", "ACB", "BB", "CC"])</code> returns false.',testString:'assert(!allEqual(testCases[1]), \'<code>allEqual(["AA", "ACB", "BB", "CC"])</code> returns false.\');'},{text:'<code>azSorted(["AA", "ACB", "BB", "CC"])</code> returns true.',testString:'assert(azSorted(testCases[1]), \'<code>azSorted(["AA", "ACB", "BB", "CC"])</code> returns true.\');'},{text:"<code>allEqual([])</code> returns true.",testString:"assert(allEqual(testCases[2]), '<code>allEqual([])</code> returns true.');"},{text:"<code>azSorted([])</code> returns true.",testString:"assert(azSorted(testCases[2]), '<code>azSorted([])</code> returns true.');"},{text:'<code>allEqual(["AA"])</code> returns true.',testString:"assert(allEqual(testCases[3]), '<code>allEqual([\"AA\"])</code> returns true.');"},{text:'<code>azSorted(["AA"])</code> returns true.',testString:"assert(azSorted(testCases[3]), '<code>azSorted([\"AA\"])</code> returns true.');"},{text:'<code>allEqual(["BB", "AA"])</code> returns false.',testString:'assert(!allEqual(testCases[4]), \'<code>allEqual(["BB", "AA"])</code> returns false.\');'},{text:'<code>azSorted(["BB", "AA"])</code> returns false.',testString:'assert(!azSorted(testCases[4]), \'<code>azSorted(["BB", "AA"])</code> returns false.\');'}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function allEqual (arr) {\n  // Good luck!\n  return true;\n}\n\nfunction azSorted (arr) {\n  // Good luck!\n  return true;\n}",head:"",tail:"const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/convert-seconds-to-compound-duration",id:"596e457071c35c882915b3e4"},slug:"/coding-interview-prep/rosetta-code/compare-a-list-of-strings"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-compare-a-list-of-strings-f44d925daa1d9fe0447d.js.map