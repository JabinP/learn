webpackJsonp([32524743250976],{2804:function(e,t){e.exports={data:{challengeNode:{title:"Implement Bubble Sort",description:["<a href='https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F' target='_blank'>冒泡排序</code>，将是你遇到的几个排序算法中的第一个。给定一个未排序的数组，我们期望能够返回的是一个有序的数组。我们将采用不同的几种方式来实现这个功能，并且了解到不同方式的优劣之处，找到最适合的方式来实现不同的应用环境。尽管大多数的现代编程语言在内部构建了这种排序方式并提供了相应的 API，但仍然很有必要了解一些基本的方法并且知道他们是如何完成实现的","现在我们来了解一下冒泡排序。冒泡排序方法从未排序的数组<em>开头</em>开始，并且将未排序的数组元素往后挪移，然后迭代数组，直到所有的数组元素都完全排序后才停止。这种方式是，通过比较相邻的元素然后置换元素完成排序。这种方式就是便利循环数组，直到整个数组没有元素交换为止，这样就完成了冒泡排序。这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。","这种方式通过多次迭代数组来完成操作，不管是平均还是最坏的情况，都是具有二次<a href='https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6' target='_blank'>时间复杂度</a>。尽管这个方式简单，但是在实际应用中，大多数情况下不切实际的：时间复杂度过高。","<strong>说明：</strong>创建一个函数并命名为<code>bubbleSort</code>，输入参数是一个数组，且数组元素全部都是整数类型，然后按照从最小到最大的顺序返回整个数组。","<strong>注意：</strong><br>我们将在后台调用这些函数，测试数组在编辑器中也是被注释掉了的。尝试记录输入<code>array</code>来确认你的冒泡排序算法是否正确。","如果你遇到了困难，请点击 <a href='https://forum.freecodecamp.one/t/topic/157'target='_blank'> 帮助 </a>。你可以找人 “结对编程”，但不要因此放弃思考。"],challengeType:1,fields:{slug:"/coding-interview-prep/algorithms/implement-bubble-sort",blockName:"Algorithms",tests:[{text:"<code>bubbleSort</code>是一个函数。",testString:"assert(typeof bubbleSort =='function','<code>bubbleSort</code>是一个函数');"},{text:"<code>bubbleSort</code>返回的应该是按照从最小到最大的排序的数组。",testString:"assert(isSorted(bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])),'<code>bubbleSort</code>返回的应该是按照从最小到最大的排序的数组。');"},{text:"<code>bubbleSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。",testString:"assert.sameMembers(bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92],'<code>bubbleSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。');"},{text:"<code>bubbleSort</code>不要使用内置的排序方式：<code>.sort()</code>。",testString:"assert.strictEqual(code.search(/\\.sort\\(/), -1,'<code>bubbleSort</code>不要使用内置的排序方式：<code>.sort()</code>。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function bubbleSort(array) {\n// 请在下方区域编写代码\n\n// 请在上方区域编写代码\nreturn array;\n}\n\n// 测试数组：\n// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]",head:"",tail:"function isSorted(arr) {\n  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);\n  return check(0);\n};"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/algorithms/implement-selection-sort",id:"8d5123c8c441eddfaeb5bdef"},slug:"/coding-interview-prep/algorithms/implement-bubble-sort"}}}});
//# sourceMappingURL=path---coding-interview-prep-algorithms-implement-bubble-sort-7c9cc0388eba17057f40.js.map