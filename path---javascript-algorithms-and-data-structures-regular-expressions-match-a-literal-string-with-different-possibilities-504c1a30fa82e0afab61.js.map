{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-regular-expressions-match-a-literal-string-with-different-possibilities-504c1a30fa82e0afab61.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-regular-expressions-match-a-literal-string-with-different-possibilities.json"],"names":["webpackJsonp","3986","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,sDAAAC,aAAA,2bAAAC,cAAA,EAAAC,QAAkjBC,KAAA,qHAAAC,UAAA,sBAAAC,QAAwKC,KAAA,iHAAAC,WAAA,sKAA6SD,KAAA,mHAAAC,WAAA,0KAAmTD,KAAA,kHAAAC,WAAA,wKAAgTD,KAAA,gHAAAC,WAAA,oKAA0SD,KAAA,sHAAAC,WAAA,gLAA4TD,KAAA,mHAAAC,WAAA,0KAAmTD,KAAA,wHAAAC,WAAA,qLAAkUC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,qHAA0KC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,4FAAAC,GAAA,4BAA6LrB,KAAA","file":"path---javascript-algorithms-and-data-structures-regular-expressions-match-a-literal-string-with-different-possibilities-504c1a30fa82e0afab61.js","sourcesContent":["webpackJsonp([176284732647890],{\n\n/***/ 3986:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Match a Literal String with Different Possibilities\",\"description\":[\"使用正则表达式<code>/coding/</code>，你可以在其他字符串中查找<code>\\\"coding\\\"</code>。\",\"这对于搜寻单个字符串非常有用，但仅限于一种匹配模式。你可以使用<code>|</code>操作符来匹配多个规则。\",\"此操作符匹配在它之前或之后的匹配模式。例如，如果你想匹配<code>\\\"yes\\\"</code>或<code>\\\"no\\\"</code>，你需要的正则表达式是<code>/yes|no/</code>。\",\"你还可以匹配多个规则，这可以通过添加更多的匹配模式来实现。这些匹配模式将包含更多的<code>|</code>操作符来分隔它们，比如<code>/yes|no|maybe/</code>。\",\"<hr>\",\"完成正则表达式<code>petRegex</code>以匹配<code>\\\"dog\\\"</code>、<code>\\\"cat\\\"</code>、<code>\\\"bird\\\"</code>或者<code>\\\"fish\\\"</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities\",\"blockName\":\"Regular Expressions\",\"tests\":[{\"text\":\"对于字符串<code>\\\"John has a pet dog.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('John has a pet dog.'), '对于字符串<code>\\\"John has a pet dog.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Emma has a pet rock.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。\",\"testString\":\"assert(!petRegex.test('Emma has a pet rock.'), '对于字符串<code>\\\"Emma has a pet rock.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。');\"},{\"text\":\"对于字符串<code>\\\"Emma has a pet bird.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('Emma has a pet bird.'), '对于字符串<code>\\\"Emma has a pet bird.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Liz has a pet cat.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('Liz has a pet cat.'), '对于字符串<code>\\\"Liz has a pet cat.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Kara has a pet dolphin.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。\",\"testString\":\"assert(!petRegex.test('Kara has a pet dolphin.'), '对于字符串<code>\\\"Kara has a pet dolphin.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。');\"},{\"text\":\"对于字符串<code>\\\"Alice has a pet fish.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('Alice has a pet fish.'), '对于字符串<code>\\\"Alice has a pet fish.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Jimmy has a pet computer.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。\",\"testString\":\"assert(!petRegex.test('Jimmy has a pet computer.'), '对于字符串<code>\\\"Jimmy has a pet computer.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let petString = \\\"James has a pet cat.\\\";\\nlet petRegex = /change/; // 修改这一行\\nlet result = petRegex.test(petString);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching\",\"id\":\"587d7db4367417b2b2512b90\"},\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-regular-expressions-match-a-literal-string-with-different-possibilities-504c1a30fa82e0afab61.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Match a Literal String with Different Possibilities\",\"description\":[\"使用正则表达式<code>/coding/</code>，你可以在其他字符串中查找<code>\\\"coding\\\"</code>。\",\"这对于搜寻单个字符串非常有用，但仅限于一种匹配模式。你可以使用<code>|</code>操作符来匹配多个规则。\",\"此操作符匹配在它之前或之后的匹配模式。例如，如果你想匹配<code>\\\"yes\\\"</code>或<code>\\\"no\\\"</code>，你需要的正则表达式是<code>/yes|no/</code>。\",\"你还可以匹配多个规则，这可以通过添加更多的匹配模式来实现。这些匹配模式将包含更多的<code>|</code>操作符来分隔它们，比如<code>/yes|no|maybe/</code>。\",\"<hr>\",\"完成正则表达式<code>petRegex</code>以匹配<code>\\\"dog\\\"</code>、<code>\\\"cat\\\"</code>、<code>\\\"bird\\\"</code>或者<code>\\\"fish\\\"</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities\",\"blockName\":\"Regular Expressions\",\"tests\":[{\"text\":\"对于字符串<code>\\\"John has a pet dog.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('John has a pet dog.'), '对于字符串<code>\\\"John has a pet dog.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Emma has a pet rock.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。\",\"testString\":\"assert(!petRegex.test('Emma has a pet rock.'), '对于字符串<code>\\\"Emma has a pet rock.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。');\"},{\"text\":\"对于字符串<code>\\\"Emma has a pet bird.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('Emma has a pet bird.'), '对于字符串<code>\\\"Emma has a pet bird.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Liz has a pet cat.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('Liz has a pet cat.'), '对于字符串<code>\\\"Liz has a pet cat.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Kara has a pet dolphin.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。\",\"testString\":\"assert(!petRegex.test('Kara has a pet dolphin.'), '对于字符串<code>\\\"Kara has a pet dolphin.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。');\"},{\"text\":\"对于字符串<code>\\\"Alice has a pet fish.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。\",\"testString\":\"assert(petRegex.test('Alice has a pet fish.'), '对于字符串<code>\\\"Alice has a pet fish.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>true</code>。');\"},{\"text\":\"对于字符串<code>\\\"Jimmy has a pet computer.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。\",\"testString\":\"assert(!petRegex.test('Jimmy has a pet computer.'), '对于字符串<code>\\\"Jimmy has a pet computer.\\\"</code>，你的正则表达式<code>petRegex</code>的<code>test</code>方法应该返回<code>false</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let petString = \\\"James has a pet cat.\\\";\\nlet petRegex = /change/; // 修改这一行\\nlet result = petRegex.test(petString);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching\",\"id\":\"587d7db4367417b2b2512b90\"},\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-regular-expressions-match-a-literal-string-with-different-possibilities.json\n// module id = 3986\n// module chunks = 176284732647890"],"sourceRoot":""}