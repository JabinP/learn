{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-on-an-api-response-using-chai-http-iv-put-method-9e6e23a109786b02bcb5.js","webpack:///./.cache/json/information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-on-an-api-response-using-chai-http-iv-put-method.json"],"names":["webpackJsonp","3693","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,0EAAAC,SAAA,KAAAC,aAAA,uaAAue,kHAAAC,cAAA,EAAAC,QAA+LC,UAAA,0CAAAC,KAAA,8JAAAC,QAAqOC,KAAA,wBAAAC,WAAA,2LAAuOD,KAAA,6CAAAC,WAAA,kTAAmXD,KAAA,0DAAAC,WAAA,mUAAiZD,KAAA,uDAAAC,WAAA,gUAA2YD,KAAA,+DAAAC,WAAA,2UAA6ZC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,oIAAAC,GAAA,4BAAqOV,KAAA","file":"path---information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-on-an-api-response-using-chai-http-iv-put-method-9e6e23a109786b02bcb5.js","sourcesContent":["webpackJsonp([83345866399550],{\n\n/***/ 3693:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Run Functional Tests on an API Response using Chai-HTTP IV - PUT method\",\"guideUrl\":null,\"description\":[\"As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.\",\"This exercise is similar to the preceding. Look at it for the details.\",\"Send {surname: 'da Verrazzano'}. Replace assert.fail() and make the test pass.\",\"Check for 1) status, 2) type, 3) body.name, 4) body.surname\",\"Follow the assertion order above, We rely on it.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Quality Assurance and Testing with Chai\",\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-on-an-api-response-using-chai-http-iv---put-method\",\"tests\":[{\"text\":\"All tests should pass\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.status' to be 200\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[0].method, 'equal'); assert.equal(data.assertions[0].args[0], 'res.status'); assert.equal(data.assertions[0].args[1], '200');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.type' to be 'application/json'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[1].method, 'equal'); assert.equal(data.assertions[1].args[0], 'res.type'); assert.equal(data.assertions[1].args[1], '\\\\'application/json\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.body.name' to be 'Giovanni'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[2].method, 'equal'); assert.equal(data.assertions[2].args[0], 'res.body.name'); assert.equal(data.assertions[2].args[1], '\\\\'Giovanni\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.body.surname' to be 'da Verrazzano'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[3].method, 'equal'); assert.equal(data.assertions[3].args[0], 'res.body.surname'); assert.equal(data.assertions[3].args[1], '\\\\'da Verrazzano\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser\",\"id\":\"587d824f367417b2b2512c5b\"},\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-on-an-api-response-using-chai-http-iv---put-method\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-on-an-api-response-using-chai-http-iv-put-method-9e6e23a109786b02bcb5.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Run Functional Tests on an API Response using Chai-HTTP IV - PUT method\",\"guideUrl\":null,\"description\":[\"As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.\",\"This exercise is similar to the preceding. Look at it for the details.\",\"Send {surname: 'da Verrazzano'}. Replace assert.fail() and make the test pass.\",\"Check for 1) status, 2) type, 3) body.name, 4) body.surname\",\"Follow the assertion order above, We rely on it.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Quality Assurance and Testing with Chai\",\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-on-an-api-response-using-chai-http-iv---put-method\",\"tests\":[{\"text\":\"All tests should pass\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.status' to be 200\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[0].method, 'equal'); assert.equal(data.assertions[0].args[0], 'res.status'); assert.equal(data.assertions[0].args[1], '200');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.type' to be 'application/json'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[1].method, 'equal'); assert.equal(data.assertions[1].args[0], 'res.type'); assert.equal(data.assertions[1].args[1], '\\\\'application/json\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.body.name' to be 'Giovanni'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[2].method, 'equal'); assert.equal(data.assertions[2].args[0], 'res.body.name'); assert.equal(data.assertions[2].args[1], '\\\\'Giovanni\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"You should test for 'res.body.surname' to be 'da Verrazzano'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=3').then(data => { assert.equal(data.assertions[3].method, 'equal'); assert.equal(data.assertions[3].args[0], 'res.body.surname'); assert.equal(data.assertions[3].args[1], '\\\\'da Verrazzano\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser\",\"id\":\"587d824f367417b2b2512c5b\"},\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-on-an-api-response-using-chai-http-iv---put-method\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-on-an-api-response-using-chai-http-iv-put-method.json\n// module id = 3693\n// module chunks = 83345866399550"],"sourceRoot":""}