{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-javascript-global-scope-and-functions-6d24880ab3f221c304be.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-global-scope-and-functions.json"],"names":["webpackJsonp","3801","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6BAAAC,aAAA,kaAAAC,cAAA,EAAAC,QAAkfC,KAAA,yFAAAC,UAAA,mBAAAC,QAAyIC,KAAA,4BAAAC,WAAA,2EAA2HD,KAAA,4CAAAC,WAAA,0EAA0ID,KAAA,iDAAAC,WAAA,4FAAiKD,KAAA,kDAAAC,WAAA,wHAA6LC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,0UAAuYC,KAAA,kgBAAygBC,KAAA,uGAAiHC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,wFAAAC,GAAA,4BAAyLrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-javascript-global-scope-and-functions-6d24880ab3f221c304be.js","sourcesContent":["webpackJsonp([43599383040271],{\n\n/***/ 3801:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Global Scope and Functions\",\"description\":[\"在 JavaScript 中，<dfn>作用域</dfn>涉及到变量的作用范围。在函数外定义的变量具有 <dfn>全局</dfn> 作用域。这意味着，具有全局作用域的变量可以在代码的任何地方被调用。\",\"这些没有使用<code>var</code>关键字定义的变量，会被自动创建在全局作用域中，形成全局变量。当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。因此你应该总是使用var关键字来声明你的变量。\",\"<hr>\",\"在函数外声明一个<code>全局</code>变量<code>myGlobal</code>，并给它一个初始值<code>10</code>\",\"在函数<code>fun1</code>的内部，<strong>不</strong>使用<code>var</code>关键字来声明<code>oopsGlobal</code>，并赋值为<code>5</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"应定义<code>myGlobal</code>。\",\"testString\":\"assert(typeof myGlobal != \\\"undefined\\\", '应定义<code>myGlobal</code>。');\"},{\"text\":\"<code>myGlobal</code>的值应为<code>10</code>。\",\"testString\":\"assert(myGlobal === 10, '<code>myGlobal</code>的值应为<code>10</code>。');\"},{\"text\":\"应使用<code>var</code>关键字定义<code>myGlobal</code>。\",\"testString\":\"assert(/var\\\\s+myGlobal/.test(code), '应使用<code>var</code>关键字定义<code>myGlobal</code>。');\"},{\"text\":\"<code>oopsGlobal</code>应为全局变量且值为<code>5</code>。\",\"testString\":\"assert(typeof oopsGlobal != \\\"undefined\\\" && oopsGlobal === 5, '<code>oopsGlobal</code>应为全局变量且值为<code>5</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 声明变量\\n\\n\\nfunction fun1() {\\n  // 把 5 赋给 oopsGlobal\\n  \\n}\\n\\n// 请把你的代码写在这条注释以上\\nfunction fun2() {\\n  var output = \\\"\\\";\\n  if (typeof myGlobal != \\\"undefined\\\") {\\n    output += \\\"myGlobal: \\\" + myGlobal;\\n  }\\n  if (typeof oopsGlobal != \\\"undefined\\\") {\\n    output += \\\" oopsGlobal: \\\" + oopsGlobal;\\n  }\\n  console.log(output);\\n}\",\"head\":\"var logOutput = \\\"\\\";\\nvar originalConsole = console\\nfunction capture() {\\n    var nativeLog = console.log;\\n    console.log = function (message) {\\n        logOutput = message;\\n        if(nativeLog.apply) {\\n          nativeLog.apply(originalConsole, arguments);\\n        } else {\\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\\n          nativeLog(nativeMsg);\\n        }\\n    };\\n}\\n\\nfunction uncapture() {\\n  console.log = originalConsole.log;\\n}\\nvar oopsGlobal;\\ncapture();\",\"tail\":\"fun1();\\nfun2();\\nuncapture();\\n(function() { return logOutput || \\\"console.log never called\\\"; })();\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/local-scope-and-functions\",\"id\":\"56533eb9ac21ba0edf2244be\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-javascript-global-scope-and-functions-6d24880ab3f221c304be.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Global Scope and Functions\",\"description\":[\"在 JavaScript 中，<dfn>作用域</dfn>涉及到变量的作用范围。在函数外定义的变量具有 <dfn>全局</dfn> 作用域。这意味着，具有全局作用域的变量可以在代码的任何地方被调用。\",\"这些没有使用<code>var</code>关键字定义的变量，会被自动创建在全局作用域中，形成全局变量。当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。因此你应该总是使用var关键字来声明你的变量。\",\"<hr>\",\"在函数外声明一个<code>全局</code>变量<code>myGlobal</code>，并给它一个初始值<code>10</code>\",\"在函数<code>fun1</code>的内部，<strong>不</strong>使用<code>var</code>关键字来声明<code>oopsGlobal</code>，并赋值为<code>5</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"应定义<code>myGlobal</code>。\",\"testString\":\"assert(typeof myGlobal != \\\"undefined\\\", '应定义<code>myGlobal</code>。');\"},{\"text\":\"<code>myGlobal</code>的值应为<code>10</code>。\",\"testString\":\"assert(myGlobal === 10, '<code>myGlobal</code>的值应为<code>10</code>。');\"},{\"text\":\"应使用<code>var</code>关键字定义<code>myGlobal</code>。\",\"testString\":\"assert(/var\\\\s+myGlobal/.test(code), '应使用<code>var</code>关键字定义<code>myGlobal</code>。');\"},{\"text\":\"<code>oopsGlobal</code>应为全局变量且值为<code>5</code>。\",\"testString\":\"assert(typeof oopsGlobal != \\\"undefined\\\" && oopsGlobal === 5, '<code>oopsGlobal</code>应为全局变量且值为<code>5</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 声明变量\\n\\n\\nfunction fun1() {\\n  // 把 5 赋给 oopsGlobal\\n  \\n}\\n\\n// 请把你的代码写在这条注释以上\\nfunction fun2() {\\n  var output = \\\"\\\";\\n  if (typeof myGlobal != \\\"undefined\\\") {\\n    output += \\\"myGlobal: \\\" + myGlobal;\\n  }\\n  if (typeof oopsGlobal != \\\"undefined\\\") {\\n    output += \\\" oopsGlobal: \\\" + oopsGlobal;\\n  }\\n  console.log(output);\\n}\",\"head\":\"var logOutput = \\\"\\\";\\nvar originalConsole = console\\nfunction capture() {\\n    var nativeLog = console.log;\\n    console.log = function (message) {\\n        logOutput = message;\\n        if(nativeLog.apply) {\\n          nativeLog.apply(originalConsole, arguments);\\n        } else {\\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\\n          nativeLog(nativeMsg);\\n        }\\n    };\\n}\\n\\nfunction uncapture() {\\n  console.log = originalConsole.log;\\n}\\nvar oopsGlobal;\\ncapture();\",\"tail\":\"fun1();\\nfun2();\\nuncapture();\\n(function() { return logOutput || \\\"console.log never called\\\"; })();\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/local-scope-and-functions\",\"id\":\"56533eb9ac21ba0edf2244be\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-global-scope-and-functions.json\n// module id = 3801\n// module chunks = 43599383040271"],"sourceRoot":""}