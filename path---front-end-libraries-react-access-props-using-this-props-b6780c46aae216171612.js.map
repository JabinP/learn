{"version":3,"sources":["webpack:///path---front-end-libraries-react-access-props-using-this-props-b6780c46aae216171612.js","webpack:///./.cache/json/front-end-libraries-react-access-props-using-this-props.json"],"names":["webpackJsonp","3555","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gCAAAC,aAAA,sRAAmU,6RAAAC,cAAA,EAAAC,QAAmUC,KAAA,2DAAAC,UAAA,QAAAC,QAAgGC,KAAA,wDAAAC,WAAA,uNAAmSD,KAAA,yEAAAC,WAAA,kQAA+VD,KAAA,wEAAAC,WAAA,2PAAuVD,KAAA,kGAAAC,WAAA,gVAAscD,KAAA,6GAAAC,WAAA,2UAA2cC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,uyBAA41BC,KAAA,GAAAC,KAAA,0EAA4FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,qFAAAC,GAAA,4BAA2IxB,KAAA","file":"path---front-end-libraries-react-access-props-using-this-props-b6780c46aae216171612.js","sourcesContent":["webpackJsonp([105419983095014],{\n\n/***/ 3555:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Access Props Using this.props\",\"description\":[\"前几项挑战涵盖了将 props 传递给子组件的基本方法。但是，倘若接收 prop 的子组件不是无状态函数组件，而是一个 ES6 类组件又当如何呢？ES6 类组件访问 props 的方法略有不同。\",\"任何时候，只要引用类组件本身，就要使用<code>this</code>关键字。要访问类组件中的 props，你需要在在访问它的代码前面添加<code>this</code>。例如，如果 ES6 类组件有一个名为<code>data</code>的 prop，你可以在 JSX 中这样写：<code>{this.props.data}</code>。\",\"<hr>\",\"在父组件<code>ResetPassword</code>中渲染<code>ReturnTempPassword</code>组件的一个实例。在这里，为<code>ReturnTempPassword</code>提供一个<code>tempPassword</code>prop，并赋值给 prop 一个长度至少为 8 个字符的字符串。在子组件<code>ReturnTempPassword</code>中，访问<code>strong</code>标签中的<code>tempPassword</code>prop，以确保用户看到临时密码。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/access-props-using-this-props\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>ResetPassword</code>组件应该返回单个<code>div</code>元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.children().type() === 'div'; })(), '<code>ResetPassword</code>组件应该返回单个<code>div</code>元素。');\"},{\"text\":\"<code>ResetPassword</code>的第四个子组件应该是<code>ReturnTempPassword</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.children().childAt(3).name() === 'ReturnTempPassword'; })(), '<code>ResetPassword</code>的第四个子组件应该是<code>ReturnTempPassword</code>组件。');\"},{\"text\":\"<code>ReturnTempPassword</code>组件应该有一个名为<code>tempPassword</code>的属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.find('ReturnTempPassword').props().tempPassword; })(), '<code>ReturnTempPassword</code>组件应该有一个名为<code>tempPassword</code>的属性。');\"},{\"text\":\"<code>ReturnTempPassword</code>组件的<code>tempPassword</code>prop 值应该是一个字符串，其长度至少为<code>8</code>。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); const temp = mockedComponent.find('ReturnTempPassword').props().tempPassword; return typeof temp === 'string' && temp.length >= 8; })(), '<code>ReturnTempPassword</code>组件的<code>tempPassword</code>prop 值应该是一个字符串，其长度至少为<code>8</code>。');\"},{\"text\":\"<code>ReturnTempPassword</code>组件应该显示你作为<code>tempPassword</code>prop 创建的密码，并且密码显示在<code>strong</code>标签中。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.find('strong').text() === mockedComponent.find('ReturnTempPassword').props().tempPassword; })(), '<code>ReturnTempPassword</code>组件应该显示你作为<code>tempPassword</code>prop 创建的密码，并且密码显示在<code>strong</code>标签中。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class ReturnTempPassword extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n  }\\n  render() {\\n    return (\\n        <div>\\n            { /* change code below this line */ }\\n            <p>Your temporary password is: <strong></strong></p>\\n            { /* change code above this line */ }\\n        </div>\\n    );\\n  }\\n};\\n\\nclass ResetPassword extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n  }\\n  render() {\\n    return (\\n        <div>\\n          <h2>Reset Password</h2>\\n          <h3>We've generated a new temporary password for you.</h3>\\n          <h3>Please reset this password from your account settings ASAP.</h3>\\n          { /* change code below this line */ }\\n\\n          { /* change code above this line */ }\\n        </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<ResetPassword />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/review-using-props-with-stateless-functional-components\",\"id\":\"5a24c314108439a4d403616e\"},\"slug\":\"/front-end-libraries/react/access-props-using-this-props\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-access-props-using-this-props-b6780c46aae216171612.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Access Props Using this.props\",\"description\":[\"前几项挑战涵盖了将 props 传递给子组件的基本方法。但是，倘若接收 prop 的子组件不是无状态函数组件，而是一个 ES6 类组件又当如何呢？ES6 类组件访问 props 的方法略有不同。\",\"任何时候，只要引用类组件本身，就要使用<code>this</code>关键字。要访问类组件中的 props，你需要在在访问它的代码前面添加<code>this</code>。例如，如果 ES6 类组件有一个名为<code>data</code>的 prop，你可以在 JSX 中这样写：<code>{this.props.data}</code>。\",\"<hr>\",\"在父组件<code>ResetPassword</code>中渲染<code>ReturnTempPassword</code>组件的一个实例。在这里，为<code>ReturnTempPassword</code>提供一个<code>tempPassword</code>prop，并赋值给 prop 一个长度至少为 8 个字符的字符串。在子组件<code>ReturnTempPassword</code>中，访问<code>strong</code>标签中的<code>tempPassword</code>prop，以确保用户看到临时密码。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/access-props-using-this-props\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>ResetPassword</code>组件应该返回单个<code>div</code>元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.children().type() === 'div'; })(), '<code>ResetPassword</code>组件应该返回单个<code>div</code>元素。');\"},{\"text\":\"<code>ResetPassword</code>的第四个子组件应该是<code>ReturnTempPassword</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.children().childAt(3).name() === 'ReturnTempPassword'; })(), '<code>ResetPassword</code>的第四个子组件应该是<code>ReturnTempPassword</code>组件。');\"},{\"text\":\"<code>ReturnTempPassword</code>组件应该有一个名为<code>tempPassword</code>的属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.find('ReturnTempPassword').props().tempPassword; })(), '<code>ReturnTempPassword</code>组件应该有一个名为<code>tempPassword</code>的属性。');\"},{\"text\":\"<code>ReturnTempPassword</code>组件的<code>tempPassword</code>prop 值应该是一个字符串，其长度至少为<code>8</code>。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); const temp = mockedComponent.find('ReturnTempPassword').props().tempPassword; return typeof temp === 'string' && temp.length >= 8; })(), '<code>ReturnTempPassword</code>组件的<code>tempPassword</code>prop 值应该是一个字符串，其长度至少为<code>8</code>。');\"},{\"text\":\"<code>ReturnTempPassword</code>组件应该显示你作为<code>tempPassword</code>prop 创建的密码，并且密码显示在<code>strong</code>标签中。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ResetPassword)); return mockedComponent.find('strong').text() === mockedComponent.find('ReturnTempPassword').props().tempPassword; })(), '<code>ReturnTempPassword</code>组件应该显示你作为<code>tempPassword</code>prop 创建的密码，并且密码显示在<code>strong</code>标签中。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class ReturnTempPassword extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n  }\\n  render() {\\n    return (\\n        <div>\\n            { /* change code below this line */ }\\n            <p>Your temporary password is: <strong></strong></p>\\n            { /* change code above this line */ }\\n        </div>\\n    );\\n  }\\n};\\n\\nclass ResetPassword extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n  }\\n  render() {\\n    return (\\n        <div>\\n          <h2>Reset Password</h2>\\n          <h3>We've generated a new temporary password for you.</h3>\\n          <h3>Please reset this password from your account settings ASAP.</h3>\\n          { /* change code below this line */ }\\n\\n          { /* change code above this line */ }\\n        </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<ResetPassword />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/review-using-props-with-stateless-functional-components\",\"id\":\"5a24c314108439a4d403616e\"},\"slug\":\"/front-end-libraries/react/access-props-using-this-props\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-access-props-using-this-props.json\n// module id = 3555\n// module chunks = 105419983095014"],"sourceRoot":""}