{"version":3,"sources":["webpack:///path---front-end-libraries-react-and-redux-getting-started-with-react-redux-91ce66264d9d8aa2dea9.js","webpack:///./.cache/json/front-end-libraries-react-and-redux-getting-started-with-react-redux.json"],"names":["webpackJsonp","3563","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,mCAAAC,aAAA,0uBAAAC,cAAA,EAAAC,QAAg0BC,KAAA,wEAAAC,UAAA,kBAAAC,QAAuHC,KAAA,yDAAAC,WAAA,uNAAoSD,KAAA,iFAAAC,WAAA,6RAAkYD,KAAA,+EAA8EC,WAAA,iYAAuZC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2GC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,iIAAsLC,KAAA,GAAAC,KAAA,4EAA8FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,sDAAuEjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2Ge,kBAAA,kEAAAC,GAAA,4BAAwHxB,KAAA","file":"path---front-end-libraries-react-and-redux-getting-started-with-react-redux-91ce66264d9d8aa2dea9.js","sourcesContent":["webpackJsonp([180682309398169],{\n\n/***/ 3563:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Getting Started with React Redux\",\"description\":[\"这一系列挑战介绍的是 Redux 和 React 的配合，我们先来回顾一下这两种技术的关键原则是什么。React 是提供数据的视图库，能以高效、可预测的方式渲染视图。Redux 是状态管理框架，可用于简化 APP 应用状态的管理。在 React Redux app 应用中，通常可创建单一的 Redux store 来管理整个应用的状态。React 组件仅订阅 store 中与其角色相关的数据，你可直接从 React 组件中分发 actions 以触发 store 对象的更新。\",\"React 组件可以在本地管理自己的状态，但是对于复杂的应用来说，它的状态最好是用 Redux 保存在单一位置，有特定本地状态的独立组件例外。最后一点是，Redux 没有内置的 React，需要安装<code>react-redux</code>包，通过这个方式把 Redux 的<code>state</code>和<code>dispatch</code>作为<code>props</code>传给组件。\",\"在接下来的挑战中，先要创建一个可输入新文本消息的 React 组件，添加这些消息到数组里，在视图上显示数组。接着，创建 Redux store 和 actions 来管理消息数组的状态。最后，使用<code>react-redux</code>连接 Redux store 和组件，从而将本地状态提取到 Redux store 中。\",\"<hr>\",\"创建<code>DisplayMessages</code>组件，把构造函数添加到此组件中，使用含两个属性的状态初始化该组件，这两个属性为：input（设置为空字符串），<code>messages</code>（设置为空数组）。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/getting-started-with-react-redux\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>DisplayMessages</code>组件应渲染空的<code>div</code>元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); return mockedComponent.find('div').text() === '' })(), '<code>DisplayMessages</code>组件应渲染空的<code>div</code>元素。');\"},{\"text\":\"<code>DisplayMessages</code>组件的构造函数应调用<code>super</code>，传入<code>props</code>。\",\"testString\":\"getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/\\\\s/g,''); return noWhiteSpace.includes('constructor(props)') && noWhiteSpace.includes('super(props'); })(), '<code>DisplayMessages</code>组件的构造函数应调用<code>super</code>，传入<code>props</code>。');\"},{\"text\":\"<code>DisplayMessages</code>组件的初始状态应是<code>{input: \\\"\\\", messages: []}</code>。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const initialState = mockedComponent.state(); return typeof initialState === 'object' && initialState.input === '' && Array.isArray(initialState.messages) && initialState.messages.length === 0; })(), '<code>DisplayMessages</code>组件的初始状态应是<code>{input: \\\"\\\", messages: []}</code>。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class DisplayMessages extends React.Component {\\n// 请在本行以下添加你的代码\\n\\n// 请在本行以上添加你的代码\\n  render() {\\n    return <div />\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<DisplayMessages />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/manage-state-locally-first\",\"id\":\"5a24c314108439a4d4036141\"},\"slug\":\"/front-end-libraries/react-and-redux/getting-started-with-react-redux\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-and-redux-getting-started-with-react-redux-91ce66264d9d8aa2dea9.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Getting Started with React Redux\",\"description\":[\"这一系列挑战介绍的是 Redux 和 React 的配合，我们先来回顾一下这两种技术的关键原则是什么。React 是提供数据的视图库，能以高效、可预测的方式渲染视图。Redux 是状态管理框架，可用于简化 APP 应用状态的管理。在 React Redux app 应用中，通常可创建单一的 Redux store 来管理整个应用的状态。React 组件仅订阅 store 中与其角色相关的数据，你可直接从 React 组件中分发 actions 以触发 store 对象的更新。\",\"React 组件可以在本地管理自己的状态，但是对于复杂的应用来说，它的状态最好是用 Redux 保存在单一位置，有特定本地状态的独立组件例外。最后一点是，Redux 没有内置的 React，需要安装<code>react-redux</code>包，通过这个方式把 Redux 的<code>state</code>和<code>dispatch</code>作为<code>props</code>传给组件。\",\"在接下来的挑战中，先要创建一个可输入新文本消息的 React 组件，添加这些消息到数组里，在视图上显示数组。接着，创建 Redux store 和 actions 来管理消息数组的状态。最后，使用<code>react-redux</code>连接 Redux store 和组件，从而将本地状态提取到 Redux store 中。\",\"<hr>\",\"创建<code>DisplayMessages</code>组件，把构造函数添加到此组件中，使用含两个属性的状态初始化该组件，这两个属性为：input（设置为空字符串），<code>messages</code>（设置为空数组）。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/getting-started-with-react-redux\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>DisplayMessages</code>组件应渲染空的<code>div</code>元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); return mockedComponent.find('div').text() === '' })(), '<code>DisplayMessages</code>组件应渲染空的<code>div</code>元素。');\"},{\"text\":\"<code>DisplayMessages</code>组件的构造函数应调用<code>super</code>，传入<code>props</code>。\",\"testString\":\"getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/\\\\s/g,''); return noWhiteSpace.includes('constructor(props)') && noWhiteSpace.includes('super(props'); })(), '<code>DisplayMessages</code>组件的构造函数应调用<code>super</code>，传入<code>props</code>。');\"},{\"text\":\"<code>DisplayMessages</code>组件的初始状态应是<code>{input: \\\"\\\", messages: []}</code>。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const initialState = mockedComponent.state(); return typeof initialState === 'object' && initialState.input === '' && Array.isArray(initialState.messages) && initialState.messages.length === 0; })(), '<code>DisplayMessages</code>组件的初始状态应是<code>{input: \\\"\\\", messages: []}</code>。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class DisplayMessages extends React.Component {\\n// 请在本行以下添加你的代码\\n\\n// 请在本行以上添加你的代码\\n  render() {\\n    return <div />\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<DisplayMessages />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/manage-state-locally-first\",\"id\":\"5a24c314108439a4d4036141\"},\"slug\":\"/front-end-libraries/react-and-redux/getting-started-with-react-redux\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-and-redux-getting-started-with-react-redux.json\n// module id = 3563\n// module chunks = 180682309398169"],"sourceRoot":""}