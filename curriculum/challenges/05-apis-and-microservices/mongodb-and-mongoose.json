{
  "name": "MongoDB and Mongoose",
  "order": 3,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7fb6367417b2b2512c06",
      "title": "Install and Set Up Mongoose",
      "description": [
        "在 package.json 文件中添加 MongoDB 和 Mongoose 依赖，将 mLab 数据库的 URI 作为 MONGO_URI 变量存储在私有 .env 文件中。然后<code>require('mongoose')</code>，使用<code>mongoose.connect(<Your URI>)</code>命令来连接数据库。"
      ],
      "tests": [
        {
          "text": "在 package.json 文件中应该有 \"mongodb\" 依赖。",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/file/package.json').then(data => { var packJson = JSON.parse(data);     assert.property(packJson.dependencies, 'mongodb'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "在 package.json 文件中应该有 \"mongoose\" 依赖。",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/file/package.json').then(data => { var packJson = JSON.parse(data);     assert.property(packJson.dependencies, 'mongoose'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"mongoose\" 应该已经连接数据库。",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/is-mongoose-ok').then(data => {assert.isTrue(data.isMongooseOk, 'mongoose is not connected')}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb6367417b2b2512c07",
      "title": "Create a Model",
      "description": [
        "首先，我们需要一个 Schema，每一个 Schema 对应一个 MongoDB collection，并且在那个 collection 里面定义 documents 的模型。",
        "Schemas 是 Models 的构建块。它们可以嵌套来创建复杂的模型，但是这里，我们只学习简单的用法。",
        "Model 可以被实例化，实例化后的对象称为 documents。",
        "创建一个拥有以下 Prototype 的 Person 对象：",
        "<code>- Person Prototype -</code>",
        "<code>--------------------</code>",
        "<code>name : string [required]</code>",
        "<code>age :  number</code>",
        "<code>favoriteFoods : array of strings (*) </code>",
        "你可以使用基础的 SchemaTypes 去添加更多的字段，比如使用 required 或者 unique 这样的简单验证去设置默认值。参考 <a href='http://mongoosejs.com/docs/guide.html'>Mongoose 文档</a>。",
        "[C]RUD Part I - CREATE",
        "注意： Glitch 是一个真实的服务，并且通过 handler 函数和 db 进行交互。 这些函数通过一些事件去触发（例如：有人从终端调用了你的 API），我们在这些练习中遵循同样的方法。 比如，我们在完成 nserting、searching、updating 或者 deleting 这样的异步操作后接着回调<code>done()</code>函数。它遵循 Node 的惯例，需要在 success 时回调<code>done(null, data)</code>，在 error 时回调<code>done(err)</code>。",
        "Warning - 当与远程服务器交互时可能发生错误！",
        "<code>/* 示例 */</code>",
        "<code>var someFunc = function(done) {</code>",
        "<code>  // 执行一些可能产生错误的代码</code>",
        "<code>  if(error) return done(error);</code>",
        "<code>  done(null, result);</code>",
        "<code>};</code>"
      ],
      "tests": [
        {
          "text": "成功创建一个 Schema 实例。",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/mongoose-model', {name: 'Mike', age: 28, favoriteFoods: ['pizza', 'cheese']}).then(data => { assert.equal(data.name, 'Mike', '\"model.name\" is not what expected'); assert.equal(data.age, '28', '\"model.age\" is not what expected'); assert.isArray(data.favoriteFoods, '\"model.favoriteFoods\" is not an Array'); assert.include(data.favoriteFoods, 'pizza', '\"model.favoriteFoods\" does not include the expected items'); assert.include(data.favoriteFoods, 'cheese', '\"model.favoriteFoods\" does not include the expected items'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb6367417b2b2512c09",
      "title": "Create and Save a Record of a Model",
      "description": [
        "使用 Person 的 constructor（构造器）函数可以创建一个 document 对象，该对象包含<code>name</code>、<code>age</code>和<code>favoriteFoods</code>字段。这些字段的类型必须符合 Person Schema 里面定义的类型。然后调用<code>document.save()</code>。使用 Node 惯例传递 callback。通常情况下，所有的 CRUD（增查改删）方法都会像下面一样作为最后一个参数去执行一个<code>callback()</code>。",
        "<code>/* 示例 */</code>",
        "<code>// ...</code>",
        "<code>person.save(function(err, data) {</code>",
        "<code>// 你的代码</code>",
        "<code>});</code>"
      ],
      "tests": [
        {
          "text": "成功创建一条 db 并保存。",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/create-and-save-person').then(data => { assert.isString(data.name, '\"item.name\" should be a String'); assert.isNumber(data.age, '28', '\"item.age\" should be a Number'); assert.isArray(data.favoriteFoods, '\"item.favoriteFoods\" should be an Array'); assert.equal(data.__v, 0, 'The db item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0a",
      "title": "Create Many Records with model.create()",
      "description": [
        "有时你需要创建很多的 model 实例。例如：在使用初始数据为数据库初始化时，<code>Model.create()</code>接受一组像<code>[{name:'John', ...}, {...}, ...]</code>的数组作为第一个参数，并将其保存到数据库。使用<code>arrayOfPeople</code>作为<code>Model.create()</code>的参数创建很多个 people 实例。"
      ],
      "tests": [
        {
          "text": "应当可以一次性创建多个 item（项目）。",
          "testString": "getUserInput => $.ajax({url: getUserInput('url') + '/_api/create-many-people', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'John', age: 24, favoriteFoods: ['pizza', 'salad']}, {name: 'Mary', age: 21, favoriteFoods: ['onions', 'chicken']}])}).then(data => { assert.isArray(data, 'the response should be an array'); assert.equal(data.length, 2, 'the response does not contain the expected number of items'); assert.equal(data[0].name, 'John', 'The first item is not correct'); assert.equal(data[0].__v, 0, 'The first item should be not previously edited'); assert.equal(data[1].name, 'Mary', 'The second item is not correct'); assert.equal(data[1].__v, 0, 'The second item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0b",
      "title": "Use model.find() to Search Your Database",
      "description": [
        "使用<code>Model.find() -> [Person]</code>来查询给定名称的所有的人。",
        "最简单的用法：<code>Model.find()</code>接受一个查询的 document（一个 JSON 对象）作为第一参数，然后是回调。它将返回匹配到的项目组成的数组。这个支持极其广泛的搜索选项。使用人名作为搜索的关键词，来校验它。"
      ],
      "tests": [
        {
          "text": "成功找到所有符合条件的 item（项目）。",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/find-all-by-name', {name: 'r@nd0mN4m3', age: 24, favoriteFoods: ['pizza']}).then(data => { assert.isArray(data, 'the response should be an Array');  assert.equal(data[0].name, 'r@nd0mN4m3', 'item.name is not what expected'); assert.equal(data[0].__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0c",
      "title": "Use model.findOne() to Return a Single Matching Document from Your Database",
      "description": [
        "<code>Model.findOne()</code>表现像<code>Model.find()</code>，但是它仅仅返回一个 document（而不是一个数组），即使数据库里有很多条 item（项目）。当你按声明成<code>unique</code>的属性进行搜索时，<code>Model.findOne()</code>尤其有用。把 food 作为<code>Model.findOne() -> Person</code>的参数，来找到一个在她的爱好中有某一食物的人。"
      ],
      "tests": [
        {
          "text": "成功找到一个 item（项目）。",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/find-one-by-food', {name: 'Gary', age: 46, favoriteFoods: ['chicken salad']}).then(data => { assert.equal(data.name, 'Gary', 'item.name is not what expected'); assert.deepEqual(data.favoriteFoods, ['chicken salad'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0d",
      "title": "Use model.findById() to Search Your Database By _id",
      "description": [
        "当我们保存一个 document， MongoDB 自动添加 _id 字段，并给该字段设置 unique（唯一）属性。通过 _id 搜索是一个非常频繁的操作，所以 Mongose 为它提供了一个专门的方法。使用人物 Id 作为参数，执行<code>Model.findById() -> Person</code>，找到这个 _id 对应的唯一的一个人。"
      ],
      "tests": [
        {
          "text": "通过 Id 成功找到对应的 item（项目）。",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/find-by-id').then(data => { assert.equal(data.name, 'test', 'item.name is not what expected'); assert.equal(data.age, 0, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['none'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c0e",
      "title": "Perform Classic Updates by Running Find, Edit, then Save",
      "description": [
        "传统应用里，如果你想要编辑 document，然后在某处使用它。你就必须在服务器响应中将其返回。Mongoose 有一个专用的更新方法：<code>Model.update() </code>, 它与低级的 mongo 驱动绑定，可以批量编辑符合特定条件的多个 document，而不用返回更新后的 document，取而代之返回'状态'消息。此外，它使模型校验变得更棘手，因为它是直接调用了 mongo 的驱动程序。",
        "使用参数 personId 作为搜索关键字，然后通过 _id 找到一个 person（使用上述任何一种方法）. 将 “hamburger” 添加到她的 favoriteFoods 列中去 (可以使用 <code>Array.push()</code>)。然后在 <code>.find()</code> 的回调里通过 <code>.save()</code> 方法更新。",
        "[*] 提示: 如果你在 Schema 中将 favoriteFoods 声明为一个 Array(数组), 而没有指定数组的类型(如：[String])，结果会让人很意外。 在这种情况下，favoriteFoods 默认为 Mixed 类型。如果想要编辑它，就必须执行 <code>document.markModified（'edited-field'）</code>。(http://mongoosejs.com/docs/schematypes.html - #Mixed)"
      ],
      "tests": [
        {
          "text": "对一个 item（项目）的 Find-edit-update 操作成功",
          "testString": "getUserInput => $.post(getUserInput('url') +'/_api/find-edit-save', {name:'Poldo', age: 40, favoriteFoods:['spaghetti']}).then(data => { assert.equal(data.name,'Poldo','item.name is not what expected'); assert.equal(data.age, 40,'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['spaghetti','hamburger'],'item.favoriteFoods is not what expected'); assert.equal(data.__v, 1,'The item should be previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c0f",
      "title": "Perform New Updates on a Document Using model.findOneAndUpdate()",
      "description": [
        "mongoose 的最新版本简化了 documents 的更新。 但是一些高级的用法 (比如 pre/post 钩子, 验证) 更复杂, 所以老方法更常用。当通过 Id 进行搜索时还可以使用 <code>findByIdAndUpdate()</code>。",
        "使用 personName 作为搜索的关键词查找 person，并将查到的 person 的年龄设为 20 岁。",
        "提示: 我们想要你返更新后的 document，你可以把 <code>findOneAndUpdate()</code> 的第三个参数设置为 <code>{new: true}</code>。 默认情况下，这些方法返回未被修改的数据。"
      ],
      "tests": [
        {
          "text": "对一个 item（项目）的  findOneAndUpdate  操作成功",
          "testString": "getUserInput => $.post(getUserInput('url') +'/_api/find-one-update', {name:'Dorian Gray', age: 35, favoriteFoods:['unknown']}).then(data => { assert.equal(data.name,'Dorian Gray','item.name is not what expected'); assert.equal(data.age, 20,'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['unknown'],'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0,'findOneAndUpdate does not increment version by design !!!'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c10",
      "title": "Delete One Document Using model.findByIdAndRemove",
      "description": [
        "你可以使用 <code>findByIdAndRemove()</code> 或者 <code>findOneAndRemove()</code> 方法， 通过 _id 删除一个人员。 它和上面的更新方法很像，都是先通过 personId 找到对应的 document，再删除，并返回被删除的 document。"
      ],
      "tests": [
        {
          "text": "成功删除一个 item(项目)。",
          "testString": "getUserInput => $.post(getUserInput('url') +'/_api/remove-one-person', {name:'Jason Bourne', age: 36, favoriteFoods:['apples']}).then(data => { assert.equal(data.name,'Jason Bourne','item.name is not what expected'); assert.equal(data.age, 36,'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['apples'],'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0); assert.equal(data.count, 0,'the db items count is not what expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c11",
      "title": "Delete Many Documents with model.remove()",
      "description": [
        "<code>Model.remove()</code> 可用于删除与给定条件匹配的所有 document。 如果想要删除所有叫 “Mary” 的人, 可以使用 <code>Model.remove()</code>。 传入一个设置了 “name” 字段的 document 作为查询条件，当然还需要一个回调函数。",
        "注意: <code>Model.remove()</code> 不会返回被删除的 document, 但是会返回一个包含操作结果和受影响的 item 数量的 JSON 对象。 不要忘记将它传递给 <code>done()</code> 回调，因为我们在测试中使用它。"
      ],
      "tests": [
        {
          "text": "一次性成功的删除多个 item(项目)。",
          "testString": "getUserInput => $.ajax({url: getUserInput('url') +'/_api/remove-many-people', type:'POST', contentType:'application/json', data: JSON.stringify([{name:'Mary', age: 16, favoriteFoods: ['lollipop']}, {name:'Mary', age: 21, favoriteFoods: ['steak']}])}).then(data => { assert.isTrue(!!data.ok,'The mongo stats are not what expected'); assert.equal(data.n, 2,'The number of items affected is not what expected'); assert.equal(data.count, 0,'the db items count is not what expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb9367417b2b2512c12",
      "title": "Chain Search Query Helpers to Narrow Search Results",
      "description": [
        "如果不给 <code>Model.find()</code> (或者别的搜索方法)传递回调函数，作为的最后一个参数, 则不执行查询。你可以将查询存储在变量中供以后使用，这类对象可以使用链接语法构建查询。 当你最终链接 <code>.exec()</code> 方法时，将执行实际的数据库操作。最后将回调传递给 <code>exec()</code> 方法。 有很多的查询助手, 这里我们使用最 '著名' 的一种。 ",
        "找到喜欢 \"burrito\" 的人，按照名字排序, 限制结果为两个 document, 并且隐藏他们的年龄。 使用链路 <code>.find()</code>, <code>.sort()</code>, <code>.limit()</code>, <code>.select()</code>,  然后 <code>.exec()</code>。将 <code>done(err, data)</code> 回调传给 <code>exec()</code> 方法。"
      ],
      "tests": [
        {
          "text": "Chaining query helpers should succeed",
          "testString": "getUserInput => $.ajax({url: getUserInput('url') +'/_api/query-tools', type:'POST', contentType:'application/json', data: JSON.stringify([{name:'Pablo', age: 26, favoriteFoods: ['burrito','hot-dog']}, {name:'Ashley', age: 32, favoriteFoods: ['steak','burrito']}, {name:'Mario', age: 51, favoriteFoods: ['burrito','prosciutto']} ]) }).then(data => { assert.isArray(data,'the response should be an Array'); assert.equal(data.length, 2,'the data array length is not what expected'); assert.notProperty(data[0],'age','The returned first item has too many properties'); assert.equal(data[0].name,'Ashley','The returned first item name is not what expected'); assert.notProperty(data[1],'age','The returned second item has too many properties'); assert.equal(data[1].name,'Mario','The returned second item name is not what expected');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    }
  ]
}


