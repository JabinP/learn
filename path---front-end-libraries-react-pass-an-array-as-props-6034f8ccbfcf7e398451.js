webpackJsonp([21454428672785],{3589:function(e,o){e.exports={data:{challengeNode:{title:"Pass an Array as Props",description:["上一个挑战演示了如何将来自父组件的信息作为<code>props</code>传递给子组件。这个挑战着眼于如何将数组作为<code>props</code>传递。要将数组传递给 JSX 元素，必须将其视为 JavaScript 并用花括号括起来。",'<blockquote>&lt;ParentComponent&gt;<br>&nbsp;&nbsp;&lt;ChildComponent colors={["green", "blue", "red"]} /&gt;<br>&lt;/ParentComponent&gt;</blockquote>',"这样，子组件就可以访问数组属性<code>colors</code>。访问属性时可以使用<code>join()</code>等数组方法。","<code>const ChildComponent = (props) => &lt;p&gt{props.colors.join(', ')}&lt;/p&gt</code>","这将把所有<code>colors</code>数组项连接成一个逗号分隔的字符串并生成："," <code> &lt;p&gt;green, blue, red&lt;/p&gt;</code>","稍后，我们将了解在 React 中渲染数组数据的其他常用方法。","<hr>",'代码编辑器中有<code>List</code>和<code>ToDo</code>组件。在<code>ToDo</code>组件中渲染每个<code>List</code>时，传入<code>tasks</code>属性并将其分配给待办任务数组，例如<code>["walk dog", "workout"]</code>。然后访问<code>List</code>组件中的<code>tasks</code>数组，在<code>p</code>元素中显示其值。使用<code>join(", ")</code>把<code>props.tasks</code>数组作为逗号分隔列表显示在<code>p</code>元素中。今天的列表应该至少有 2 个任务，明天应该至少有 3 个任务。'],challengeType:6,fields:{slug:"/front-end-libraries/react/pass-an-array-as-props",blockName:"React",tests:[{text:"<code>ToDo</code>组件应该返回单个外部<code>div</code>。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().type() === 'div'; })(), '<code>ToDo</code>组件应该返回单个外部<code>div</code>。');"},{text:"<code>ToDo</code>组件的第三个子元素应该是<code>List</code>组件的一个实例。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().childAt(2).name() === 'List'; })(), '<code>ToDo</code>组件的第三个子元素应该是<code>List</code>组件的一个实例。');"},{text:"<code>ToDo</code>组件的第五个子元素应该是<code>List</code>组件的一个实例。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.children().first().childAt(4).name() === 'List'; })(), '<code>ToDo</code>组件的第五个子元素应该是<code>List</code>组件的一个实例。');"},{text:"<code>List</code>组件的两个实例都应该具有一个名为<code>tasks</code>的属性，并且<code>tasks</code>的类型应该是数组。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return Array.isArray(mockedComponent.find('List').get(0).props.tasks) && Array.isArray(mockedComponent.find('List').get(1).props.tasks); })(), '<code>List</code>组件的两个实例都应该具有一个名为<code>tasks</code>的属性，并且<code>tasks</code>的类型应该是数组。');"},{text:"表示今天任务的第一个<code>List</code>组件应该有 2 个或更多项。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('List').get(0).props.tasks.length >= 2; })(), '表示今天任务的第一个<code>List</code>组件应该有 2 个或更多项。');"},{text:"表示明天任务的第二个<code>List</code>组件应该有 3 个或更多项。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('List').get(1).props.tasks.length >= 3; })(), '表示明天任务的第二个<code>List</code>组件应该有 3 个或更多项。');"},{text:"<code>List</code>组件应在<code>p</code>标签中渲染<code>tasks</code>属性的值。",testString:"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(ToDo)); return mockedComponent.find('p').get(0).props.children === mockedComponent.find('List').get(0).props.tasks.join(', ') && mockedComponent.find('p').get(1).props.children === mockedComponent.find('List').get(1).props.tasks.join(', '); })(), '<code>List</code>组件应在<code>p</code>标签中渲染<code>tasks</code>属性的值。');"}]},required:[{link:null,raw:null,src:"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{link:null,raw:null,src:"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],files:{indexhtml:null,indexjs:null,indexjsx:{key:"indexjsx",ext:"jsx",name:"index",contents:"const List= (props) => {\n  { /* change code below this line */ }\n  return <p>{}</p>\n  { /* change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* change code above this line */ }\n      </div>\n    );\n  }\n};",head:"",tail:"ReactDOM.render(<ToDo />, document.getElementById('root'))"}}}},pathContext:{challengeMeta:{introPath:"",template:"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",required:[{link:null,raw:null,src:"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{link:null,raw:null,src:"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],nextChallengePath:"/front-end-libraries/react/use-default-props",id:"5a24c314108439a4d403616a"},slug:"/front-end-libraries/react/pass-an-array-as-props"}}}});
//# sourceMappingURL=path---front-end-libraries-react-pass-an-array-as-props-6034f8ccbfcf7e398451.js.map