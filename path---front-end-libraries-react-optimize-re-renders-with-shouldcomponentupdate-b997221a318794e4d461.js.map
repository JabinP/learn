{"version":3,"sources":["webpack:///path---front-end-libraries-react-optimize-re-renders-with-shouldcomponentupdate-b997221a318794e4d461.js","webpack:///./.cache/json/front-end-libraries-react-optimize-re-renders-with-shouldcomponentupdate.json"],"names":["webpackJsonp","3586","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,iDAAAC,aAAA,k2BAAAC,cAAA,EAAAC,QAAs8BC,KAAA,4EAAAC,UAAA,QAAAC,QAAiHC,KAAA,8DAAAC,WAAA,2QAA6VD,KAAA,sEAAAC,WAAA,+OAAyUD,KAAA,wFAAAC,WAAA,oqBAAgxBD,KAAA,oEAAAC,WAAA,6yBAAo4BC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,q7BAA0+BC,KAAA,GAAAC,KAAA,uEAAyFC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,uDAAAC,GAAA,4BAA6GxB,KAAA","file":"path---front-end-libraries-react-optimize-re-renders-with-shouldcomponentupdate-b997221a318794e4d461.js","sourcesContent":["webpackJsonp([113024156747754],{\n\n/***/ 3586:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Optimize Re-Renders with shouldComponentUpdate\",\"description\":[\"到目前为止，如果任何组件接收到新的<code>state</code>或新的<code>props</code>，它会重新渲染自己及其所有子组件。这通常是好的。但是 React 提供了一种生命周期方法，当子组件接收到新的<code>state</code>或<code>props</code>时，你可以调用该方法，并特别声明组件是否应该更新。方法是<code>shouldComponentUpdate()</code>，它将<code>nextProps</code>和<code>nextState</code>作为参数。\",\"这种方法是优化性能的有效方法。例如，默认行为是，当组件接收到新的<code>props</code>时，即使<code>props</code>没有改变，它也会重新渲染。你可以通过使用<code>shouldComponentUpdate()</code>比较<code>props</code>来防止这种情况。该方法必须返回一个布尔值，该值告诉 React 是否更新组件。你可以比较当前的 props（<code>this.props</code>）和下一个 props（<code>nextProps</code>），以确定你是否需要更新，并相应地返回<code>true</code>或<code>false</code>。\",\"<hr>\",\"<code>shouldComponentUpdate()</code>方法添加到名为<code>OnlyEvens</code>的组件中。目前，该方法返回<code>true</code>，因此每次收到新的<code>props</code>时，<code>OnlyEvens</code>都会重新渲染。修改该方法，以便<code>OnlyEvens</code>仅在其新 props 的<code>value</code>为偶数时更新。单击<code>Add</code>按钮，在触发其他生命周期钩子时，在浏览器控制台中查看事件的顺序。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/optimize-re-renders-with-shouldcomponentupdate\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>Controller</code>组件应该将<code>OnlyEvens</code>组件渲染为子组件。\",\"testString\":\"assert((() => { const mockedComponent = Enzyme.mount(React.createElement(Controller)); return mockedComponent.find('Controller').length === 1 && mockedComponent.find('OnlyEvens').length === 1; })(), '<code>Controller</code>组件应该将<code>OnlyEvens</code>组件渲染为子组件。');\"},{\"text\":\"应该在<code>OnlyEvens</code>组件上定义<code>shouldComponentUpdate</code>方法。\",\"testString\":\"assert((() => { const child = React.createElement(OnlyEvens).type.prototype.shouldComponentUpdate.toString().replace(/s/g,''); return child !== 'undefined'; })(), '应该在<code>OnlyEvens</code>组件上定义<code>shouldComponentUpdate</code>方法。');\"},{\"text\":\"<code>OnlyEvens</code>组件应该返回一个<code>h1</code>标签，该标签渲染<code>this.props.value</code>的值。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () => { mockedComponent.setState({ value: 1000 }); return waitForIt(() => mockedComponent.find('h1').html()); }; const second = () => { mockedComponent.setState({ value: 10 }); return waitForIt(() => mockedComponent.find('h1').html()); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === '<h1>1000</h1>' && secondValue === '<h1>10</h1>', '<code>OnlyEvens</code>组件应该返回一个<code>h1</code>标签，该标签渲染<code>this.props.value</code>的值。'); }; \"},{\"text\":\"只有在<code>nextProps.value</code>为偶数时，<code>OnlyEvens</code>才会重新渲染。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () => { mockedComponent.setState({ value: 8 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const second = () => { mockedComponent.setState({ value: 7 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const third = () => { mockedComponent.setState({ value: 42 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const firstValue = await first(); const secondValue = await second(); const thirdValue = await third(); assert(firstValue === '8' && secondValue === '8' && thirdValue === '42', '只有在<code>nextProps.value</code>为偶数时，<code>OnlyEvens</code>才会重新渲染。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class OnlyEvens extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  shouldComponentUpdate(nextProps, nextState) {\\n    console.log('Should I update?');\\n     // change code below this line\\n    return true;\\n     // change code above this line\\n  }\\n  componentWillReceiveProps(nextProps) {\\n    console.log('Receiving new props...');\\n  }\\n  componentDidUpdate() {\\n    console.log('Component re-rendered.');\\n  }\\n  render() {\\n    return <h1>{this.props.value}</h1>\\n  }\\n};\\n\\nclass Controller extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 0\\n    };\\n    this.addValue = this.addValue.bind(this);\\n  }\\n  addValue() {\\n    this.setState({\\n      value: this.state.value + 1\\n    });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.addValue}>Add</button>\\n        <OnlyEvens value={this.state.value}/>\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<Controller />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/introducing-inline-styles\",\"id\":\"5a24c314108439a4d4036180\"},\"slug\":\"/front-end-libraries/react/optimize-re-renders-with-shouldcomponentupdate\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-optimize-re-renders-with-shouldcomponentupdate-b997221a318794e4d461.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Optimize Re-Renders with shouldComponentUpdate\",\"description\":[\"到目前为止，如果任何组件接收到新的<code>state</code>或新的<code>props</code>，它会重新渲染自己及其所有子组件。这通常是好的。但是 React 提供了一种生命周期方法，当子组件接收到新的<code>state</code>或<code>props</code>时，你可以调用该方法，并特别声明组件是否应该更新。方法是<code>shouldComponentUpdate()</code>，它将<code>nextProps</code>和<code>nextState</code>作为参数。\",\"这种方法是优化性能的有效方法。例如，默认行为是，当组件接收到新的<code>props</code>时，即使<code>props</code>没有改变，它也会重新渲染。你可以通过使用<code>shouldComponentUpdate()</code>比较<code>props</code>来防止这种情况。该方法必须返回一个布尔值，该值告诉 React 是否更新组件。你可以比较当前的 props（<code>this.props</code>）和下一个 props（<code>nextProps</code>），以确定你是否需要更新，并相应地返回<code>true</code>或<code>false</code>。\",\"<hr>\",\"<code>shouldComponentUpdate()</code>方法添加到名为<code>OnlyEvens</code>的组件中。目前，该方法返回<code>true</code>，因此每次收到新的<code>props</code>时，<code>OnlyEvens</code>都会重新渲染。修改该方法，以便<code>OnlyEvens</code>仅在其新 props 的<code>value</code>为偶数时更新。单击<code>Add</code>按钮，在触发其他生命周期钩子时，在浏览器控制台中查看事件的顺序。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/optimize-re-renders-with-shouldcomponentupdate\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>Controller</code>组件应该将<code>OnlyEvens</code>组件渲染为子组件。\",\"testString\":\"assert((() => { const mockedComponent = Enzyme.mount(React.createElement(Controller)); return mockedComponent.find('Controller').length === 1 && mockedComponent.find('OnlyEvens').length === 1; })(), '<code>Controller</code>组件应该将<code>OnlyEvens</code>组件渲染为子组件。');\"},{\"text\":\"应该在<code>OnlyEvens</code>组件上定义<code>shouldComponentUpdate</code>方法。\",\"testString\":\"assert((() => { const child = React.createElement(OnlyEvens).type.prototype.shouldComponentUpdate.toString().replace(/s/g,''); return child !== 'undefined'; })(), '应该在<code>OnlyEvens</code>组件上定义<code>shouldComponentUpdate</code>方法。');\"},{\"text\":\"<code>OnlyEvens</code>组件应该返回一个<code>h1</code>标签，该标签渲染<code>this.props.value</code>的值。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () => { mockedComponent.setState({ value: 1000 }); return waitForIt(() => mockedComponent.find('h1').html()); }; const second = () => { mockedComponent.setState({ value: 10 }); return waitForIt(() => mockedComponent.find('h1').html()); }; const firstValue = await first(); const secondValue = await second(); assert(firstValue === '<h1>1000</h1>' && secondValue === '<h1>10</h1>', '<code>OnlyEvens</code>组件应该返回一个<code>h1</code>标签，该标签渲染<code>this.props.value</code>的值。'); }; \"},{\"text\":\"只有在<code>nextProps.value</code>为偶数时，<code>OnlyEvens</code>才会重新渲染。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(Controller)); const first = () => { mockedComponent.setState({ value: 8 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const second = () => { mockedComponent.setState({ value: 7 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const third = () => { mockedComponent.setState({ value: 42 }); return waitForIt(() => mockedComponent.find('h1').text()); }; const firstValue = await first(); const secondValue = await second(); const thirdValue = await third(); assert(firstValue === '8' && secondValue === '8' && thirdValue === '42', '只有在<code>nextProps.value</code>为偶数时，<code>OnlyEvens</code>才会重新渲染。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class OnlyEvens extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  shouldComponentUpdate(nextProps, nextState) {\\n    console.log('Should I update?');\\n     // change code below this line\\n    return true;\\n     // change code above this line\\n  }\\n  componentWillReceiveProps(nextProps) {\\n    console.log('Receiving new props...');\\n  }\\n  componentDidUpdate() {\\n    console.log('Component re-rendered.');\\n  }\\n  render() {\\n    return <h1>{this.props.value}</h1>\\n  }\\n};\\n\\nclass Controller extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 0\\n    };\\n    this.addValue = this.addValue.bind(this);\\n  }\\n  addValue() {\\n    this.setState({\\n      value: this.state.value + 1\\n    });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.addValue}>Add</button>\\n        <OnlyEvens value={this.state.value}/>\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<Controller />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/introducing-inline-styles\",\"id\":\"5a24c314108439a4d4036180\"},\"slug\":\"/front-end-libraries/react/optimize-re-renders-with-shouldcomponentupdate\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-optimize-re-renders-with-shouldcomponentupdate.json\n// module id = 3586\n// module chunks = 113024156747754"],"sourceRoot":""}