{"version":3,"sources":["webpack:///path---front-end-libraries-react-add-inline-styles-in-react-cc1b9549ef082dcf8c0b.js","webpack:///./.cache/json/front-end-libraries-react-add-inline-styles-in-react.json"],"names":["webpackJsonp","3558","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6BAAAC,aAAA,2gBAA2gB,gRAAAC,cAAA,EAAAC,QAAsWC,KAAA,wDAAAC,UAAA,QAAAC,QAA6FC,KAAA,kDAAAC,WAAA,iGAAuKD,KAAA,sEAAAC,WAAA,8GAAwMD,KAAA,qEAAAC,WAAA,0GAAmMD,KAAA,iFAAAC,WAAA,sIAA2OD,KAAA,8BAAAC,WAAA,+KAAiOD,KAAA,mDAAAC,WAAA,yUAAiZC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,2RAAgVC,KAAA,GAAAC,KAAA,qEAAyFC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,4EAAAC,GAAA,4BAAkIxB,KAAA","file":"path---front-end-libraries-react-add-inline-styles-in-react-cc1b9549ef082dcf8c0b.js","sourcesContent":["webpackJsonp([270064328573114],{\n\n/***/ 3558:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Add Inline Styles in React\",\"description\":[\"在上一次挑战中，你可能已经注意到，除了设置为 JavaScript 对象的<code>style</code>属性之外，与 HTML 内联样式相比，React 的内联样式还有其他几个语法差异。首先，某些 CSS 样式属性的名称使用驼峰式命名。例如，最后一个挑战用<code>fontSize</code>而不是<code>font-size</code>来设置字体的大小。对于 JavaScript 对象属性来说，像<code>font-size</code>这样的连字符命名是无效的语法，所以 React 使用驼峰式命名。通常，任何连字符的 style 属性在 JSX 中都是使用驼峰式命名的。\",\"除非另有规定，否则所有属性值是长度的（如<code>height</code>、<code>width</code>和<code>fontSize</code>）其单位都假定为<code>px</code>。例如，如果要使用<code>em</code>，可以用引号将值和单位括起来，例如<code>{fontSize: \\\"4em\\\"}</code>。除了默认为<code>px</code>的长度值之外，所有其他属性值都应该用引号括起来。\",\"<hr>\",\"如果你有大量样式，你可以将 style<code>对象</code>分配给一个常量，以保持代码的组织有序。取消对<code>styles</code>常量的注释，并声明具有三个样式属性及对应值的<code>对象</code>。使<code>div</code>的颜色为<code>\\\"purple\\\"</code>、字号为<code>40</code>、边框为<code>\\\"2px solid purple\\\"</code>。然后设置<code>style</code>属性，使其等于<code>styles</code>常量。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/add-inline-styles-in-react\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>styles</code>变量应该是具有三个属性的<code>对象</code>。\",\"testString\":\"assert(Object.keys(styles).length === 3, '<code>styles</code>变量应该是具有三个属性的<code>对象</code>。');\"},{\"text\":\"<code>styles</code>变量的<code>color</code>属性应该设置为<code>purple</code>。\",\"testString\":\"assert(styles.color === 'purple', '<code>styles</code>变量的<code>color</code>属性应该设置为<code>purple</code>。');\"},{\"text\":\"<code>styles</code>变量应该将<code>fontSize</code>属性设置为<code>40</code>。\",\"testString\":\"assert(styles.fontSize === 40, '<code>styles</code>变量应该将<code>fontSize</code>属性设置为<code>40</code>。');\"},{\"text\":\"<code>styles</code>变量的<code>border</code>属性应该设置为<code>2px solid purple</code>。\",\"testString\":\"assert(styles.border === \\\"2px solid purple\\\", '<code>styles</code>变量的<code>border</code>属性应该设置为<code>2px solid purple</code>。');\"},{\"text\":\"组件应该渲染一个<code>div</code>元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return mockedComponent.type() === 'div'; })(), '组件应该渲染一个<code>div</code>元素。');\"},{\"text\":\"<code>div</code>元素的样式应该由<code>styles</code>对象定义。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return (mockedComponent.props().style.color === \\\"purple\\\" && mockedComponent.props().style.fontSize === 40 && mockedComponent.props().style.border === \\\"2px solid purple\\\"); })(), '<code>div</code>元素的样式应该由<code>styles</code>对象定义。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"\\n// const styles =\\n// change code above this line\\nclass Colorful extends React.Component {\\n  render() {\\n    // change code below this line\\n    return (\\n      <div style={{color: \\\"yellow\\\", fontSize: 24}}>Style Me!</div>\\n    );\\n    // change code above this line\\n  }\\n};\\n\",\"head\":\"\",\"tail\":\"ReactDOM.render(<Colorful />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/use-advanced-javascript-in-react-render-method\",\"id\":\"5a24c314108439a4d4036182\"},\"slug\":\"/front-end-libraries/react/add-inline-styles-in-react\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-add-inline-styles-in-react-cc1b9549ef082dcf8c0b.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Add Inline Styles in React\",\"description\":[\"在上一次挑战中，你可能已经注意到，除了设置为 JavaScript 对象的<code>style</code>属性之外，与 HTML 内联样式相比，React 的内联样式还有其他几个语法差异。首先，某些 CSS 样式属性的名称使用驼峰式命名。例如，最后一个挑战用<code>fontSize</code>而不是<code>font-size</code>来设置字体的大小。对于 JavaScript 对象属性来说，像<code>font-size</code>这样的连字符命名是无效的语法，所以 React 使用驼峰式命名。通常，任何连字符的 style 属性在 JSX 中都是使用驼峰式命名的。\",\"除非另有规定，否则所有属性值是长度的（如<code>height</code>、<code>width</code>和<code>fontSize</code>）其单位都假定为<code>px</code>。例如，如果要使用<code>em</code>，可以用引号将值和单位括起来，例如<code>{fontSize: \\\"4em\\\"}</code>。除了默认为<code>px</code>的长度值之外，所有其他属性值都应该用引号括起来。\",\"<hr>\",\"如果你有大量样式，你可以将 style<code>对象</code>分配给一个常量，以保持代码的组织有序。取消对<code>styles</code>常量的注释，并声明具有三个样式属性及对应值的<code>对象</code>。使<code>div</code>的颜色为<code>\\\"purple\\\"</code>、字号为<code>40</code>、边框为<code>\\\"2px solid purple\\\"</code>。然后设置<code>style</code>属性，使其等于<code>styles</code>常量。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/add-inline-styles-in-react\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>styles</code>变量应该是具有三个属性的<code>对象</code>。\",\"testString\":\"assert(Object.keys(styles).length === 3, '<code>styles</code>变量应该是具有三个属性的<code>对象</code>。');\"},{\"text\":\"<code>styles</code>变量的<code>color</code>属性应该设置为<code>purple</code>。\",\"testString\":\"assert(styles.color === 'purple', '<code>styles</code>变量的<code>color</code>属性应该设置为<code>purple</code>。');\"},{\"text\":\"<code>styles</code>变量应该将<code>fontSize</code>属性设置为<code>40</code>。\",\"testString\":\"assert(styles.fontSize === 40, '<code>styles</code>变量应该将<code>fontSize</code>属性设置为<code>40</code>。');\"},{\"text\":\"<code>styles</code>变量的<code>border</code>属性应该设置为<code>2px solid purple</code>。\",\"testString\":\"assert(styles.border === \\\"2px solid purple\\\", '<code>styles</code>变量的<code>border</code>属性应该设置为<code>2px solid purple</code>。');\"},{\"text\":\"组件应该渲染一个<code>div</code>元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return mockedComponent.type() === 'div'; })(), '组件应该渲染一个<code>div</code>元素。');\"},{\"text\":\"<code>div</code>元素的样式应该由<code>styles</code>对象定义。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.shallow(React.createElement(Colorful)); return (mockedComponent.props().style.color === \\\"purple\\\" && mockedComponent.props().style.fontSize === 40 && mockedComponent.props().style.border === \\\"2px solid purple\\\"); })(), '<code>div</code>元素的样式应该由<code>styles</code>对象定义。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"\\n// const styles =\\n// change code above this line\\nclass Colorful extends React.Component {\\n  render() {\\n    // change code below this line\\n    return (\\n      <div style={{color: \\\"yellow\\\", fontSize: 24}}>Style Me!</div>\\n    );\\n    // change code above this line\\n  }\\n};\\n\",\"head\":\"\",\"tail\":\"ReactDOM.render(<Colorful />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/use-advanced-javascript-in-react-render-method\",\"id\":\"5a24c314108439a4d4036182\"},\"slug\":\"/front-end-libraries/react/add-inline-styles-in-react\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-add-inline-styles-in-react.json\n// module id = 3558\n// module chunks = 270064328573114"],"sourceRoot":""}