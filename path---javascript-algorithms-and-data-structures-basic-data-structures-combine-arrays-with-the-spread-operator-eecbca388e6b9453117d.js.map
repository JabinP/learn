{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-data-structures-combine-arrays-with-the-spread-operator-eecbca388e6b9453117d.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-data-structures-combine-arrays-with-the-spread-operator.json"],"names":["webpackJsonp","3739","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,0CAAAC,aAAA,yWAA2T,kMAAAC,cAAA,EAAAC,QAA6UC,KAAA,2GAAAC,UAAA,wBAAAC,QAAgKC,KAAA,kFAAAC,WAAA,yKAAyRD,KAAA,qCAAAC,WAAA,4GAAoKC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,2JAA8MC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,qHAAAC,GAAA,4BAAsNrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-data-structures-combine-arrays-with-the-spread-operator-eecbca388e6b9453117d.js","sourcesContent":["webpackJsonp([180706749751465],{\n\n/***/ 3739:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Combine Arrays with the Spread Operator\",\"description\":[\"<dfn>展开运算符</dfn>的另一个大用处是合并数组，或者将某个数组的所有元素插入到另一个数组的任意位置。用传统的语法我们也可以连接两个数组，但只能两个数组首尾相接。而展开语法能使下面的操作变得极其简单：\",\"<blockquote>let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];<br><br>let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];<br>// thatArray 现在等于 ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</blockquote>\",\"使用展开语法，我们这样就实现了一个用传统方法要写得很复杂冗长的操作。\",\"<hr>\",\"我们已经定义了一个返回<code>sentence</code>变量的<code>spreadOut</code>函数，请修改该函数，利用<dfn>展开运算符</dfn>使该函数返回数组<code>['learning', 'to', 'code', 'is', 'fun']</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/combine-arrays-with-the-spread-operator\",\"blockName\":\"Basic Data Structures\",\"tests\":[{\"text\":\"<code>spreadOut</code>应该返回<code>[\\\"learning\\\", \\\"to\\\", \\\"code\\\", \\\"is\\\", \\\"fun\\\"]</code>。\",\"testString\":\"assert.deepEqual(spreadOut(), ['learning', 'to', 'code', 'is', 'fun'], '<code>spreadOut</code>应该返回<code>[\\\"learning\\\", \\\"to\\\", \\\"code\\\", \\\"is\\\", \\\"fun\\\"]</code>。');\"},{\"text\":\"<code>spreadOut</code>函数里应该用到展开语法。\",\"testString\":\"assert.notStrictEqual(spreadOut.toString().search(/[...]/), -1, '<code>spreadOut</code>函数里应该用到展开语法。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function spreadOut() {\\n  let fragment = ['to', 'code'];\\n  let sentence; // 请修改这一行\\n  return sentence;\\n}\\n\\n// 请不要修改本行以下的代码\\nconsole.log(spreadOut());\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-data-structures/check-for-the-presence-of-an-element-with-indexof\",\"id\":\"587d7b7b367417b2b2512b17\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/combine-arrays-with-the-spread-operator\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-data-structures-combine-arrays-with-the-spread-operator-eecbca388e6b9453117d.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Combine Arrays with the Spread Operator\",\"description\":[\"<dfn>展开运算符</dfn>的另一个大用处是合并数组，或者将某个数组的所有元素插入到另一个数组的任意位置。用传统的语法我们也可以连接两个数组，但只能两个数组首尾相接。而展开语法能使下面的操作变得极其简单：\",\"<blockquote>let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];<br><br>let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];<br>// thatArray 现在等于 ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</blockquote>\",\"使用展开语法，我们这样就实现了一个用传统方法要写得很复杂冗长的操作。\",\"<hr>\",\"我们已经定义了一个返回<code>sentence</code>变量的<code>spreadOut</code>函数，请修改该函数，利用<dfn>展开运算符</dfn>使该函数返回数组<code>['learning', 'to', 'code', 'is', 'fun']</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/combine-arrays-with-the-spread-operator\",\"blockName\":\"Basic Data Structures\",\"tests\":[{\"text\":\"<code>spreadOut</code>应该返回<code>[\\\"learning\\\", \\\"to\\\", \\\"code\\\", \\\"is\\\", \\\"fun\\\"]</code>。\",\"testString\":\"assert.deepEqual(spreadOut(), ['learning', 'to', 'code', 'is', 'fun'], '<code>spreadOut</code>应该返回<code>[\\\"learning\\\", \\\"to\\\", \\\"code\\\", \\\"is\\\", \\\"fun\\\"]</code>。');\"},{\"text\":\"<code>spreadOut</code>函数里应该用到展开语法。\",\"testString\":\"assert.notStrictEqual(spreadOut.toString().search(/[...]/), -1, '<code>spreadOut</code>函数里应该用到展开语法。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function spreadOut() {\\n  let fragment = ['to', 'code'];\\n  let sentence; // 请修改这一行\\n  return sentence;\\n}\\n\\n// 请不要修改本行以下的代码\\nconsole.log(spreadOut());\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-data-structures/check-for-the-presence-of-an-element-with-indexof\",\"id\":\"587d7b7b367417b2b2512b17\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-data-structures/combine-arrays-with-the-spread-operator\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-data-structures-combine-arrays-with-the-spread-operator.json\n// module id = 3739\n// module chunks = 180706749751465"],"sourceRoot":""}