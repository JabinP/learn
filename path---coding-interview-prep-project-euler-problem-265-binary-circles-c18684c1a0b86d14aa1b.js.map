{"version":3,"sources":["webpack:///path---coding-interview-prep-project-euler-problem-265-binary-circles-c18684c1a0b86d14aa1b.js","webpack:///./.cache/json/coding-interview-prep-project-euler-problem-265-binary-circles.json"],"names":["webpackJsonp","3045","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,8BAAAC,aAAA,otBAAAC,cAAA,EAAAC,QAAqyBC,KAAA,kEAAAC,UAAA,gBAAAC,QAA+GC,KAAA,sDAAAC,WAAA,0GAAmLC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,2EAA8HC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sEAAAC,GAAA,4BAAuKrB,KAAA","file":"path---coding-interview-prep-project-euler-problem-265-binary-circles-c18684c1a0b86d14aa1b.js","sourcesContent":["webpackJsonp([108438417660220],{\n\n/***/ 3045:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 265: Binary Circles\",\"description\":[\"2N binary digits can be placed in a circle so that all the N-digit clockwise subsequences are distinct.\",\"\",\"For N=3, two such circular arrangements are possible, ignoring rotations:\",\"\",\"\",\"For the first arrangement, the 3-digit subsequences, in clockwise order, are: 000, 001, 010, 101, 011, 111, 110 and 100.\",\"\",\"Each circular arrangement can be encoded as a number by concatenating the binary digits starting with the subsequence of all zeros as the most significant bits and proceeding clockwise. The two arrangements for N=3 are thus represented as 23 and 29:\",\"00010111 2 = 23\",\"00011101 2 = 29\",\"\",\"Calling S(N) the sum of the unique numeric representations, we can see that S(3) = 23 + 29 = 52.\",\"\",\"Find S(5).\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-265-binary-circles\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>euler265()</code> should return 209110240768.\",\"testString\":\"assert.strictEqual(euler265(), 209110240768, '<code>euler265()</code> should return 209110240768.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function euler265() {\\n  // Good luck!\\n  return true;\\n}\\n\\neuler265();\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-266-pseudo-square-root\",\"id\":\"5900f4761000cf542c50ff88\"},\"slug\":\"/coding-interview-prep/project-euler/problem-265-binary-circles\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-project-euler-problem-265-binary-circles-c18684c1a0b86d14aa1b.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Problem 265: Binary Circles\",\"description\":[\"2N binary digits can be placed in a circle so that all the N-digit clockwise subsequences are distinct.\",\"\",\"For N=3, two such circular arrangements are possible, ignoring rotations:\",\"\",\"\",\"For the first arrangement, the 3-digit subsequences, in clockwise order, are: 000, 001, 010, 101, 011, 111, 110 and 100.\",\"\",\"Each circular arrangement can be encoded as a number by concatenating the binary digits starting with the subsequence of all zeros as the most significant bits and proceeding clockwise. The two arrangements for N=3 are thus represented as 23 and 29:\",\"00010111 2 = 23\",\"00011101 2 = 29\",\"\",\"Calling S(N) the sum of the unique numeric representations, we can see that S(3) = 23 + 29 = 52.\",\"\",\"Find S(5).\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/project-euler/problem-265-binary-circles\",\"blockName\":\"Project Euler\",\"tests\":[{\"text\":\"<code>euler265()</code> should return 209110240768.\",\"testString\":\"assert.strictEqual(euler265(), 209110240768, '<code>euler265()</code> should return 209110240768.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function euler265() {\\n  // Good luck!\\n  return true;\\n}\\n\\neuler265();\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/project-euler/problem-266-pseudo-square-root\",\"id\":\"5900f4761000cf542c50ff88\"},\"slug\":\"/coding-interview-prep/project-euler/problem-265-binary-circles\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-project-euler-problem-265-binary-circles.json\n// module id = 3045\n// module chunks = 108438417660220"],"sourceRoot":""}