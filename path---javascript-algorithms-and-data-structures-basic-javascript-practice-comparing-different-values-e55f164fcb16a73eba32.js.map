{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-basic-javascript-practice-comparing-different-values-e55f164fcb16a73eba32.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-practice-comparing-different-values.json"],"names":["webpackJsonp","3827","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,sCAAAC,aAAA,4kBAAAC,cAAA,EAAAC,QAAuqBC,KAAA,kGAAAC,UAAA,mBAAAC,QAAkJC,KAAA,yDAAAC,WAAA,mHAA0MD,KAAA,yDAAAC,WAAA,mHAA0MD,KAAA,2BAAAC,WAAA,6DAA2GC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,8KAAuOC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sGAAAC,GAAA,4BAAuMrB,KAAA","file":"path---javascript-algorithms-and-data-structures-basic-javascript-practice-comparing-different-values-e55f164fcb16a73eba32.js","sourcesContent":["webpackJsonp([101472065560507],{\n\n/***/ 3827:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Practice comparing different values\",\"description\":[\"在上两个挑战中，我们学习了相等运算符 (<code>==</code>) 和严格相等运算符 (<code>===</code>)。现在让我们快速回顾并实践一下。\",\"如果要比较的值不是同一类型，相等运算符会先执行数据类型转换，然后比较值。而严格相等运算符只比较值，不会进行数据类型转换。\",\"由此可见，相等运算符和严格相等运算符的区别是：前者会执行隐式类型转换，后者不会。\",\"<strong>示例</strong>\",\"<blockquote>3 == '3'  // 返回 true，因为 JavaScript 会执行类型转换把字符串 '3' 转化成数字<br>3 === '3' // 返回 false，因为类型不同，而这里不会进行类型转换</blockquote>\",\"<strong>提示</strong><br>在JavaScript中，你可以使用<code>typeof</code>运算符确定变量的类型或值，如下所示：\",\"<blockquote>typeof 3   // 返回 'number'<br>typeof '3' // 返回 'string'</blockquote>\",\"<hr>\",\"编辑器中的<code>compareEquality</code>函数使用相等运算符比较两个值。修改函数，使其仅在值严格相等时返回 \\\"Equal\\\" 。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/practice-comparing-different-values\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"<code>compareEquality(10, \\\"10\\\")</code>应该返回 \\\"Not Equal\\\"\",\"testString\":\"assert(compareEquality(10, \\\"10\\\") === \\\"Not Equal\\\", '<code>compareEquality(10, \\\"10\\\")</code>应该返回 \\\"Not Equal\\\"');\"},{\"text\":\"<code>compareEquality(\\\"20\\\", 20)</code>应该返回 \\\"Not Equal\\\"\",\"testString\":\"assert(compareEquality(\\\"20\\\", 20) === \\\"Not Equal\\\", '<code>compareEquality(\\\"20\\\", 20)</code>应该返回 \\\"Not Equal\\\"');\"},{\"text\":\"你应该使用<code>===</code>运算符\",\"testString\":\"assert(code.match(/===/g), '你应该使用<code>===</code>运算符');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 初始化变量\\nfunction compareEquality(a, b) {\\n  if (a == b) { // 请修改这一行\\n    return \\\"Equal\\\";\\n  }\\n  return \\\"Not Equal\\\";\\n}\\n\\n// 你可以修改这一行来测试你的代码\\ncompareEquality(10, \\\"10\\\");\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-inequality-operator\",\"id\":\"599a789b454f2bbd91a3ff4d\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/practice-comparing-different-values\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-basic-javascript-practice-comparing-different-values-e55f164fcb16a73eba32.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Practice comparing different values\",\"description\":[\"在上两个挑战中，我们学习了相等运算符 (<code>==</code>) 和严格相等运算符 (<code>===</code>)。现在让我们快速回顾并实践一下。\",\"如果要比较的值不是同一类型，相等运算符会先执行数据类型转换，然后比较值。而严格相等运算符只比较值，不会进行数据类型转换。\",\"由此可见，相等运算符和严格相等运算符的区别是：前者会执行隐式类型转换，后者不会。\",\"<strong>示例</strong>\",\"<blockquote>3 == '3'  // 返回 true，因为 JavaScript 会执行类型转换把字符串 '3' 转化成数字<br>3 === '3' // 返回 false，因为类型不同，而这里不会进行类型转换</blockquote>\",\"<strong>提示</strong><br>在JavaScript中，你可以使用<code>typeof</code>运算符确定变量的类型或值，如下所示：\",\"<blockquote>typeof 3   // 返回 'number'<br>typeof '3' // 返回 'string'</blockquote>\",\"<hr>\",\"编辑器中的<code>compareEquality</code>函数使用相等运算符比较两个值。修改函数，使其仅在值严格相等时返回 \\\"Equal\\\" 。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/practice-comparing-different-values\",\"blockName\":\"Basic JavaScript\",\"tests\":[{\"text\":\"<code>compareEquality(10, \\\"10\\\")</code>应该返回 \\\"Not Equal\\\"\",\"testString\":\"assert(compareEquality(10, \\\"10\\\") === \\\"Not Equal\\\", '<code>compareEquality(10, \\\"10\\\")</code>应该返回 \\\"Not Equal\\\"');\"},{\"text\":\"<code>compareEquality(\\\"20\\\", 20)</code>应该返回 \\\"Not Equal\\\"\",\"testString\":\"assert(compareEquality(\\\"20\\\", 20) === \\\"Not Equal\\\", '<code>compareEquality(\\\"20\\\", 20)</code>应该返回 \\\"Not Equal\\\"');\"},{\"text\":\"你应该使用<code>===</code>运算符\",\"testString\":\"assert(code.match(/===/g), '你应该使用<code>===</code>运算符');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"// 初始化变量\\nfunction compareEquality(a, b) {\\n  if (a == b) { // 请修改这一行\\n    return \\\"Equal\\\";\\n  }\\n  return \\\"Not Equal\\\";\\n}\\n\\n// 你可以修改这一行来测试你的代码\\ncompareEquality(10, \\\"10\\\");\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-inequality-operator\",\"id\":\"599a789b454f2bbd91a3ff4d\"},\"slug\":\"/javascript-algorithms-and-data-structures/basic-javascript/practice-comparing-different-values\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-basic-javascript-practice-comparing-different-values.json\n// module id = 3827\n// module chunks = 101472065560507"],"sourceRoot":""}