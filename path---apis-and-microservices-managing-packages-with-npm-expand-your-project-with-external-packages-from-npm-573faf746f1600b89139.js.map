{"version":3,"sources":["webpack:///path---apis-and-microservices-managing-packages-with-npm-expand-your-project-with-external-packages-from-npm-573faf746f1600b89139.js","webpack:///./.cache/json/apis-and-microservices-managing-packages-with-npm-expand-your-project-with-external-packages-from-npm.json"],"names":["webpackJsonp","2782","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,sDAAAC,SAAA,KAAAC,aAAA,yNAA+S,kGAA0G,qGAAAC,cAAA,EAAAC,QAA0IC,UAAA,6BAAAC,KAAA,yGAAAC,QAAmKC,KAAA,gCAAAC,WAAA,8PAAsTD,KAAA,4BAAAC,WAAA,mRAAsUC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,kHAAAC,GAAA,4BAAmNV,KAAA","file":"path---apis-and-microservices-managing-packages-with-npm-expand-your-project-with-external-packages-from-npm-573faf746f1600b89139.js","sourcesContent":["webpackJsonp([159076324196427],{\n\n/***/ 2782:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Expand Your Project with External Packages from npm\",\"guideUrl\":null,\"description\":[\"使用包管理器的最大原因之一是它们强大的依赖管理特性。在新的计算机上开始一个项目时，不用手动确认你已安装所有的依赖，npm 会自动为你安装它们。但是 npm 如何准确的知道你项目需要哪些依赖呢？我们来看看 package.json 中 dependencies 这一部分。\",\"在 dependencies 这一部分，你的项目需要按照下面这种格式来存储这些依赖包：\",\"<code>\\\"dependencies\\\": {</code>\",\"<code>  \\\"package-name\\\": \\\"version\\\",</code>\",\"<code>  \\\"express\\\": \\\"4.14.0\\\"</code>\",\"<code>}</code>\",\"说明：\",\"在 package.json 的 dependencies 字段中添加一个版本号为 2.14.0 的 moment 包。\",\"Moment 是一个非常方便的库，它用来处理时间和日期。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Managing Packages with Npm\",\"slug\":\"/apis-and-microservices/managing-packages-with-npm/expand-your-project-with-external-packages-from-npm\",\"tests\":[{\"text\":\"\\\"dependencies\\\" 应该包含 \\\"moment\\\"。\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);  assert.property(packJson.dependencies, 'moment', '\\\"dependencies\\\" 未包含 \\\"moment\\\"'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"\\\"moment\\\" 的版本应该是 \\\"2.14.0\\\"。\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);  assert.match(packJson.dependencies.moment, /^[\\\\^\\\\~]?2\\\\.14\\\\.0/, '安装的 \\\"moment\\\" 版本有误。它应该是 2.14.0'); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/apis-and-microservices/managing-packages-with-npm/manage-npm-dependencies-by-understanding-semantic-versioning\",\"id\":\"587d7fb4367417b2b2512c00\"},\"slug\":\"/apis-and-microservices/managing-packages-with-npm/expand-your-project-with-external-packages-from-npm\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---apis-and-microservices-managing-packages-with-npm-expand-your-project-with-external-packages-from-npm-573faf746f1600b89139.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Expand Your Project with External Packages from npm\",\"guideUrl\":null,\"description\":[\"使用包管理器的最大原因之一是它们强大的依赖管理特性。在新的计算机上开始一个项目时，不用手动确认你已安装所有的依赖，npm 会自动为你安装它们。但是 npm 如何准确的知道你项目需要哪些依赖呢？我们来看看 package.json 中 dependencies 这一部分。\",\"在 dependencies 这一部分，你的项目需要按照下面这种格式来存储这些依赖包：\",\"<code>\\\"dependencies\\\": {</code>\",\"<code>  \\\"package-name\\\": \\\"version\\\",</code>\",\"<code>  \\\"express\\\": \\\"4.14.0\\\"</code>\",\"<code>}</code>\",\"说明：\",\"在 package.json 的 dependencies 字段中添加一个版本号为 2.14.0 的 moment 包。\",\"Moment 是一个非常方便的库，它用来处理时间和日期。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Managing Packages with Npm\",\"slug\":\"/apis-and-microservices/managing-packages-with-npm/expand-your-project-with-external-packages-from-npm\",\"tests\":[{\"text\":\"\\\"dependencies\\\" 应该包含 \\\"moment\\\"。\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);  assert.property(packJson.dependencies, 'moment', '\\\"dependencies\\\" 未包含 \\\"moment\\\"'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"\\\"moment\\\" 的版本应该是 \\\"2.14.0\\\"。\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/package.json').then(data => { var packJson = JSON.parse(data);  assert.match(packJson.dependencies.moment, /^[\\\\^\\\\~]?2\\\\.14\\\\.0/, '安装的 \\\"moment\\\" 版本有误。它应该是 2.14.0'); }, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/apis-and-microservices/managing-packages-with-npm/manage-npm-dependencies-by-understanding-semantic-versioning\",\"id\":\"587d7fb4367417b2b2512c00\"},\"slug\":\"/apis-and-microservices/managing-packages-with-npm/expand-your-project-with-external-packages-from-npm\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/apis-and-microservices-managing-packages-with-npm-expand-your-project-with-external-packages-from-npm.json\n// module id = 2782\n// module chunks = 159076324196427"],"sourceRoot":""}