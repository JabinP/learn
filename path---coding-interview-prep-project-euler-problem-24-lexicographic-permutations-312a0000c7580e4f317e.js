webpackJsonp([98474099104996],{3017:function(e,t){e.exports={data:{challengeNode:{title:"Problem 24: Lexicographic permutations",description:["排列指的是将一组物体进行有顺序的放置。例如，3124 是数字 1、2、3、4 的一个排列。如果把所有排列按照数字大小或字母先后进行排序，我们称之为字典序排列。0、1、2 的字典序排列是：","<div style='text-align: center;'>012   021   102   120   201   210</div>","数字 0、1、2、3、4、5、6、7、8、9 的字典序排列中第 <var>n</var> 位的排列是什么？"],challengeType:5,fields:{slug:"/coding-interview-prep/project-euler/problem-24-lexicographic-permutations",blockName:"Project Euler",tests:[{text:"<code>lexicographicPermutations(699999)</code>应该返回 1938246570。",testString:"assert(lexicographicPermutations(699999) == 1938246570, '<code>lexicographicPermutations(699999)</code>应该返回 1938246570。');"},{text:"<code>lexicographicPermutations(899999)</code>应该返回 2536987410。",testString:"assert(lexicographicPermutations(899999) == 2536987410, '<code>lexicographicPermutations(899999)</code>应该返回 2536987410。');"},{text:"<code>lexicographicPermutations(900000)</code>应该返回 2537014689。",testString:"assert(lexicographicPermutations(900000) == 2537014689, '<code>lexicographicPermutations(900000)</code>应该返回 2537014689。');"},{text:"<code>lexicographicPermutations(999999)</code>应该返回 2783915460。",testString:"assert(lexicographicPermutations(999999) == 2783915460, '<code>lexicographicPermutations(999999)</code>应该返回 2783915460。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function lexicographicPermutations(n) {\n  // 祝你好运！\n  return n;\n}\n\nlexicographicPermutations(999999);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/project-euler/problem-25-1000-digit-fibonacci-number",id:"5900f3841000cf542c50fe97"},slug:"/coding-interview-prep/project-euler/problem-24-lexicographic-permutations"}}}});
//# sourceMappingURL=path---coding-interview-prep-project-euler-problem-24-lexicographic-permutations-312a0000c7580e4f317e.js.map