{"version":3,"sources":["webpack:///path---coding-interview-prep-data-structures-perform-a-union-on-two-sets-7a6bb695c9426f92e868.js","webpack:///./.cache/json/coding-interview-prep-data-structures-perform-a-union-on-two-sets.json"],"names":["webpackJsonp","2844","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,8BAAAC,aAAA,kRAAAC,cAAA,EAAAC,QAAmWC,KAAA,qEAAAC,UAAA,kBAAAC,QAAoHC,KAAA,2CAAAC,WAAA,yIAAwMD,KAAA,kCAAAC,WAAA,mZAAwcC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,y5BAA48BC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,qFAAAC,GAAA,4BAAsLrB,KAAA","file":"path---coding-interview-prep-data-structures-perform-a-union-on-two-sets-7a6bb695c9426f92e868.js","sourcesContent":["webpackJsonp([197742429895875],{\n\n/***/ 2844:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Perform a Union on Two Sets\",\"description\":[\"在本次练习中，我们来写一个合并两个集合中元素的方法。我们需要在<code>Set</code>数据结构中创建<code>union</code>方法，该方法接收另一个<code>Set</code>为参数并返回两个集合中，非重复元素的合集。\",\"举个例子，集合<code>setA = ['a','b','c']</code>和集合<code>setB = ['a','b','d','e']</code>合并之后的集合为：<code>setA.union(setB) = ['a', 'b', 'c', 'd', 'e']</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/perform-a-union-on-two-sets\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>Set</code>应该有<code>union</code>方法。\",\"testString\":\"assert((function(){var test = new Set(); return (typeof test.union === 'function')})(), '<code>Set</code>应该有<code>union</code>方法。');\"},{\"text\":\"<code>union</code>方法应返回正确的集合结果。\",\"testString\":\"assert((function(){var setA = new Set();  var setB = new Set();  setA.add('a');  setA.add('b');  setA.add('c');  setB.add('c');  setB.add('d');  var unionSetAB = setA.union(setB); var final = unionSetAB.values(); return (final.indexOf('a') !== -1 && final.indexOf('b') !== -1 && final.indexOf('c') !== -1 && final.indexOf('d') !== -1 && final.length === 4)})(), '<code>union</code>方法应返回正确的集合结果。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Set() {\\n    // collection 变量用来存储集合中的元素\\n    var collection = [];\\n    // 当集合中存在 element 元素时返回 true 否则返回 false\\n    this.has = function(element) {\\n        return (collection.indexOf(element) !== -1);\\n    };\\n    // 该方法会返回集合内所有元素\\n    this.values = function() {\\n        return collection;\\n    };\\n    // 该方法会把 element 添加到集合中\\n    this.add = function(element) {\\n        if(!this.has(element)){\\n            collection.push(element);\\n            return true;\\n        }\\n        return false;\\n    };\\n    // 该方法用于从集合中移除 element 元素\\n    this.remove = function(element) {\\n        if(this.has(element)){\\n           var index = collection.indexOf(element);\\n            collection.splice(index,1);\\n            return true;\\n        }\\n        return false;\\n    };\\n    // 该方法返回集合长度\\n    this.size = function() {\\n        return collection.length;\\n    };\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/perform-an-intersection-on-two-sets-of-data\",\"id\":\"587d8253367417b2b2512c6c\"},\"slug\":\"/coding-interview-prep/data-structures/perform-a-union-on-two-sets\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-data-structures-perform-a-union-on-two-sets-7a6bb695c9426f92e868.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Perform a Union on Two Sets\",\"description\":[\"在本次练习中，我们来写一个合并两个集合中元素的方法。我们需要在<code>Set</code>数据结构中创建<code>union</code>方法，该方法接收另一个<code>Set</code>为参数并返回两个集合中，非重复元素的合集。\",\"举个例子，集合<code>setA = ['a','b','c']</code>和集合<code>setB = ['a','b','d','e']</code>合并之后的集合为：<code>setA.union(setB) = ['a', 'b', 'c', 'd', 'e']</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/perform-a-union-on-two-sets\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>Set</code>应该有<code>union</code>方法。\",\"testString\":\"assert((function(){var test = new Set(); return (typeof test.union === 'function')})(), '<code>Set</code>应该有<code>union</code>方法。');\"},{\"text\":\"<code>union</code>方法应返回正确的集合结果。\",\"testString\":\"assert((function(){var setA = new Set();  var setB = new Set();  setA.add('a');  setA.add('b');  setA.add('c');  setB.add('c');  setB.add('d');  var unionSetAB = setA.union(setB); var final = unionSetAB.values(); return (final.indexOf('a') !== -1 && final.indexOf('b') !== -1 && final.indexOf('c') !== -1 && final.indexOf('d') !== -1 && final.length === 4)})(), '<code>union</code>方法应返回正确的集合结果。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function Set() {\\n    // collection 变量用来存储集合中的元素\\n    var collection = [];\\n    // 当集合中存在 element 元素时返回 true 否则返回 false\\n    this.has = function(element) {\\n        return (collection.indexOf(element) !== -1);\\n    };\\n    // 该方法会返回集合内所有元素\\n    this.values = function() {\\n        return collection;\\n    };\\n    // 该方法会把 element 添加到集合中\\n    this.add = function(element) {\\n        if(!this.has(element)){\\n            collection.push(element);\\n            return true;\\n        }\\n        return false;\\n    };\\n    // 该方法用于从集合中移除 element 元素\\n    this.remove = function(element) {\\n        if(this.has(element)){\\n           var index = collection.indexOf(element);\\n            collection.splice(index,1);\\n            return true;\\n        }\\n        return false;\\n    };\\n    // 该方法返回集合长度\\n    this.size = function() {\\n        return collection.length;\\n    };\\n    // 请把你的代码写在这条注释以下\\n\\n    // 请把你的代码写在这条注释以上\\n}\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/perform-an-intersection-on-two-sets-of-data\",\"id\":\"587d8253367417b2b2512c6c\"},\"slug\":\"/coding-interview-prep/data-structures/perform-a-union-on-two-sets\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-data-structures-perform-a-union-on-two-sets.json\n// module id = 2844\n// module chunks = 197742429895875"],"sourceRoot":""}