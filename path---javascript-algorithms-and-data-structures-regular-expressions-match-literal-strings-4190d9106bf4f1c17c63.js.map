{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-regular-expressions-match-literal-strings-4190d9106bf4f1c17c63.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-regular-expressions-match-literal-strings.json"],"names":["webpackJsonp","3997","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,wBAAAC,aAAA,gSAAqT,sNAA2N,6HAAAC,cAAA,EAAAC,QAA8LC,KAAA,uFAAAC,UAAA,sBAAAC,QAA0IC,KAAA,2DAAAC,WAAA,0GAA2LD,KAAA,8CAAAC,WAAA,kHAAoLD,KAAA,0BAAAC,WAAA,iEAA8GC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,oJAAyMC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,qHAAAC,GAAA,4BAAsNrB,KAAA","file":"path---javascript-algorithms-and-data-structures-regular-expressions-match-literal-strings-4190d9106bf4f1c17c63.js","sourcesContent":["webpackJsonp([155042982817446],{\n\n/***/ 3997:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Match Literal Strings\",\"description\":[\"在上一个挑战中，你使用正则表达式<code>/Hello/</code>搜索到了字符串<code>\\\"Hello\\\"</code>。那个正则表达式在字符串中搜寻<code>\\\"Hello\\\"</code>的文字匹配。下面是另一个在字符串中搜寻<code>\\\"Kevin\\\"</code>的示例：\",\"<blockquote>let testStr = \\\"Hello, my name is Kevin.\\\";<br>let testRegex = /Kevin/;<br>testRegex.test(testStr);<br>// Returns true</blockquote>\",\"任何其他形式的<code>\\\"Kevin\\\"</code>都不会被匹配。例如，正则表达式<code>/Kevin/</code>不会匹配<code>\\\"kevin\\\"</code>或者<code>\\\"KEVIN\\\"</code>。\",\"<blockquote>let wrongRegex = /kevin/;<br>wrongRegex.test(testStr);<br>// Returns false</blockquote>\",\"后续的挑战将为你展示如何匹配其他形式的字符串。\",\"<hr>\",\"完成正则表达式<code>waldoRegex</code>，在字符串<code>waldoIsHiding</code>中匹配到文本<code>\\\"Waldo\\\"</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings\",\"blockName\":\"Regular Expressions\",\"tests\":[{\"text\":\"你的正则表达式<code>waldoRegex</code>应该匹配到<code>\\\"Waldo\\\"</code>。\",\"testString\":\"assert(waldoRegex.test(waldoIsHiding), '你的正则表达式<code>waldoRegex</code>应该匹配到<code>\\\"Waldo\\\"</code>。');\"},{\"text\":\"你的正则表达式<code>waldoRegex</code>不应该搜寻其他的任何内容。\",\"testString\":\"assert(!waldoRegex.test('Somewhere is hiding in this text.'), '你的正则表达式<code>waldoRegex</code>不应该搜寻其他的任何内容。');\"},{\"text\":\"你应该使用你的正则表达式对字符串执行文字匹配。\",\"testString\":\"assert(!/\\\\/.*\\\\/i/.test(code), '你应该使用你的正则表达式对字符串执行文字匹配。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let waldoIsHiding = \\\"Somewhere Waldo is hiding in this text.\\\";\\nlet waldoRegex = /search/; // 修改这一行\\nlet result = waldoRegex.test(waldoIsHiding);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities\",\"id\":\"587d7db3367417b2b2512b8f\"},\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-regular-expressions-match-literal-strings-4190d9106bf4f1c17c63.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Match Literal Strings\",\"description\":[\"在上一个挑战中，你使用正则表达式<code>/Hello/</code>搜索到了字符串<code>\\\"Hello\\\"</code>。那个正则表达式在字符串中搜寻<code>\\\"Hello\\\"</code>的文字匹配。下面是另一个在字符串中搜寻<code>\\\"Kevin\\\"</code>的示例：\",\"<blockquote>let testStr = \\\"Hello, my name is Kevin.\\\";<br>let testRegex = /Kevin/;<br>testRegex.test(testStr);<br>// Returns true</blockquote>\",\"任何其他形式的<code>\\\"Kevin\\\"</code>都不会被匹配。例如，正则表达式<code>/Kevin/</code>不会匹配<code>\\\"kevin\\\"</code>或者<code>\\\"KEVIN\\\"</code>。\",\"<blockquote>let wrongRegex = /kevin/;<br>wrongRegex.test(testStr);<br>// Returns false</blockquote>\",\"后续的挑战将为你展示如何匹配其他形式的字符串。\",\"<hr>\",\"完成正则表达式<code>waldoRegex</code>，在字符串<code>waldoIsHiding</code>中匹配到文本<code>\\\"Waldo\\\"</code>。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings\",\"blockName\":\"Regular Expressions\",\"tests\":[{\"text\":\"你的正则表达式<code>waldoRegex</code>应该匹配到<code>\\\"Waldo\\\"</code>。\",\"testString\":\"assert(waldoRegex.test(waldoIsHiding), '你的正则表达式<code>waldoRegex</code>应该匹配到<code>\\\"Waldo\\\"</code>。');\"},{\"text\":\"你的正则表达式<code>waldoRegex</code>不应该搜寻其他的任何内容。\",\"testString\":\"assert(!waldoRegex.test('Somewhere is hiding in this text.'), '你的正则表达式<code>waldoRegex</code>不应该搜寻其他的任何内容。');\"},{\"text\":\"你应该使用你的正则表达式对字符串执行文字匹配。\",\"testString\":\"assert(!/\\\\/.*\\\\/i/.test(code), '你应该使用你的正则表达式对字符串执行文字匹配。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"let waldoIsHiding = \\\"Somewhere Waldo is hiding in this text.\\\";\\nlet waldoRegex = /search/; // 修改这一行\\nlet result = waldoRegex.test(waldoIsHiding);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities\",\"id\":\"587d7db3367417b2b2512b8f\"},\"slug\":\"/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-regular-expressions-match-literal-strings.json\n// module id = 3997\n// module chunks = 155042982817446"],"sourceRoot":""}