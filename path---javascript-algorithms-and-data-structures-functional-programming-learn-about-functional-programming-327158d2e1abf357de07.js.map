{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-functional-programming-learn-about-functional-programming-327158d2e1abf357de07.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-functional-programming-learn-about-functional-programming.json"],"names":["webpackJsonp","3909","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,qCAAAC,aAAA,gXAAAC,cAAA,EAAAC,QAAwcC,KAAA,uGAAAC,UAAA,yBAAAC,QAA6JC,KAAA,6CAAAC,WAAA,qFAAsJD,KAAA,0CAAAC,WAAA,uFAAoJC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,yeAA4hBC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,kHAAAC,GAAA,4BAAmNrB,KAAA","file":"path---javascript-algorithms-and-data-structures-functional-programming-learn-about-functional-programming-327158d2e1abf357de07.js","sourcesContent":["webpackJsonp([242312545734933],{\n\n/***/ 3909:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Learn About Functional Programming\",\"description\":[\"函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的编程范式。\",\"<code>INPUT -> PROCESS -> OUTPUT</code>\",\"函数式编程：\",\"1）功能独立——不依赖于程序的状态（比如可能发生变化的全局变量）；\",\"2）纯函数——同一个输入永远能得到同一个输出；\",\"3）有限的副作用——可以严格地限制函数外部对状态的更改导致的状态变化。\",\"<hr>\",\"freeCodeCamp 成员在 love tea 的故事。\",\"在代码编辑器中，已经为你定义好了<code>prepareTea</code>和<code>getTea</code>函数。调用<code>getTea</code>函数为团队准备 40 杯茶，并将它们存储在<code>tea4TeamFCC</code>变量里。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming\",\"blockName\":\"Functional Programming\",\"tests\":[{\"text\":\"<code>tea4TeamFCC</code>变量里应有 40 杯为团队准备的茶。\",\"testString\":\"assert(tea4TeamFCC.length === 40, '<code>tea4TeamFCC</code>变量里应有 40 杯为团队准备的茶。');\"},{\"text\":\"<code>tea4TeamFCC</code>变量里应有 greenTea。\",\"testString\":\"assert(tea4TeamFCC[0] === 'greenTea', '<code>tea4TeamFCC</code>变量里应有 greenTea。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"/**\\n * 备茶过程\\n * @return {string} 一杯茶\\n **/\\nconst prepareTea = () => 'greenTea';\\n\\n/**\\n * 获得一定数量的茶\\n * @param {number} numOfCups 所需茶的数量\\n * @return {Array<string>} 返回给定量的茶\\n **/\\nconst getTea = (numOfCups) => {\\n  const teaCups = [];\\n  \\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\\n    const teaCup = prepareTea();\\n    teaCups.push(teaCup);\\n  }\\n\\n  return teaCups;\\n};\\n\\n// 请在本行以下添加你的代码\\n\\nconst tea4TeamFCC = null; // :(\\n\\n// 请在本行以上添加你的代码\\n\\nconsole.log(tea4TeamFCC);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology\",\"id\":\"587d7b8d367417b2b2512b5b\"},\"slug\":\"/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-functional-programming-learn-about-functional-programming-327158d2e1abf357de07.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Learn About Functional Programming\",\"description\":[\"函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的编程范式。\",\"<code>INPUT -> PROCESS -> OUTPUT</code>\",\"函数式编程：\",\"1）功能独立——不依赖于程序的状态（比如可能发生变化的全局变量）；\",\"2）纯函数——同一个输入永远能得到同一个输出；\",\"3）有限的副作用——可以严格地限制函数外部对状态的更改导致的状态变化。\",\"<hr>\",\"freeCodeCamp 成员在 love tea 的故事。\",\"在代码编辑器中，已经为你定义好了<code>prepareTea</code>和<code>getTea</code>函数。调用<code>getTea</code>函数为团队准备 40 杯茶，并将它们存储在<code>tea4TeamFCC</code>变量里。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming\",\"blockName\":\"Functional Programming\",\"tests\":[{\"text\":\"<code>tea4TeamFCC</code>变量里应有 40 杯为团队准备的茶。\",\"testString\":\"assert(tea4TeamFCC.length === 40, '<code>tea4TeamFCC</code>变量里应有 40 杯为团队准备的茶。');\"},{\"text\":\"<code>tea4TeamFCC</code>变量里应有 greenTea。\",\"testString\":\"assert(tea4TeamFCC[0] === 'greenTea', '<code>tea4TeamFCC</code>变量里应有 greenTea。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"/**\\n * 备茶过程\\n * @return {string} 一杯茶\\n **/\\nconst prepareTea = () => 'greenTea';\\n\\n/**\\n * 获得一定数量的茶\\n * @param {number} numOfCups 所需茶的数量\\n * @return {Array<string>} 返回给定量的茶\\n **/\\nconst getTea = (numOfCups) => {\\n  const teaCups = [];\\n  \\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\\n    const teaCup = prepareTea();\\n    teaCups.push(teaCup);\\n  }\\n\\n  return teaCups;\\n};\\n\\n// 请在本行以下添加你的代码\\n\\nconst tea4TeamFCC = null; // :(\\n\\n// 请在本行以上添加你的代码\\n\\nconsole.log(tea4TeamFCC);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology\",\"id\":\"587d7b8d367417b2b2512b5b\"},\"slug\":\"/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-functional-programming-learn-about-functional-programming.json\n// module id = 3909\n// module chunks = 242312545734933"],"sourceRoot":""}