webpackJsonp([0x6ef968efc8c8],{3896:function(e,t){e.exports={data:{challengeNode:{title:"Write Arrow Functions with Parameters",description:["和一般的函数一样，你也可以给箭头函数传递参数。","<blockquote>// 给传入的数值乘以 2 并返回结果<br>const doubler = (item) => item * 2;</blockquote>","你同样可以给箭头函数传递多个参数。","<hr>","使用箭头函数的语法重写<code>myConcat</code>函数，使其可以将<code>arr2</code>的内容填充在<code>arr1</code>里。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters",blockName:"ES6",tests:[{text:"替换掉所有的<code>var</code>关键字。",testString:"getUserInput => assert(!getUserInput('index').match(/var/g), '替换掉所有的<code>var</code>关键字。');"},{text:"<code>myConcat</code>应该是一个常量 (使用<code>const</code>)。",testString:"getUserInput => assert(getUserInput('index').match(/const\\s+myConcat/g), '<code>myConcat</code>应该是一个常量 (使用<code>const</code>)。');"},{text:"<code>myConcat</code>应该是一个函数。",testString:"assert(typeof myConcat === 'function', '<code>myConcat</code>应该是一个函数。');"},{text:"<code>myConcat()</code>返回正确的<code>array</code>。",testString:"assert(() => { const a = myConcat([1], [2]); return a[0] == 1 && a[1] == 2; }, '<code>myConcat()</code>返回正确的<code>array</code>。');"},{text:"不要使用<code>function</code>关键字。",testString:"getUserInput => assert(!getUserInput('index').match(/function/g), '不要使用<code>function</code>关键字。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'var myConcat = function(arr1, arr2) {\n  "use strict";\n  return arr1.concat(arr2);\n};\n// 测试你的代码\nconsole.log(myConcat([1, 2], [3, 4, 5]));',head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/es6/write-higher-order-arrow-functions",id:"587d7b88367417b2b2512b44"},slug:"/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-es-6-write-arrow-functions-with-parameters-928e4f09a4b7575dc0e0.js.map