{"version":3,"sources":["webpack:///path---front-end-libraries-react-render-with-an-ifelse-condition-20e2a590673c03557ce4.js","webpack:///./.cache/json/front-end-libraries-react-render-with-an-ifelse-condition.json"],"names":["webpackJsonp","3598","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,mCAAAC,aAAA,qcAAgdC,cAAA,EAAAC,QAA2EC,KAAA,6DAAAC,UAAA,QAAAC,QAAkGC,KAAA,oCAAAC,WAAA,sMAA8PD,KAAA,2GAAAC,WAAA,8nBAA6vBD,KAAA,4FAAAC,WAAA,gnBAAguBD,KAAA,6EAAAC,WAAA,2LAA2RC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,wfAA6iBC,KAAA,GAAAC,KAAA,wEAA0FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,iEAAAC,GAAA,4BAAuHxB,KAAA","file":"path---front-end-libraries-react-render-with-an-ifelse-condition-20e2a590673c03557ce4.js","sourcesContent":["webpackJsonp([77827367288577],{\n\n/***/ 3598:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Render with an If/Else Condition\",\"description\":[\"使用 JavaScript 控制渲染视图的另一个应用是将渲染的元素绑定到一个条件。当条件为真时，将呈现一个视图，反之，则呈现另一种视图。你可以在 React 组件的<code>render()</code>方法中使用的标准<code>if/else</code>语句来实现这一点。\",\"<hr>\",\"MyComponent 的 state 中包含一个<code>布尔值</code>，用于跟踪是否要在 UI 中显示某个元素。<code>按钮</code>切换此值的状态。目前，它每次都呈现相同的 UI。用<code>if/else</code>语句重写<code>render()</code>方法，如果<code>display</code>为<code>true</code>则返回当前标记。否则，返回不带<code>h1</code>元素的标记。\",\"<strong>注意：</strong>&nbsp;写<code>if/else</code>语句才能通过测试，使用三元运算符是不会通过的。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/render-with-an-ifelse-condition\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该存在并被渲染。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('MyComponent').length === 1; })(), '<code>MyComponent</code>应该存在并被渲染。');\"},{\"text\":\"当<code>display</code>被设置为<code>true</code>时，<code>div</code>、<code>button</code>和<code>h1</code>标签应该被渲染。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: true}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(mockedComponent.find('div').length === 1 && mockedComponent.find('div').children().length === 2 && mockedComponent.find('button').length === 1 && mockedComponent.find('h1').length === 1, '当<code>display</code>被设置为<code>true</code>时，<code>div</code>、<code>button</code>和<code>h1</code>标签应该被渲染。'); }; \"},{\"text\":\"当<code>display</code>被设置为<code>false</code>时，只有<code>div</code>和<code>button</code>应该被渲染。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: false}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(mockedComponent.find('div').length === 1 && mockedComponent.find('div').children().length === 1 && mockedComponent.find('button').length === 1 && mockedComponent.find('h1').length === 0, '当<code>display</code>被设置为<code>false</code>时，只有<code>div</code>和<code>button</code>应该被渲染。'); }; \"},{\"text\":\"render 方法中应该使用<code>if/else</code>语句来检查<code>this.state.display</code>的条件。\",\"testString\":\"getUserInput => assert(getUserInput('index').includes('if') && getUserInput('index').includes('else'), 'render 方法中应该使用<code>if/else</code>语句来检查<code>this.state.display</code>的条件。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      display: true\\n    }\\n    this.toggleDisplay = this.toggleDisplay.bind(this);\\n  }\\n  toggleDisplay() {\\n    this.setState({\\n      display: !this.state.display\\n    });\\n  }\\n  render() {\\n    // change code below this line\\n\\n    return (\\n       <div>\\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\\n         <h1>Displayed!</h1>\\n       </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/use--for-a-more-concise-conditional\",\"id\":\"5a24c314108439a4d4036184\"},\"slug\":\"/front-end-libraries/react/render-with-an-ifelse-condition\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-render-with-an-ifelse-condition-20e2a590673c03557ce4.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Render with an If/Else Condition\",\"description\":[\"使用 JavaScript 控制渲染视图的另一个应用是将渲染的元素绑定到一个条件。当条件为真时，将呈现一个视图，反之，则呈现另一种视图。你可以在 React 组件的<code>render()</code>方法中使用的标准<code>if/else</code>语句来实现这一点。\",\"<hr>\",\"MyComponent 的 state 中包含一个<code>布尔值</code>，用于跟踪是否要在 UI 中显示某个元素。<code>按钮</code>切换此值的状态。目前，它每次都呈现相同的 UI。用<code>if/else</code>语句重写<code>render()</code>方法，如果<code>display</code>为<code>true</code>则返回当前标记。否则，返回不带<code>h1</code>元素的标记。\",\"<strong>注意：</strong>&nbsp;写<code>if/else</code>语句才能通过测试，使用三元运算符是不会通过的。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/render-with-an-ifelse-condition\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该存在并被渲染。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); return mockedComponent.find('MyComponent').length === 1; })(), '<code>MyComponent</code>应该存在并被渲染。');\"},{\"text\":\"当<code>display</code>被设置为<code>true</code>时，<code>div</code>、<code>button</code>和<code>h1</code>标签应该被渲染。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: true}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(mockedComponent.find('div').length === 1 && mockedComponent.find('div').children().length === 2 && mockedComponent.find('button').length === 1 && mockedComponent.find('h1').length === 1, '当<code>display</code>被设置为<code>true</code>时，<code>div</code>、<code>button</code>和<code>h1</code>标签应该被渲染。'); }; \"},{\"text\":\"当<code>display</code>被设置为<code>false</code>时，只有<code>div</code>和<code>button</code>应该被渲染。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const state_1 = () => { mockedComponent.setState({display: false}); return waitForIt(() => mockedComponent )}; const updated = await state_1(); assert(mockedComponent.find('div').length === 1 && mockedComponent.find('div').children().length === 1 && mockedComponent.find('button').length === 1 && mockedComponent.find('h1').length === 0, '当<code>display</code>被设置为<code>false</code>时，只有<code>div</code>和<code>button</code>应该被渲染。'); }; \"},{\"text\":\"render 方法中应该使用<code>if/else</code>语句来检查<code>this.state.display</code>的条件。\",\"testString\":\"getUserInput => assert(getUserInput('index').includes('if') && getUserInput('index').includes('else'), 'render 方法中应该使用<code>if/else</code>语句来检查<code>this.state.display</code>的条件。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      display: true\\n    }\\n    this.toggleDisplay = this.toggleDisplay.bind(this);\\n  }\\n  toggleDisplay() {\\n    this.setState({\\n      display: !this.state.display\\n    });\\n  }\\n  render() {\\n    // change code below this line\\n\\n    return (\\n       <div>\\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\\n         <h1>Displayed!</h1>\\n       </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/use--for-a-more-concise-conditional\",\"id\":\"5a24c314108439a4d4036184\"},\"slug\":\"/front-end-libraries/react/render-with-an-ifelse-condition\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-render-with-an-ifelse-condition.json\n// module id = 3598\n// module chunks = 77827367288577"],"sourceRoot":""}