{"version":3,"sources":["webpack:///path---front-end-libraries-redux-use-const-for-action-types-38ec62dd5764187c9d92.js","webpack:///./.cache/json/front-end-libraries-redux-use-const-for-action-types.json"],"names":["webpackJsonp","3628","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6BAAAC,aAAA,gsBAAioBC,cAAA,EAAAC,QAA+IC,KAAA,wDAAAC,UAAA,QAAAC,QAA6FC,KAAA,4IAAAC,WAAA,uLAAuVD,KAAA,8IAAAC,WAAA,2LAA6VD,KAAA,6GAAAC,WAAA,oKAAqSD,KAAA,4HAAAC,WAAA,wVAAweD,KAAA,8HAAAC,WAAA,kXAAogBD,KAAA,qGAAAC,WAAA,mWAA4dD,KAAA,0KAAAC,WAAA,0fAAwrBD,KAAA,iHAAAC,WAAA,+YAAmhBC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2GC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,ulBAA4oBC,KAAA,GAAAC,KAAA,OAAyBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAjB,WAA4CC,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2Ge,kBAAA,uDAAAC,GAAA,4BAA6GxB,KAAA","file":"path---front-end-libraries-redux-use-const-for-action-types-38ec62dd5764187c9d92.js","sourcesContent":["webpackJsonp([45719159963453],{\n\n/***/ 3628:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use const for Action Types\",\"description\":[\"A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as <code>const</code> declarations.\",\"<hr>\",\"Declare <code>LOGIN</code> and <code>LOGOUT</code> as <code>const</code> values and assign them to the strings <code>'LOGIN'</code> and <code>'LOGOUT'</code>, respectively. Then, edit the <code>authReducer()</code> and the action creators to reference these constants instead of string values.\",\"<strong>Note:</strong>&nbsp;It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well.\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/redux/use-const-for-action-types\",\"blockName\":\"Redux\",\"tests\":[{\"text\":\"Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.\",\"testString\":\"assert(loginUser().type === 'LOGIN', 'Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.');\"},{\"text\":\"Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.\",\"testString\":\"assert(logoutUser().type === 'LOGOUT', 'Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.');\"},{\"text\":\"The store should be initialized with an object with property <code>login</code> set to <code>false</code>.\",\"testString\":\"assert(store.getState().authenticated === false, 'The store should be initialized with an object with property <code>login</code> set to <code>false</code>.');\"},{\"text\":\"Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.\",\"testString\":\"assert((function() {  const initialState = store.getState(); store.dispatch(loginUser()); const afterLogin = store.getState(); return initialState.authenticated === false && afterLogin.authenticated === true })(), 'Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.');\"},{\"text\":\"Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.\",\"testString\":\"assert((function() {  store.dispatch(loginUser()); const loggedIn = store.getState(); store.dispatch(logoutUser()); const afterLogout = store.getState(); return loggedIn.authenticated === true && afterLogout.authenticated === false })(), 'Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.');\"},{\"text\":\"The <code>authReducer</code> function should handle multiple action types with a switch statement.\",\"testString\":\"getUserInput => assert((function() { return typeof authReducer === 'function' && getUserInput('index').toString().includes('switch') && getUserInput('index').toString().includes('case') && getUserInput('index').toString().includes('default') })(), 'The <code>authReducer</code> function should handle multiple action types with a switch statement.');\"},{\"text\":\"<code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.\",\"testString\":\"getUserInput => assert((function() {  const noWhiteSpace = getUserInput('index').toString().replace(/\\\\s/g,''); return (noWhiteSpace.includes('constLOGIN=\\\\'LOGIN\\\\'') || noWhiteSpace.includes('constLOGIN=\\\"LOGIN\\\"')) && (noWhiteSpace.includes('constLOGOUT=\\\\'LOGOUT\\\\'') || noWhiteSpace.includes('constLOGOUT=\\\"LOGOUT\\\"')) })(), '<code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.');\"},{\"text\":\"The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.\",\"testString\":\"getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').toString().replace(/\\\\s/g,''); return noWhiteSpace.includes('caseLOGIN:') && noWhiteSpace.includes('caseLOGOUT:') && noWhiteSpace.includes('type:LOGIN') && noWhiteSpace.includes('type:LOGOUT') })(), 'The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"// change code below this line\\n\\n// change code above this line\\n\\nconst defaultState = {\\n  authenticated: false\\n};\\n\\nconst authReducer = (state = defaultState, action) => {\\n\\n  switch (action.type) {\\n\\n    case 'LOGIN':\\n      return {\\n        authenticated: true\\n      }\\n\\n    case 'LOGOUT':\\n      return {\\n        authenticated: false\\n      }\\n\\n    default:\\n      return state;\\n\\n  }\\n\\n};\\n\\nconst store = Redux.createStore(authReducer);\\n\\nconst loginUser = () => {\\n  return {\\n    type: 'LOGIN'\\n  }\\n};\\n\\nconst logoutUser = () => {\\n  return {\\n    type: 'LOGOUT'\\n  }\\n};\",\"head\":\"\",\"tail\":\"\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/redux/register-a-store-listener\",\"id\":\"5a24c314108439a4d4036152\"},\"slug\":\"/front-end-libraries/redux/use-const-for-action-types\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-redux-use-const-for-action-types-38ec62dd5764187c9d92.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use const for Action Types\",\"description\":[\"A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as <code>const</code> declarations.\",\"<hr>\",\"Declare <code>LOGIN</code> and <code>LOGOUT</code> as <code>const</code> values and assign them to the strings <code>'LOGIN'</code> and <code>'LOGOUT'</code>, respectively. Then, edit the <code>authReducer()</code> and the action creators to reference these constants instead of string values.\",\"<strong>Note:</strong>&nbsp;It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well.\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/redux/use-const-for-action-types\",\"blockName\":\"Redux\",\"tests\":[{\"text\":\"Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.\",\"testString\":\"assert(loginUser().type === 'LOGIN', 'Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.');\"},{\"text\":\"Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.\",\"testString\":\"assert(logoutUser().type === 'LOGOUT', 'Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.');\"},{\"text\":\"The store should be initialized with an object with property <code>login</code> set to <code>false</code>.\",\"testString\":\"assert(store.getState().authenticated === false, 'The store should be initialized with an object with property <code>login</code> set to <code>false</code>.');\"},{\"text\":\"Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.\",\"testString\":\"assert((function() {  const initialState = store.getState(); store.dispatch(loginUser()); const afterLogin = store.getState(); return initialState.authenticated === false && afterLogin.authenticated === true })(), 'Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.');\"},{\"text\":\"Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.\",\"testString\":\"assert((function() {  store.dispatch(loginUser()); const loggedIn = store.getState(); store.dispatch(logoutUser()); const afterLogout = store.getState(); return loggedIn.authenticated === true && afterLogout.authenticated === false })(), 'Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.');\"},{\"text\":\"The <code>authReducer</code> function should handle multiple action types with a switch statement.\",\"testString\":\"getUserInput => assert((function() { return typeof authReducer === 'function' && getUserInput('index').toString().includes('switch') && getUserInput('index').toString().includes('case') && getUserInput('index').toString().includes('default') })(), 'The <code>authReducer</code> function should handle multiple action types with a switch statement.');\"},{\"text\":\"<code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.\",\"testString\":\"getUserInput => assert((function() {  const noWhiteSpace = getUserInput('index').toString().replace(/\\\\s/g,''); return (noWhiteSpace.includes('constLOGIN=\\\\'LOGIN\\\\'') || noWhiteSpace.includes('constLOGIN=\\\"LOGIN\\\"')) && (noWhiteSpace.includes('constLOGOUT=\\\\'LOGOUT\\\\'') || noWhiteSpace.includes('constLOGOUT=\\\"LOGOUT\\\"')) })(), '<code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.');\"},{\"text\":\"The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.\",\"testString\":\"getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').toString().replace(/\\\\s/g,''); return noWhiteSpace.includes('caseLOGIN:') && noWhiteSpace.includes('caseLOGOUT:') && noWhiteSpace.includes('type:LOGIN') && noWhiteSpace.includes('type:LOGOUT') })(), 'The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"// change code below this line\\n\\n// change code above this line\\n\\nconst defaultState = {\\n  authenticated: false\\n};\\n\\nconst authReducer = (state = defaultState, action) => {\\n\\n  switch (action.type) {\\n\\n    case 'LOGIN':\\n      return {\\n        authenticated: true\\n      }\\n\\n    case 'LOGOUT':\\n      return {\\n        authenticated: false\\n      }\\n\\n    default:\\n      return state;\\n\\n  }\\n\\n};\\n\\nconst store = Redux.createStore(authReducer);\\n\\nconst loginUser = () => {\\n  return {\\n    type: 'LOGIN'\\n  }\\n};\\n\\nconst logoutUser = () => {\\n  return {\\n    type: 'LOGOUT'\\n  }\\n};\",\"head\":\"\",\"tail\":\"\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/redux/register-a-store-listener\",\"id\":\"5a24c314108439a4d4036152\"},\"slug\":\"/front-end-libraries/redux/use-const-for-action-types\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-redux-use-const-for-action-types.json\n// module id = 3628\n// module chunks = 45719159963453"],"sourceRoot":""}