{"version":3,"sources":["webpack:///path---front-end-libraries-react-use-state-to-toggle-an-element-aacee4f9e659992a2e3c.js","webpack:///./.cache/json/front-end-libraries-react-use-state-to-toggle-an-element.json"],"names":["webpackJsonp","3609","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,iCAAAC,aAAA,+oBAA8pBC,cAAA,EAAAC,QAAqEC,KAAA,4DAAAC,UAAA,QAAAC,QAAiGC,KAAA,gFAAAC,WAAA,8LAAkSD,KAAA,0FAAAC,WAAA,8LAA4SD,KAAA,gFAAAC,WAAA,q0BAAw6BC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,ipBAAssBC,KAAA,GAAAC,KAAA,wEAA0FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,oDAAAC,GAAA,4BAA0GxB,KAAA","file":"path---front-end-libraries-react-use-state-to-toggle-an-element-aacee4f9e659992a2e3c.js","sourcesContent":["webpackJsonp([7296625061443],{\n\n/***/ 3609:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use State to Toggle an Element\",\"description\":[\"你可以用比你目前所见的更复杂的方式在 React 应用程序中使用<code>state</code>。例如，监视值的状态，然后根据此值有条件地渲染 UI。有几种不同的方法可以实现这一点，代码编辑器展示了其中一种。\",\"<hr>\",\"<code>MyComponent</code>有一个初始值为<code>false</code>的<code>visibility</code>属性。如果<code>visibility</code>的值为 true，render 方法返回一个视图，如果为 false，返回另一个视图。\",\"目前，无法更新组件的<code>state</code>中的<code>visibility</code>属性，该值应在 true 和 false 之间来回切换。按钮上有一个单击处理程序，它触发一个名为<code>toggleVisibility()</code>的类方法。定义此方法，以便<code>visibility</code>的<code>state</code>在调用方法时切换到相反的值。如果<code>visibility</code>是<code>false</code>，则该方法将其设置为<code>true</code>，反之亦然。\",\"最后，单击按钮以查看基于其<code>state</code>的组件的条件渲染。\",\"<strong>提示：</strong>&nbsp;不要忘记将<code>this</code>关键字绑定到构造函数中的方法上！\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/use-state-to-toggle-an-element\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该返回一个<code>div</code>元素，其中包含一个<code>button</code>元素。\",\"testString\":\"assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).find('div').find('button').length, 1, '<code>MyComponent</code>应该返回一个<code>div</code>元素，其中包含一个<code>button</code>元素。');\"},{\"text\":\"<code>MyComponent</code>应该使用设置为<code>false</code>的<code>visibility</code>属性来初始化其 state。\",\"testString\":\"assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).state('visibility'), false, '<code>MyComponent</code>应该使用设置为<code>false</code>的<code>visibility</code>属性来初始化其 state。');\"},{\"text\":\"单击按钮元素应在<code>true</code>和<code>false</code>之间切换<code>visibility</code>属性的状态。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ visibility: false }); return waitForIt(() => mockedComponent.state('visibility')); }; const second = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('visibility')); }; const third = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('visibility')); }; const firstValue = await first(); const secondValue = await second(); const thirdValue = await third(); assert(!firstValue && secondValue && !thirdValue, '单击按钮元素应在<code>true</code>和<code>false</code>之间切换<code>visibility</code>属性的状态。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      visibility: false\\n    };\\n    // change code below this line\\n\\n    // change code above this line\\n  }\\n  // change code below this line\\n\\n  // change code above this line\\n  render() {\\n    if (this.state.visibility) {\\n      return (\\n        <div>\\n          <button onClick={this.toggleVisibility}>Click Me</button>\\n          <h1>Now you see me!</h1>\\n        </div>\\n      );\\n    } else {\\n      return (\\n        <div>\\n          <button onClick={this.toggleVisibility}>Click Me</button>\\n        </div>\\n      );\\n    }\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/write-a-simple-counter\",\"id\":\"5a24c314108439a4d4036176\"},\"slug\":\"/front-end-libraries/react/use-state-to-toggle-an-element\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-use-state-to-toggle-an-element-aacee4f9e659992a2e3c.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use State to Toggle an Element\",\"description\":[\"你可以用比你目前所见的更复杂的方式在 React 应用程序中使用<code>state</code>。例如，监视值的状态，然后根据此值有条件地渲染 UI。有几种不同的方法可以实现这一点，代码编辑器展示了其中一种。\",\"<hr>\",\"<code>MyComponent</code>有一个初始值为<code>false</code>的<code>visibility</code>属性。如果<code>visibility</code>的值为 true，render 方法返回一个视图，如果为 false，返回另一个视图。\",\"目前，无法更新组件的<code>state</code>中的<code>visibility</code>属性，该值应在 true 和 false 之间来回切换。按钮上有一个单击处理程序，它触发一个名为<code>toggleVisibility()</code>的类方法。定义此方法，以便<code>visibility</code>的<code>state</code>在调用方法时切换到相反的值。如果<code>visibility</code>是<code>false</code>，则该方法将其设置为<code>true</code>，反之亦然。\",\"最后，单击按钮以查看基于其<code>state</code>的组件的条件渲染。\",\"<strong>提示：</strong>&nbsp;不要忘记将<code>this</code>关键字绑定到构造函数中的方法上！\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/use-state-to-toggle-an-element\",\"blockName\":\"React\",\"tests\":[{\"text\":\"<code>MyComponent</code>应该返回一个<code>div</code>元素，其中包含一个<code>button</code>元素。\",\"testString\":\"assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).find('div').find('button').length, 1, '<code>MyComponent</code>应该返回一个<code>div</code>元素，其中包含一个<code>button</code>元素。');\"},{\"text\":\"<code>MyComponent</code>应该使用设置为<code>false</code>的<code>visibility</code>属性来初始化其 state。\",\"testString\":\"assert.strictEqual(Enzyme.mount(React.createElement(MyComponent)).state('visibility'), false, '<code>MyComponent</code>应该使用设置为<code>false</code>的<code>visibility</code>属性来初始化其 state。');\"},{\"text\":\"单击按钮元素应在<code>true</code>和<code>false</code>之间切换<code>visibility</code>属性的状态。\",\"testString\":\"async () => { const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250)); const mockedComponent = Enzyme.mount(React.createElement(MyComponent)); const first = () => { mockedComponent.setState({ visibility: false }); return waitForIt(() => mockedComponent.state('visibility')); }; const second = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('visibility')); }; const third = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent.state('visibility')); }; const firstValue = await first(); const secondValue = await second(); const thirdValue = await third(); assert(!firstValue && secondValue && !thirdValue, '单击按钮元素应在<code>true</code>和<code>false</code>之间切换<code>visibility</code>属性的状态。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class MyComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      visibility: false\\n    };\\n    // change code below this line\\n\\n    // change code above this line\\n  }\\n  // change code below this line\\n\\n  // change code above this line\\n  render() {\\n    if (this.state.visibility) {\\n      return (\\n        <div>\\n          <button onClick={this.toggleVisibility}>Click Me</button>\\n          <h1>Now you see me!</h1>\\n        </div>\\n      );\\n    } else {\\n      return (\\n        <div>\\n          <button onClick={this.toggleVisibility}>Click Me</button>\\n        </div>\\n      );\\n    }\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<MyComponent />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/write-a-simple-counter\",\"id\":\"5a24c314108439a4d4036176\"},\"slug\":\"/front-end-libraries/react/use-state-to-toggle-an-element\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-use-state-to-toggle-an-element.json\n// module id = 3609\n// module chunks = 7296625061443"],"sourceRoot":""}