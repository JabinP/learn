{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-using-a-headless-browser-fcf13fdba352a600bbd2.js","webpack:///./.cache/json/information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-using-a-headless-browser.json"],"names":["webpackJsonp","3697","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gDAAAC,SAAA,KAAAC,aAAA,s/BAAAC,cAAA,EAAAC,QAAymCC,UAAA,0CAAAC,KAAA,oIAAAC,QAA2MC,KAAA,wBAAAC,WAAA,2LAAuOD,KAAA,qDAAAC,WAAA,oNAA6RD,KAAA,sEAAAC,WAAA,2UAAqaD,KAAA,sEAAAC,WAAA,2UAAqaD,KAAA,gEAAAC,WAAA,iUAAoZC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,uIAAAC,GAAA,4BAAwOV,KAAA","file":"path---information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-using-a-headless-browser-fcf13fdba352a600bbd2.js","sourcesContent":["webpackJsonp([86002085845463],{\n\n/***/ 3697:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Run Functional Tests using a Headless Browser\",\"guideUrl\":null,\"description\":[\"As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.\",\"In the next challenges we are going to simulate the human interaction with a page using a device called 'Headless Browser'.\",\"A headless browser is a web browser without a graphical user interface. These kind of tools are particularly useful for testing web pages as they are able to render and understand HTML, CSS, and JavaScript the same way a browser would.\",\"For these challenges we are using Zombie.JS. It's a lightweight browser which is totally based on JS, without relying on additional binaries to be installed. This feature makes it usable in an environment such as Glitch. There are many other (more powerful) options.<br>\",\"Look at the examples in the code for the exercise directions Follow the assertions order, We rely on it.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Quality Assurance and Testing with Chai\",\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser\",\"tests\":[{\"text\":\"All tests should pass\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the headless browser request succeeded\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[0].method, 'browser.success'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the text inside the element 'span#name' is 'Cristoforo'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[1].method, 'browser.text'); assert.equal(data.assertions[1].args[0], '\\\\'span#name\\\\''); assert.equal(data.assertions[1].args[1], '\\\\'Cristoforo\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the text inside the element 'span#surname' is 'Colombo'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[2].method, 'browser.text'); assert.equal(data.assertions[2].args[0], '\\\\'span#surname\\\\''); assert.equal(data.assertions[2].args[1], '\\\\'Colombo\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the element 'span#dates' exist and its count is 1\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[3].method, 'browser.element'); assert.equal(data.assertions[3].args[0], '\\\\'span#dates\\\\''); assert.equal(data.assertions[3].args[1], 1);}, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser-ii\",\"id\":\"587d824f367417b2b2512c5c\"},\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-using-a-headless-browser-fcf13fdba352a600bbd2.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Run Functional Tests using a Headless Browser\",\"guideUrl\":null,\"description\":[\"As a reminder, this project is being built upon the following starter project on <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-mochachai/'>Glitch</a>, or cloned from <a href='https://github.com/freeCodeCamp/boilerplate-mochachai/'>GitHub</a>.\",\"In the next challenges we are going to simulate the human interaction with a page using a device called 'Headless Browser'.\",\"A headless browser is a web browser without a graphical user interface. These kind of tools are particularly useful for testing web pages as they are able to render and understand HTML, CSS, and JavaScript the same way a browser would.\",\"For these challenges we are using Zombie.JS. It's a lightweight browser which is totally based on JS, without relying on additional binaries to be installed. This feature makes it usable in an environment such as Glitch. There are many other (more powerful) options.<br>\",\"Look at the examples in the code for the exercise directions Follow the assertions order, We rely on it.\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Quality Assurance and Testing with Chai\",\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser\",\"tests\":[{\"text\":\"All tests should pass\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.state,'passed'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the headless browser request succeeded\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[0].method, 'browser.success'); }, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the text inside the element 'span#name' is 'Cristoforo'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[1].method, 'browser.text'); assert.equal(data.assertions[1].args[0], '\\\\'span#name\\\\''); assert.equal(data.assertions[1].args[1], '\\\\'Cristoforo\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the text inside the element 'span#surname' is 'Colombo'\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[2].method, 'browser.text'); assert.equal(data.assertions[2].args[0], '\\\\'span#surname\\\\''); assert.equal(data.assertions[2].args[1], '\\\\'Colombo\\\\'');}, xhr => { throw new Error(xhr.responseText); })\"},{\"text\":\"assert that the element 'span#dates' exist and its count is 1\",\"testString\":\"getUserInput => $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(data => { assert.equal(data.assertions[3].method, 'browser.element'); assert.equal(data.assertions[3].args[0], '\\\\'span#dates\\\\''); assert.equal(data.assertions[3].args[1], 1);}, xhr => { throw new Error(xhr.responseText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser-ii\",\"id\":\"587d824f367417b2b2512c5c\"},\"slug\":\"/information-security-and-quality-assurance/quality-assurance-and-testing-with-chai/run-functional-tests-using-a-headless-browser\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-quality-assurance-and-testing-with-chai-run-functional-tests-using-a-headless-browser.json\n// module id = 3697\n// module chunks = 86002085845463"],"sourceRoot":""}