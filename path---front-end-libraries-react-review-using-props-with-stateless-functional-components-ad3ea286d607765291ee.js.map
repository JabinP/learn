{"version":3,"sources":["webpack:///path---front-end-libraries-react-review-using-props-with-stateless-functional-components-ad3ea286d607765291ee.js","webpack:///./.cache/json/front-end-libraries-react-review-using-props-with-stateless-functional-components.json"],"names":["webpackJsonp","3599","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,0DAAAC,aAAA,2vBAA0mBC,cAAA,EAAAC,QAA8PC,KAAA,qFAAAC,UAAA,QAAAC,QAA0HC,KAAA,+BAAAC,WAAA,2LAA8OD,KAAA,6BAAAC,WAAA,uLAAwOD,KAAA,wFAAAC,WAAA,8YAA0fD,KAAA,wEAAAC,WAAA,kYAA8dD,KAAA,gFAAAC,WAAA,gRAAmXC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,wNAA2OC,KAAA,yDAAkGC,KAAA,qEAA6EC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,qFAAsGjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAkGe,kBAAA,yDAAAC,GAAA,4BAA+GxB,KAAA","file":"path---front-end-libraries-react-review-using-props-with-stateless-functional-components-ad3ea286d607765291ee.js","sourcesContent":["webpackJsonp([70223498064400],{\n\n/***/ 3599:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Review Using Props with Stateless Functional Components\",\"description\":[\"除了上一个挑战，你一直在将 props 传递给无状态的函数组件。这些组件就像纯函数，它们接收 props 作为输入，并在每次传递相同 props 时返回相同的视图。你可能会想知道什么是状态，下一个挑战将会更详细地讲述它。在此之前，我们先来回顾一下组件的术语。\",\"<em>无状态函数组件</em>是一个函数，它接收 props 作为输入并返回 JSX。另一方面，<em>无状态组件</em>是一个类，它扩展了<code>React.Component</code>，但是不使用内部状态（下一个挑战中讨论）。最后，<em>状态组件</em>是指维护其自身内部状态的组件，它简称组件或 React 组件。\",\"一种常见的应用模式是尽可能减少状态组件并创建无状态的函数组件。这有助于将状态管理包含到应用程序的特定区域。反过来，通过更容易地跟踪状态变化如何影响其行为，可以改进应用程序的开发和维护。\",\"<hr>\",\"在代码编辑器中有一个<code>CampSite</code>组件，它把<code>Camper</code>组件渲染为自己的子组件。定义<code>Camper</code>组件，并为其分配默认 props<code>{ name: 'CamperBot' }</code>。你可以在<code>Camper</code>组件内部渲染任何你想要的代码，但是要确保有一个<code>p</code>元素，它只包含作为<code>prop</code>传递的<code>name</code>值。最后，在<code>Camper</code>组件上定义<code>propTypes</code>，要求提供<code>name</code>作为 prop，并验证它是<code>string</code>类型。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/review-using-props-with-stateless-functional-components\",\"blockName\":\"React\",\"tests\":[{\"text\":\"应该渲染<code>CampSite</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('CampSite').length === 1; })(), '应该渲染<code>CampSite</code>组件。');\"},{\"text\":\"应该渲染<code>Camper</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('Camper').length === 1; })(), '应该渲染<code>Camper</code>组件。');\"},{\"text\":\"<code>Camper</code>组件应该包含默认 props，它将字符串<code>CamperBot</code>赋值给关键字<code>name</code>。\",\"testString\":\"getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/\\\\s/g, ''); const verify1 = 'Camper.defaultProps={name:\\\\'CamperBot\\\\'}'; const verify2 = 'Camper.defaultProps={name:\\\"CamperBot\\\"}'; return (noWhiteSpace.includes(verify1) || noWhiteSpace.includes(verify2)); })(), '<code>Camper</code>组件应该包含默认 props，它将字符串<code>CamperBot</code>赋值给关键字<code>name</code>。');\"},{\"text\":\"<code>Camper</code>组件应该包含<code>string</code>类型的<code>name</code>prop。\",\"testString\":\"getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); const noWhiteSpace = getUserInput('index').replace(/\\\\s/g, ''); const verifyDefaultProps = 'Camper.propTypes={name:PropTypes.string.isRequired}'; return noWhiteSpace.includes(verifyDefaultProps); })(), '<code>Camper</code>组件应该包含<code>string</code>类型的<code>name</code>prop。');\"},{\"text\":\"<code>Camper</code>组件应该包含一个<code>p</code>元素，元素内是来自prop<code>name</code>的唯一文本。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('p').text() === mockedComponent.find('Camper').props().name; })(), '<code>Camper</code>组件应该包含一个<code>p</code>元素，元素内是来自prop<code>name</code>的唯一文本。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class CampSite extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Camper/>\\n      </div>\\n    );\\n  }\\n};\\n// change code below this line\\n\",\"head\":\"var PropTypes = {\\n   string: { isRequired: true }\\n};\",\"tail\":\"ReactDOM.render(<CampSite />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/create-a-stateful-component\",\"id\":\"5a24c314108439a4d403616f\"},\"slug\":\"/front-end-libraries/react/review-using-props-with-stateless-functional-components\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-review-using-props-with-stateless-functional-components-ad3ea286d607765291ee.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Review Using Props with Stateless Functional Components\",\"description\":[\"除了上一个挑战，你一直在将 props 传递给无状态的函数组件。这些组件就像纯函数，它们接收 props 作为输入，并在每次传递相同 props 时返回相同的视图。你可能会想知道什么是状态，下一个挑战将会更详细地讲述它。在此之前，我们先来回顾一下组件的术语。\",\"<em>无状态函数组件</em>是一个函数，它接收 props 作为输入并返回 JSX。另一方面，<em>无状态组件</em>是一个类，它扩展了<code>React.Component</code>，但是不使用内部状态（下一个挑战中讨论）。最后，<em>状态组件</em>是指维护其自身内部状态的组件，它简称组件或 React 组件。\",\"一种常见的应用模式是尽可能减少状态组件并创建无状态的函数组件。这有助于将状态管理包含到应用程序的特定区域。反过来，通过更容易地跟踪状态变化如何影响其行为，可以改进应用程序的开发和维护。\",\"<hr>\",\"在代码编辑器中有一个<code>CampSite</code>组件，它把<code>Camper</code>组件渲染为自己的子组件。定义<code>Camper</code>组件，并为其分配默认 props<code>{ name: 'CamperBot' }</code>。你可以在<code>Camper</code>组件内部渲染任何你想要的代码，但是要确保有一个<code>p</code>元素，它只包含作为<code>prop</code>传递的<code>name</code>值。最后，在<code>Camper</code>组件上定义<code>propTypes</code>，要求提供<code>name</code>作为 prop，并验证它是<code>string</code>类型。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react/review-using-props-with-stateless-functional-components\",\"blockName\":\"React\",\"tests\":[{\"text\":\"应该渲染<code>CampSite</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('CampSite').length === 1; })(), '应该渲染<code>CampSite</code>组件。');\"},{\"text\":\"应该渲染<code>Camper</code>组件。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('Camper').length === 1; })(), '应该渲染<code>Camper</code>组件。');\"},{\"text\":\"<code>Camper</code>组件应该包含默认 props，它将字符串<code>CamperBot</code>赋值给关键字<code>name</code>。\",\"testString\":\"getUserInput => assert((function() { const noWhiteSpace = getUserInput('index').replace(/\\\\s/g, ''); const verify1 = 'Camper.defaultProps={name:\\\\'CamperBot\\\\'}'; const verify2 = 'Camper.defaultProps={name:\\\"CamperBot\\\"}'; return (noWhiteSpace.includes(verify1) || noWhiteSpace.includes(verify2)); })(), '<code>Camper</code>组件应该包含默认 props，它将字符串<code>CamperBot</code>赋值给关键字<code>name</code>。');\"},{\"text\":\"<code>Camper</code>组件应该包含<code>string</code>类型的<code>name</code>prop。\",\"testString\":\"getUserInput => assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); const noWhiteSpace = getUserInput('index').replace(/\\\\s/g, ''); const verifyDefaultProps = 'Camper.propTypes={name:PropTypes.string.isRequired}'; return noWhiteSpace.includes(verifyDefaultProps); })(), '<code>Camper</code>组件应该包含<code>string</code>类型的<code>name</code>prop。');\"},{\"text\":\"<code>Camper</code>组件应该包含一个<code>p</code>元素，元素内是来自prop<code>name</code>的唯一文本。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(CampSite)); return mockedComponent.find('p').text() === mockedComponent.find('Camper').props().name; })(), '<code>Camper</code>组件应该包含一个<code>p</code>元素，元素内是来自prop<code>name</code>的唯一文本。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class CampSite extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Camper/>\\n      </div>\\n    );\\n  }\\n};\\n// change code below this line\\n\",\"head\":\"var PropTypes = {\\n   string: { isRequired: true }\\n};\",\"tail\":\"ReactDOM.render(<CampSite />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react/create-a-stateful-component\",\"id\":\"5a24c314108439a4d403616f\"},\"slug\":\"/front-end-libraries/react/review-using-props-with-stateless-functional-components\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-review-using-props-with-stateless-functional-components.json\n// module id = 3599\n// module chunks = 70223498064400"],"sourceRoot":""}