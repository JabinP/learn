{"version":3,"sources":["webpack:///path---responsive-web-design-applied-visual-design-learn-how-bezier-curves-work-33569e38d519efc040dd.js","webpack:///./.cache/json/responsive-web-design-applied-visual-design-learn-how-bezier-curves-work.json"],"names":["webpackJsonp","4064","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","key","ext","name","contents","head","tail","indexjs","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,+BAAAC,aAAA,4oBAAyrB,8RAAAC,cAAA,EAAAC,QAAmUC,KAAA,4EAAAC,UAAA,wBAAAC,QAAiIC,KAAA,+FAAAC,WAAA,mMAAsTD,KAAA,4EAAAC,WAAA,sJAAqPC,YAAAC,OAAwBC,WAAaC,IAAA,YAAAC,IAAA,OAAAC,KAAA,QAAAC,SAAA,4oBAAwmBC,KAAA,GAAAC,KAAA,IAAyHC,QAAA,KAAAC,SAAA,QAAkCC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,oFAAAC,GAAA,4BAAqLrB,KAAA","file":"path---responsive-web-design-applied-visual-design-learn-how-bezier-curves-work-33569e38d519efc040dd.js","sourcesContent":["webpackJsonp([126756218509502],{\n\n/***/ 4064:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Learn How Bezier Curves Work\",\"description\":[\"上一关卡介绍了<code>animation-timing-function</code>以及它的一些预定义的值。这些值定义了不同时间内的动画速度。除了预定义值之外，CSS 还提供了贝塞尔曲线（Bezier curves）来更出色的控制动画的速度曲线。\",\"在 CSS 动画里，用<code>cubic-bezier</code>来定义贝塞尔曲线。曲线的形状代表了动画的速度。曲线在 1*1 的坐标系统内，曲线的 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。\",\"<code>cubic-bezier</code>函数包含了 1 * 1 网格里的4个点：<code>p0</code>、<code>p1</code>、<code>p2</code>和<code>p3</code>。其中<code>p0</code>和<code>p3</code>是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。在 CSS 里面通过<code>(x1, y1, x2, y2)</code>来确定<code>p1</code>和<code>p2</code>。综上，下面就是 CSS 贝塞尔曲线的例子：\",\"<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>\",\"在上面的例子里，两个点的 x 和 y 值相等（x1 = 0.25 = y1 和 x2 = 0.75 = y2），如果你还记得初中几何，结果是从原点到点 (1, 1) 的一条直线。动画速度呈线性，效果和<code>linear</code>一致。换言之，元素匀速运动。\",\"<hr>\",\"对于 id 为<code>ball1</code>的元素，把<code>animation-timing-function</code>属性值从<code>linear</code>变成等价的<code>cubic-bezier</code>函数值。也就是说使用上面例子给的值。\"],\"challengeType\":0,\"fields\":{\"slug\":\"/responsive-web-design/applied-visual-design/learn-how-bezier-curves-work\",\"blockName\":\"Applied Visual Design\",\"tests\":[{\"text\":\"id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性值应该为和 linear 预定值等价的贝塞尔函数值。\",\"testString\":\"assert($('#ball1').css('animation-timing-function') == 'cubic-bezier(0.25, 0.25, 0.75, 0.75)', 'id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性应该为和 linear 预定值等价的贝塞尔函数值。');\"},{\"text\":\"id 为<code>ball2</code>元素的<code>animation-timing-function</code>属性值应该保持不变。\",\"testString\":\"assert($('#ball2').css('animation-timing-function') == 'ease-out', 'id 为<code>ball2</code>元素的<code>animation-timing-function</code>属性值应该保持不变。');\"}]},\"required\":[],\"files\":{\"indexhtml\":{\"key\":\"indexhtml\",\"ext\":\"html\",\"name\":\"index\",\"contents\":\"<style>\\n\\n  .balls{\\n    border-radius: 50%;\\n    background: linear-gradient(\\n      35deg,\\n      #ccffff,\\n      #ffcccc\\n    );\\n    position: fixed;  \\n    width: 50px;\\n    height: 50px;\\n    margin-top: 50px;\\n    animation-name: bounce;\\n    animation-duration: 2s;\\n    animation-iteration-count: infinite;\\n  }\\n  #ball1 { \\n    left: 27%;\\n    animation-timing-function: linear;\\n  }\\n  #ball2 { \\n    left: 56%;\\n    animation-timing-function: ease-out;\\n  }\\n\\n@keyframes bounce {\\n  0% {\\n    top: 0px;\\n  } \\n  100% {\\n    top: 249px;\\n  }\\n} \\n\\n</style>\\n\\n<div class=\\\"balls\\\" id=\\\"ball1\\\"></div>\\n<div class=\\\"balls\\\" id=\\\"ball2\\\"></div>\",\"head\":\"\",\"tail\":\"\"},\"indexjs\":null,\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/responsive-web-design/applied-visual-design/use-a-bezier-curve-to-move-a-graphic\",\"id\":\"587d78a9367417b2b2512ae8\"},\"slug\":\"/responsive-web-design/applied-visual-design/learn-how-bezier-curves-work\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---responsive-web-design-applied-visual-design-learn-how-bezier-curves-work-33569e38d519efc040dd.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Learn How Bezier Curves Work\",\"description\":[\"上一关卡介绍了<code>animation-timing-function</code>以及它的一些预定义的值。这些值定义了不同时间内的动画速度。除了预定义值之外，CSS 还提供了贝塞尔曲线（Bezier curves）来更出色的控制动画的速度曲线。\",\"在 CSS 动画里，用<code>cubic-bezier</code>来定义贝塞尔曲线。曲线的形状代表了动画的速度。曲线在 1*1 的坐标系统内，曲线的 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。\",\"<code>cubic-bezier</code>函数包含了 1 * 1 网格里的4个点：<code>p0</code>、<code>p1</code>、<code>p2</code>和<code>p3</code>。其中<code>p0</code>和<code>p3</code>是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。在 CSS 里面通过<code>(x1, y1, x2, y2)</code>来确定<code>p1</code>和<code>p2</code>。综上，下面就是 CSS 贝塞尔曲线的例子：\",\"<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>\",\"在上面的例子里，两个点的 x 和 y 值相等（x1 = 0.25 = y1 和 x2 = 0.75 = y2），如果你还记得初中几何，结果是从原点到点 (1, 1) 的一条直线。动画速度呈线性，效果和<code>linear</code>一致。换言之，元素匀速运动。\",\"<hr>\",\"对于 id 为<code>ball1</code>的元素，把<code>animation-timing-function</code>属性值从<code>linear</code>变成等价的<code>cubic-bezier</code>函数值。也就是说使用上面例子给的值。\"],\"challengeType\":0,\"fields\":{\"slug\":\"/responsive-web-design/applied-visual-design/learn-how-bezier-curves-work\",\"blockName\":\"Applied Visual Design\",\"tests\":[{\"text\":\"id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性值应该为和 linear 预定值等价的贝塞尔函数值。\",\"testString\":\"assert($('#ball1').css('animation-timing-function') == 'cubic-bezier(0.25, 0.25, 0.75, 0.75)', 'id 为<code>ball1</code>的元素的<code>animation-timing-function</code>属性应该为和 linear 预定值等价的贝塞尔函数值。');\"},{\"text\":\"id 为<code>ball2</code>元素的<code>animation-timing-function</code>属性值应该保持不变。\",\"testString\":\"assert($('#ball2').css('animation-timing-function') == 'ease-out', 'id 为<code>ball2</code>元素的<code>animation-timing-function</code>属性值应该保持不变。');\"}]},\"required\":[],\"files\":{\"indexhtml\":{\"key\":\"indexhtml\",\"ext\":\"html\",\"name\":\"index\",\"contents\":\"<style>\\n\\n  .balls{\\n    border-radius: 50%;\\n    background: linear-gradient(\\n      35deg,\\n      #ccffff,\\n      #ffcccc\\n    );\\n    position: fixed;  \\n    width: 50px;\\n    height: 50px;\\n    margin-top: 50px;\\n    animation-name: bounce;\\n    animation-duration: 2s;\\n    animation-iteration-count: infinite;\\n  }\\n  #ball1 { \\n    left: 27%;\\n    animation-timing-function: linear;\\n  }\\n  #ball2 { \\n    left: 56%;\\n    animation-timing-function: ease-out;\\n  }\\n\\n@keyframes bounce {\\n  0% {\\n    top: 0px;\\n  } \\n  100% {\\n    top: 249px;\\n  }\\n} \\n\\n</style>\\n\\n<div class=\\\"balls\\\" id=\\\"ball1\\\"></div>\\n<div class=\\\"balls\\\" id=\\\"ball2\\\"></div>\",\"head\":\"\",\"tail\":\"\"},\"indexjs\":null,\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/responsive-web-design/applied-visual-design/use-a-bezier-curve-to-move-a-graphic\",\"id\":\"587d78a9367417b2b2512ae8\"},\"slug\":\"/responsive-web-design/applied-visual-design/learn-how-bezier-curves-work\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/responsive-web-design-applied-visual-design-learn-how-bezier-curves-work.json\n// module id = 4064\n// module chunks = 126756218509502"],"sourceRoot":""}