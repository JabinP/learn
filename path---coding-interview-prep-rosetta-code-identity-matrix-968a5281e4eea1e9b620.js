webpackJsonp([50528781862568],{3409:function(e,t){e.exports={data:{challengeNode:{title:"Identity matrix",description:["An <i>identity matrix</i> is a square matrix of size \\( n \\times n \\),","where the diagonal elements are all <b>1</b>s (ones),","and all the other elements are all <b>0</b>s (zeroes).","\\begin{bmatrix} 1 & 0 & 0 \\cr 0 & 1 & 0 \\cr 0 & 0 & 1 \\cr \\end{bmatrix}","Write a function that takes a number 'n' as a parameter and returns the identity matrix of order n x n."],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/identity-matrix",blockName:"Rosetta Code",tests:[{text:"'<code>idMatrix</code> should be a function.'",testString:"assert(typeof idMatrix=='function','<code>idMatrix</code> should be a function.');"},{text:"'<code>idMatrix(1)</code> should return an array.'",testString:"assert(Array.isArray(idMatrix(1)),'<code>idMatrix(1)</code> should return an array.');"},{text:"'<code>idMatrix(1)</code> should return <code>'+JSON.stringify(results[0])+'</code>.'",testString:"assert.deepEqual(idMatrix(1),results[0],'<code>idMatrix(1)</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"},{text:"'<code>idMatrix(2)</code> should return <code>'+JSON.stringify(results[1])+'</code>.'",testString:"assert.deepEqual(idMatrix(2),results[1],'<code>idMatrix(2)</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"},{text:"'<code>idMatrix(3)</code> should return <code>'+JSON.stringify(results[2])+'</code>.'",testString:"assert.deepEqual(idMatrix(3),results[2],'<code>idMatrix(3)</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"},{text:"'<code>idMatrix(4)</code> should return <code>'+JSON.stringify(results[3])+'</code>.'",testString:"assert.deepEqual(idMatrix(4),results[3],'<code>idMatrix(4)</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function idMatrix (n) {\n  // Good luck!\n}",head:"",tail:"let results=[[ [ 1 ] ],\n[ [ 1, 0 ], [ 0, 1 ] ],\n[ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ],\n[ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ]]"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/iterated-digits-squaring",id:"5a23c84252665b21eecc7eb1"},slug:"/coding-interview-prep/rosetta-code/identity-matrix"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-identity-matrix-968a5281e4eea1e9b620.js.map