{"version":3,"sources":["webpack:///path---front-end-libraries-react-and-redux-manage-state-locally-first-90c6ef0febdfb5a53f53.js","webpack:///./.cache/json/front-end-libraries-react-and-redux-manage-state-locally-first.json"],"names":["webpackJsonp","3564","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6BAAAC,aAAA,wkBAAAC,cAAA,EAAAC,QAAwpBC,KAAA,kEAAAC,UAAA,kBAAAC,QAAiHC,KAAA,iFAAgFC,WAAA,6VAAoXD,KAAA,+HAAAC,WAAA,snBAAywBD,KAAA,oDAAAC,WAAA,skBAA8oBD,KAAA,iEAAAC,WAAA,grBAAqwBD,KAAA,yGAAAC,WAAA,05CAAuhDD,KAAA,uCAAAC,WAAA,o3BAA86BC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2GC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,+XAAobC,KAAA,GAAAC,KAAA,4EAA8FC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,sDAAuEjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2Ge,kBAAA,oEAAAC,GAAA,4BAA0HxB,KAAA","file":"path---front-end-libraries-react-and-redux-manage-state-locally-first-90c6ef0febdfb5a53f53.js","sourcesContent":["webpackJsonp([145175380605391],{\n\n/***/ 3564:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Manage State Locally First\",\"description\":[\"这一关的任务是完成<code>DisplayMessages</code>组件的创建。\",\"<hr>\",\"首先，在<code>render()</code>方法中，让组件渲染<code>input</code>、<code>button</code>、<code>ul</code>三个元素。<code>input</code>元素的改变会触发<code>handleChange()</code>方法。此外，<code>input</code>元素会渲染组件状态中<code>input</code>的值。点击按钮<code>button</code>需触发<code>submitMessage()</code>方法。\",\"接着，写出这两种方法。<code>handleChange()</code>方法会更新<code>input</code>为用户正在输入的内容。<code>submitMessage()</code>方法把当前存储在<code>input</code>的消息与本地状态的<code>messages</code>数组连接起来，并清除<code>input</code>的值。\",\"最后，在<code>ul</code>中展示<code>messages</code>数组，其中每个元素内容需放到<code>li</code>元素内。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/manage-state-locally-first\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>DisplayMessages</code>组件的初始状态应是<code>{ input: \\\"\\\", messages: [] }</code>。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const initialState = mockedComponent.state(); return ( typeof initialState === 'object' && initialState.input === '' && initialState.messages.length === 0); })(), '<code>DisplayMessages</code>组件的初始状态应是<code>{ input: \\\"\\\", messages: [] }</code>。');\"},{\"text\":\"<code>DisplayMessages</code>组件应渲染含<code>h2</code>、<code>button</code>、<code>ul</code>、<code>li</code>四个子元素的<code>div</code>。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const state = () => { mockedComponent.setState({messages: ['__TEST__MESSAGE']}); return waitForIt(() => mockedComponent )}; const updated = await state(); assert(updated.find('div').length === 1 && updated.find('h2').length === 1 && updated.find('button').length === 1 && updated.find('ul').length === 1, '<code>DisplayMessages</code>组件应渲染含<code>h2</code>、<code>button</code>、<code>ul</code>、<code>li</code>四个子元素的<code>div</code>。'); }; \"},{\"text\":\"<code>input</code>元素应渲染本地状态中的<code>input</code>值。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const testValue = '__TEST__EVENT__INPUT'; const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const updated = await changed(); assert(updated.find('input').props().value === testValue, '<code>input</code>元素应渲染本地状态中的<code>input</code>值。'); }; \"},{\"text\":\"调用<code>handleChange</code>方法时应更新状态中的<code>input</code>值为当前输入。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage = '__TEST__EVENT__MESSAGE__'; const changed = () => { causeChange(mockedComponent, testMessage); return waitForIt(() => mockedComponent )}; const afterInput = await changed(); assert(initialState.input === '' && afterInput.state().input === '__TEST__EVENT__MESSAGE__', '调用<code>handleChange</code>方法时应更新状态中的<code>input</code>值为当前输入。');  }; \"},{\"text\":\"单击<code>Add message</code>按钮应调用<code>submitMessage</code>方法，添加当前<code>输入</code>到状态中的<code>消息</code>数组。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage_1 = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage_1); return waitForIt(() => mockedComponent )}; const firstResult = await firstChange(); const firstSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit_1 = await firstSubmit(); const submitState_1 = afterSubmit_1.state(); const testMessage_2 = '__SECOND__MESSAGE__'; const secondChange = () => { causeChange(mockedComponent, testMessage_2); return waitForIt(() => mockedComponent )}; const secondResult = await secondChange(); const secondSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit_2 = await secondSubmit(); const submitState_2 = afterSubmit_2.state(); assert(initialState.messages.length === 0 && submitState_1.messages.length === 1 && submitState_2.messages.length === 2 && submitState_2.messages[1] === testMessage_2, '单击<code>Add message</code>按钮应调用<code>submitMessage</code>方法，添加当前<code>输入</code>到状态中的<code>消息</code>数组。'); }; \"},{\"text\":\"<code>submitMessage</code>方法应清除当前输入。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage); return waitForIt(() => mockedComponent )}; const firstResult = await firstChange(); const firstState = firstResult.state(); const firstSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit = await firstSubmit(); const submitState = afterSubmit.state(); assert(firstState.input === testMessage && submitState.input === '', '<code>submitMessage</code>方法应清除当前输入。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class DisplayMessages extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input: '',\\n      messages: []\\n    }\\n  }\\n// 请把 handleChange()、submitMessage() 写在这里\\n\\n  render() {\\n    return (\\n      <div>\\n        <h2>键入新 Message</h2>\\n        { /* 在此渲染 input、button、ul*/ }\\n\\n        { /* 请在本行以上添加你的代码 */ }\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<DisplayMessages />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/extract-state-logic-to-redux\",\"id\":\"5a24c314108439a4d4036142\"},\"slug\":\"/front-end-libraries/react-and-redux/manage-state-locally-first\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-and-redux-manage-state-locally-first-90c6ef0febdfb5a53f53.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Manage State Locally First\",\"description\":[\"这一关的任务是完成<code>DisplayMessages</code>组件的创建。\",\"<hr>\",\"首先，在<code>render()</code>方法中，让组件渲染<code>input</code>、<code>button</code>、<code>ul</code>三个元素。<code>input</code>元素的改变会触发<code>handleChange()</code>方法。此外，<code>input</code>元素会渲染组件状态中<code>input</code>的值。点击按钮<code>button</code>需触发<code>submitMessage()</code>方法。\",\"接着，写出这两种方法。<code>handleChange()</code>方法会更新<code>input</code>为用户正在输入的内容。<code>submitMessage()</code>方法把当前存储在<code>input</code>的消息与本地状态的<code>messages</code>数组连接起来，并清除<code>input</code>的值。\",\"最后，在<code>ul</code>中展示<code>messages</code>数组，其中每个元素内容需放到<code>li</code>元素内。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/manage-state-locally-first\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>DisplayMessages</code>组件的初始状态应是<code>{ input: \\\"\\\", messages: [] }</code>。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const initialState = mockedComponent.state(); return ( typeof initialState === 'object' && initialState.input === '' && initialState.messages.length === 0); })(), '<code>DisplayMessages</code>组件的初始状态应是<code>{ input: \\\"\\\", messages: [] }</code>。');\"},{\"text\":\"<code>DisplayMessages</code>组件应渲染含<code>h2</code>、<code>button</code>、<code>ul</code>、<code>li</code>四个子元素的<code>div</code>。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const state = () => { mockedComponent.setState({messages: ['__TEST__MESSAGE']}); return waitForIt(() => mockedComponent )}; const updated = await state(); assert(updated.find('div').length === 1 && updated.find('h2').length === 1 && updated.find('button').length === 1 && updated.find('ul').length === 1, '<code>DisplayMessages</code>组件应渲染含<code>h2</code>、<code>button</code>、<code>ul</code>、<code>li</code>四个子元素的<code>div</code>。'); }; \"},{\"text\":\"<code>input</code>元素应渲染本地状态中的<code>input</code>值。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const testValue = '__TEST__EVENT__INPUT'; const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const updated = await changed(); assert(updated.find('input').props().value === testValue, '<code>input</code>元素应渲染本地状态中的<code>input</code>值。'); }; \"},{\"text\":\"调用<code>handleChange</code>方法时应更新状态中的<code>input</code>值为当前输入。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage = '__TEST__EVENT__MESSAGE__'; const changed = () => { causeChange(mockedComponent, testMessage); return waitForIt(() => mockedComponent )}; const afterInput = await changed(); assert(initialState.input === '' && afterInput.state().input === '__TEST__EVENT__MESSAGE__', '调用<code>handleChange</code>方法时应更新状态中的<code>input</code>值为当前输入。');  }; \"},{\"text\":\"单击<code>Add message</code>按钮应调用<code>submitMessage</code>方法，添加当前<code>输入</code>到状态中的<code>消息</code>数组。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage_1 = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage_1); return waitForIt(() => mockedComponent )}; const firstResult = await firstChange(); const firstSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit_1 = await firstSubmit(); const submitState_1 = afterSubmit_1.state(); const testMessage_2 = '__SECOND__MESSAGE__'; const secondChange = () => { causeChange(mockedComponent, testMessage_2); return waitForIt(() => mockedComponent )}; const secondResult = await secondChange(); const secondSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit_2 = await secondSubmit(); const submitState_2 = afterSubmit_2.state(); assert(initialState.messages.length === 0 && submitState_1.messages.length === 1 && submitState_2.messages.length === 2 && submitState_2.messages[1] === testMessage_2, '单击<code>Add message</code>按钮应调用<code>submitMessage</code>方法，添加当前<code>输入</code>到状态中的<code>消息</code>数组。'); }; \"},{\"text\":\"<code>submitMessage</code>方法应清除当前输入。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const initialState = mockedComponent.state(); const testMessage = '__FIRST__MESSAGE__'; const firstChange = () => { causeChange(mockedComponent, testMessage); return waitForIt(() => mockedComponent )}; const firstResult = await firstChange(); const firstState = firstResult.state(); const firstSubmit = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterSubmit = await firstSubmit(); const submitState = afterSubmit.state(); assert(firstState.input === testMessage && submitState.input === '', '<code>submitMessage</code>方法应清除当前输入。'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"class DisplayMessages extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input: '',\\n      messages: []\\n    }\\n  }\\n// 请把 handleChange()、submitMessage() 写在这里\\n\\n  render() {\\n    return (\\n      <div>\\n        <h2>键入新 Message</h2>\\n        { /* 在此渲染 input、button、ul*/ }\\n\\n        { /* 请在本行以上添加你的代码 */ }\\n      </div>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<DisplayMessages />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/extract-state-logic-to-redux\",\"id\":\"5a24c314108439a4d4036142\"},\"slug\":\"/front-end-libraries/react-and-redux/manage-state-locally-first\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-and-redux-manage-state-locally-first.json\n// module id = 3564\n// module chunks = 145175380605391"],"sourceRoot":""}