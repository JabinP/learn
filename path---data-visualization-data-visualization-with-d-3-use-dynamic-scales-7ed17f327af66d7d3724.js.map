{"version":3,"sources":["webpack:///path---data-visualization-data-visualization-with-d-3-use-dynamic-scales-7ed17f327af66d7d3724.js","webpack:///./.cache/json/data-visualization-data-visualization-with-d-3-use-dynamic-scales.json"],"names":["webpackJsonp","3482","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","key","ext","name","contents","head","tail","indexjs","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,qBAAAC,aAAA,68BAA0+B,yWAAAC,cAAA,EAAAC,QAAoZC,KAAA,oEAAAC,UAAA,6BAAAC,QAA8HC,KAAA,6BAAAC,WAAA,kFAAmID,KAAA,0DAAAC,WAAA,oIAAkND,KAAA,0DAAAC,WAAA,qIAAkNC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,8DAAyFC,OAAWC,WAAaC,IAAA,YAAAC,IAAA,OAAAC,KAAA,QAAAC,SAAA,s8BAA65BC,KAAA,GAAAC,KAAA,IAA0HC,QAAA,KAAAC,SAAA,QAAkCC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAjB,WAA4CC,KAAA,KAAAC,IAAA,KAAAC,IAAA,8DAAyFe,kBAAA,2FAAAC,GAAA,4BAAiJxB,KAAA","file":"path---data-visualization-data-visualization-with-d-3-use-dynamic-scales-7ed17f327af66d7d3724.js","sourcesContent":["webpackJsonp([194616062265107],{\n\n/***/ 3482:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use Dynamic Scales\",\"description\":[\"D3 的<code>min()</code>和<code>max()</code>方法在设置比例尺时十分有用。\",\"对于一个复杂的数据集，首要是设置比例尺，这样可视化才能适合 SVG 容器的宽和高。所有数据都应布局在 SVG 画布内部，这样它们在页面上才是可见的。\",\"下面这个例子为散点图设置了 x 轴的比例尺。<code>domain()</code>方法给比例尺传递关于散点图原数据值的信息，<code>range()</code>方法给出在页面上进行可视化的实际空间信息。\",\"在这个例子中，domain 是从 0 到数据集中的最大值，它使用<code>max()</code>方法和基于数组中 x 值的回调函数。range 使用 SVG 画布的宽(<code>w</code>)并包含 padding，这将在散点图和 SVG 画布边缘之间添加空隙。\",\"<blockquote>const dataset = [<br>&nbsp;&nbsp;[ 34,    78 ],<br>&nbsp;&nbsp;[ 109,   280 ],<br>&nbsp;&nbsp;[ 310,   120 ],<br>&nbsp;&nbsp;[ 79,    411 ],<br>&nbsp;&nbsp;[ 420,   220 ],<br>&nbsp;&nbsp;[ 233,   145 ],<br>&nbsp;&nbsp;[ 333,   96 ],<br>&nbsp;&nbsp;[ 222,   333 ],<br>&nbsp;&nbsp;[ 78,    320 ],<br>&nbsp;&nbsp;[ 21,    123 ]<br>];<br>const w = 500;<br>const h = 500;<br><br>// SVG 画布边缘和散点图之间的 padding<br>const padding = 30;<br>const xScale = d3.scaleLinear()<br>&nbsp;&nbsp;.domain([0, d3.max(dataset, (d) => d[0])])<br>&nbsp;&nbsp;.range([padding, w - padding]);</blockquote>\",\"在一开始可能很难理解 padding。想象 x 轴是一条从 0 到 500 （SVG 画布宽的值）的水平直线。在<code>range()</code>方法中包含 padding 使散点图沿着这条直线从 30 （而不是 0）开始，在 470 （而不是 500）结束。\",\"<hr>\",\"使用<code>yScale</code>变量创建一个线性的 y 轴比例尺。<code>domain</code>应该从 0 开始到数据集中 y 的最大值，range 应该使用 SVG 的高(<code>h</code>)并包含 padding。\",\"<strong>提示</strong><br>记得正向布局。当你为 y 坐标设置 range 时，大的值（height 减去 padding）是第一个参数，小的值是第二个参数。\"],\"challengeType\":0,\"fields\":{\"slug\":\"/data-visualization/data-visualization-with-d3/use-dynamic-scales\",\"blockName\":\"Data Visualization with D3\",\"tests\":[{\"text\":\"<code>h2</code>中的文本应该是 30。\",\"testString\":\"assert(output == 30 && $('h2').text() == '30', '<code>h2</code>中的文本应该是 30。');\"},{\"text\":\"yScale 的<code>domain()</code>应该等于<code>[0, 411]</code>。\",\"testString\":\"assert(JSON.stringify(yScale.domain()) == JSON.stringify([0, 411]), 'yScale 的<code>domain()</code>应该等于<code>[0, 411]</code>。');\"},{\"text\":\"yScale 的<code>range()</code>应该等于<code>[470, 30]</code>。\",\"testString\":\"assert(JSON.stringify(yScale.range()) == JSON.stringify([470, 30]), 'yScale 的<code>range()</code>应该等于<code>[470, 30]</code>。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js\"}],\"files\":{\"indexhtml\":{\"key\":\"indexhtml\",\"ext\":\"html\",\"name\":\"index\",\"contents\":\"<body>\\n  <script>\\n    const dataset = [\\n                  [ 34,    78 ],\\n                  [ 109,   280 ],\\n                  [ 310,   120 ],\\n                  [ 79,    411 ],\\n                  [ 420,   220 ],\\n                  [ 233,   145 ],\\n                  [ 333,   96 ],\\n                  [ 222,   333 ],\\n                  [ 78,    320 ],\\n                  [ 21,    123 ]\\n                ];\\n    \\n    const w = 500;\\n    const h = 500;\\n    \\n    // SVG 画布边缘和图形之间的padding\\n    const padding = 30;\\n    \\n    // 创建 x 和 y 的比例尺\\n    \\n    const xScale = d3.scaleLinear()\\n                    .domain([0, d3.max(dataset, (d) => d[0])])\\n                    .range([padding, w - padding]);\\n    \\n    // 在下面添加你的代码\\n    \\n    const yScale = undefined;\\n                     \\n                     \\n    // 在上面添加你的代码\\n    \\n    const output = yScale(411); // 返回 30\\n    d3.select(\\\"body\\\")\\n      .append(\\\"h2\\\")\\n      .text(output)\\n  </script>\\n</body>\",\"head\":\"\",\"tail\":\"\"},\"indexjs\":null,\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js\"}],\"nextChallengePath\":\"/data-visualization/data-visualization-with-d3/use-a-pre-defined-scale-to-place-elements\",\"id\":\"587d7fac367417b2b2512bdd\"},\"slug\":\"/data-visualization/data-visualization-with-d3/use-dynamic-scales\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---data-visualization-data-visualization-with-d-3-use-dynamic-scales-7ed17f327af66d7d3724.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Use Dynamic Scales\",\"description\":[\"D3 的<code>min()</code>和<code>max()</code>方法在设置比例尺时十分有用。\",\"对于一个复杂的数据集，首要是设置比例尺，这样可视化才能适合 SVG 容器的宽和高。所有数据都应布局在 SVG 画布内部，这样它们在页面上才是可见的。\",\"下面这个例子为散点图设置了 x 轴的比例尺。<code>domain()</code>方法给比例尺传递关于散点图原数据值的信息，<code>range()</code>方法给出在页面上进行可视化的实际空间信息。\",\"在这个例子中，domain 是从 0 到数据集中的最大值，它使用<code>max()</code>方法和基于数组中 x 值的回调函数。range 使用 SVG 画布的宽(<code>w</code>)并包含 padding，这将在散点图和 SVG 画布边缘之间添加空隙。\",\"<blockquote>const dataset = [<br>&nbsp;&nbsp;[ 34,    78 ],<br>&nbsp;&nbsp;[ 109,   280 ],<br>&nbsp;&nbsp;[ 310,   120 ],<br>&nbsp;&nbsp;[ 79,    411 ],<br>&nbsp;&nbsp;[ 420,   220 ],<br>&nbsp;&nbsp;[ 233,   145 ],<br>&nbsp;&nbsp;[ 333,   96 ],<br>&nbsp;&nbsp;[ 222,   333 ],<br>&nbsp;&nbsp;[ 78,    320 ],<br>&nbsp;&nbsp;[ 21,    123 ]<br>];<br>const w = 500;<br>const h = 500;<br><br>// SVG 画布边缘和散点图之间的 padding<br>const padding = 30;<br>const xScale = d3.scaleLinear()<br>&nbsp;&nbsp;.domain([0, d3.max(dataset, (d) => d[0])])<br>&nbsp;&nbsp;.range([padding, w - padding]);</blockquote>\",\"在一开始可能很难理解 padding。想象 x 轴是一条从 0 到 500 （SVG 画布宽的值）的水平直线。在<code>range()</code>方法中包含 padding 使散点图沿着这条直线从 30 （而不是 0）开始，在 470 （而不是 500）结束。\",\"<hr>\",\"使用<code>yScale</code>变量创建一个线性的 y 轴比例尺。<code>domain</code>应该从 0 开始到数据集中 y 的最大值，range 应该使用 SVG 的高(<code>h</code>)并包含 padding。\",\"<strong>提示</strong><br>记得正向布局。当你为 y 坐标设置 range 时，大的值（height 减去 padding）是第一个参数，小的值是第二个参数。\"],\"challengeType\":0,\"fields\":{\"slug\":\"/data-visualization/data-visualization-with-d3/use-dynamic-scales\",\"blockName\":\"Data Visualization with D3\",\"tests\":[{\"text\":\"<code>h2</code>中的文本应该是 30。\",\"testString\":\"assert(output == 30 && $('h2').text() == '30', '<code>h2</code>中的文本应该是 30。');\"},{\"text\":\"yScale 的<code>domain()</code>应该等于<code>[0, 411]</code>。\",\"testString\":\"assert(JSON.stringify(yScale.domain()) == JSON.stringify([0, 411]), 'yScale 的<code>domain()</code>应该等于<code>[0, 411]</code>。');\"},{\"text\":\"yScale 的<code>range()</code>应该等于<code>[470, 30]</code>。\",\"testString\":\"assert(JSON.stringify(yScale.range()) == JSON.stringify([470, 30]), 'yScale 的<code>range()</code>应该等于<code>[470, 30]</code>。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js\"}],\"files\":{\"indexhtml\":{\"key\":\"indexhtml\",\"ext\":\"html\",\"name\":\"index\",\"contents\":\"<body>\\n  <script>\\n    const dataset = [\\n                  [ 34,    78 ],\\n                  [ 109,   280 ],\\n                  [ 310,   120 ],\\n                  [ 79,    411 ],\\n                  [ 420,   220 ],\\n                  [ 233,   145 ],\\n                  [ 333,   96 ],\\n                  [ 222,   333 ],\\n                  [ 78,    320 ],\\n                  [ 21,    123 ]\\n                ];\\n    \\n    const w = 500;\\n    const h = 500;\\n    \\n    // SVG 画布边缘和图形之间的padding\\n    const padding = 30;\\n    \\n    // 创建 x 和 y 的比例尺\\n    \\n    const xScale = d3.scaleLinear()\\n                    .domain([0, d3.max(dataset, (d) => d[0])])\\n                    .range([padding, w - padding]);\\n    \\n    // 在下面添加你的代码\\n    \\n    const yScale = undefined;\\n                     \\n                     \\n    // 在上面添加你的代码\\n    \\n    const output = yScale(411); // 返回 30\\n    d3.select(\\\"body\\\")\\n      .append(\\\"h2\\\")\\n      .text(output)\\n  </script>\\n</body>\",\"head\":\"\",\"tail\":\"\"},\"indexjs\":null,\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/d3/4.3.0/d3.min.js\"}],\"nextChallengePath\":\"/data-visualization/data-visualization-with-d3/use-a-pre-defined-scale-to-place-elements\",\"id\":\"587d7fac367417b2b2512bdd\"},\"slug\":\"/data-visualization/data-visualization-with-d3/use-dynamic-scales\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/data-visualization-data-visualization-with-d-3-use-dynamic-scales.json\n// module id = 3482\n// module chunks = 194616062265107"],"sourceRoot":""}