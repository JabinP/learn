webpackJsonp([0xbe8f65671c8c],{3826:function(t,n){t.exports={data:{challengeNode:{title:"Passing Values to Functions with Arguments",description:["函数的参数<code>parameters</code>在函数中充当占位符(也叫形参)的作用，参数可以为一个或多个。调用一个函数时所传入的参数为实参，实参决定着形参真正的值。简单理解：形参即形式、实参即内容。","这是带有两个参数的函数，<code>param1</code>和<code>param2</code>：","<blockquote>function testFun(param1, param2) {<br>&nbsp;&nbsp;console.log(param1, param2);<br>}</blockquote>","接着我们调用<code>testFun</code>：",'<code>testFun("Hello", "World");</code>','我们传递了两个参数，<code>"Hello"</code>和<code>"World"</code>。在函数内部，<code>param1</code>等于“Hello”，<code>param2</code>等于“World”。请注意，<code>testFun</code>函数可以多次调用，每次调用时传递的参数会决定形参的实际值。',"<hr>","<ol><li>创建一个名为<code>functionWithArgs</code>的函数，它可以接收两个参数，计算参数的和，将结果输出到控制台。</li><li>调用这个函数。</li></ol>"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments",blockName:"Basic JavaScript",tests:[{text:"<code>functionWithArgs</code>应该是一个函数",testString:"assert(typeof functionWithArgs === 'function', '<code>functionWithArgs</code>应该是一个函数');"},{text:"<code>functionWithArgs(1,2)</code>应该输出<code>3</code>",testString:"if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(1,2); uncapture(); } assert(logOutput == 3, '<code>functionWithArgs(1,2)</code>应该输出<code>3</code>');"},{text:"<code>functionWithArgs(7,9)</code>应该输出<code>16</code>",testString:"if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(7,9); uncapture(); } assert(logOutput == 16, '<code>functionWithArgs(7,9)</code>应该输出<code>16</code>');"},{text:"在你定义<code>myFunction</code>之后记得调用它",testString:"assert(/^\\s*functionWithArgs\\s*\\(\\s*\\d+\\s*,\\s*\\d+\\s*\\)\\s*;/m.test(code), '在你定义<code>myFunction</code>之后记得调用它');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"// 示例\nfunction ourFunctionWithArgs(a, b) {\n  console.log(a - b);\n}\nourFunctionWithArgs(10, 5); // Outputs 5\n\n// 请把你的代码写在这条注释以下\n\n",head:"var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message) logOutput = JSON.stringify(message).trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();",tail:'uncapture();\n\nif (typeof functionWithArgs !== "function") { \n  (function() { return "functionWithArgs is not defined"; })();\n} else {\n  (function() { return logOutput || "console.log never called"; })();\n}'},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/basic-javascript/global-scope-and-functions",id:"56533eb9ac21ba0edf2244bd"},slug:"/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-basic-javascript-passing-values-to-functions-with-arguments-4471be837e55632f6e00.js.map