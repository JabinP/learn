{"version":3,"sources":["webpack:///path---coding-interview-prep-data-structures-create-a-map-data-structure-f43826b88aad2b7a0962.js","webpack:///./.cache/json/coding-interview-prep-data-structures-create-a-map-data-structure.json"],"names":["webpackJsonp","2823","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,8BAAAC,aAAA,+tBAAAC,cAAA,EAAAC,QAAgzBC,KAAA,qEAAAC,UAAA,kBAAAC,QAAoHC,KAAA,gBAAAC,WAAA,yJAA6LD,KAAA,uDAAAC,WAAA,qZAAgeD,KAAA,sBAAAC,WAAA,qMAA+OD,KAAA,sCAAAC,WAAA,wNAAkRD,KAAA,oCAAAC,WAAA,qMAA6PD,KAAA,uCAAAC,WAAA,yTAAoXD,KAAA,gDAAAC,WAAA,mSAAsWC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,gGAAmJC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sEAAAC,GAAA,4BAAuKrB,KAAA","file":"path---coding-interview-prep-data-structures-create-a-map-data-structure-f43826b88aad2b7a0962.js","sourcesContent":["webpackJsonp([29944453800329],{\n\n/***/ 2823:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Map Data Structure\",\"description\":[\"接下来的几个挑战会涉及到 Map（映射）和 Hash Table（哈希表）这些知识点。Map 是一种存储键值对的数据结构。在 JavaScript 中，对象就是 Map 的一种表现形式。Map 是一种十分通用和高效的数据查询结构，我们可以在 Map 中通过 key（键）快速地获取对应的 value（值）。\",\"挑战说明：现在我们需要创建 Map。鉴于 JavaScript 的对象已经为我们提供了十分高效的 Map 数据结构，我们在本次挑战中写的一些方法只是出于熟悉 Map 的目的。然而 JavaScript 对象本身只为我们提供了少量的操作方法，如果我们想要添加一些自定义方法该怎么办呢？\",\"现在我们使用 JavaScript 对象来模拟<code>Map</code>数据结构，我们需要在 Map 对象中创建如下方法：\",\"<code>add</code>方法接收<code>key</code>和<code>value</code>作为参数，并把键值对添加到 Map 中；\",\"<code>remove</code>方法接收一个<code>key</code>值并移除对应的键值对；\",\"<code>get</code>方法接收<code>key</code>值，并返回对应的<code>value</code>值；\",\"<code>has</code>方法根据值的存在情况返回相应的<code>boolean</code>值；\",\"<code>values</code>方法以数组形式返回 Map 中所有的 value；\",\"<code>size</code>方法返回 Map 中元素的个数；\",\"<code>clear</code>清空 Map。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-map-data-structure\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"应存在 Map 数据结构。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; return (typeof test == 'object')})(), '应存在 Map 数据结构。');\"},{\"text\":\"Map 对象应该有 add、remove、get、has、values、clear、size 这些方法。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; return (typeof test.add == 'function' && typeof test.remove == 'function' && typeof test.get == 'function' && typeof test.has == 'function' && typeof test.values == 'function' && typeof test.clear == 'function' && typeof test.size == 'function')})(), 'Map 对象应该有 add、remove、get、has、values、clear、size 这些方法。');\"},{\"text\":\"add 方法应添加元素到 map 中。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add(5,6); test.add(2,3); test.add(2,5); return (test.size() == 2)})(), 'add 方法应添加元素到 map 中。');\"},{\"text\":\"当指定元素存在时，has 方法应返回 true，否则返回 false。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('test','value'); return (test.has('test') && !test.has('false'))})(), '当指定元素存在时，has 方法应返回 true，否则返回 false。');\"},{\"text\":\"get 方法接收 key 作为参数，并应该返回对应的 value。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('abc','def'); return (test.get('abc') == 'def')})(), 'get 方法接收 key 作为参数，并应该返回对应的 value。');\"},{\"text\":\"values 方法应该以数组形式返回 map 中所有的 value 值。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('a','b'); test.add('c','d'); test.add('e','f'); var vals = test.values(); return (vals.indexOf('b') != -1 && vals.indexOf('d') != -1 && vals.indexOf('f') != -1)})(), 'values 方法应该以数组形式返回 map 中所有的 value 值。');\"},{\"text\":\"clear 方法应清空 map 中的所有元素，size 方法应返回 map 中元素的个数。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('b','b'); test.add('c','d'); test.remove('asdfas'); var init = test.size(); test.clear(); return (init == 2 && test.size() == 0)})(), 'clear 方法应清空 map 中的所有元素，size 方法应返回 map 中元素的个数。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var Map = function() {\\n  this.collection = {};\\n  // 请把你的代码写在这条注释以下\\n  // 请把你的代码写在这条注释以上\\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/create-an-es6-javascript-map\",\"id\":\"8d5823c8c441eddfaeb5bdef\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-map-data-structure\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-data-structures-create-a-map-data-structure-f43826b88aad2b7a0962.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Create a Map Data Structure\",\"description\":[\"接下来的几个挑战会涉及到 Map（映射）和 Hash Table（哈希表）这些知识点。Map 是一种存储键值对的数据结构。在 JavaScript 中，对象就是 Map 的一种表现形式。Map 是一种十分通用和高效的数据查询结构，我们可以在 Map 中通过 key（键）快速地获取对应的 value（值）。\",\"挑战说明：现在我们需要创建 Map。鉴于 JavaScript 的对象已经为我们提供了十分高效的 Map 数据结构，我们在本次挑战中写的一些方法只是出于熟悉 Map 的目的。然而 JavaScript 对象本身只为我们提供了少量的操作方法，如果我们想要添加一些自定义方法该怎么办呢？\",\"现在我们使用 JavaScript 对象来模拟<code>Map</code>数据结构，我们需要在 Map 对象中创建如下方法：\",\"<code>add</code>方法接收<code>key</code>和<code>value</code>作为参数，并把键值对添加到 Map 中；\",\"<code>remove</code>方法接收一个<code>key</code>值并移除对应的键值对；\",\"<code>get</code>方法接收<code>key</code>值，并返回对应的<code>value</code>值；\",\"<code>has</code>方法根据值的存在情况返回相应的<code>boolean</code>值；\",\"<code>values</code>方法以数组形式返回 Map 中所有的 value；\",\"<code>size</code>方法返回 Map 中元素的个数；\",\"<code>clear</code>清空 Map。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/create-a-map-data-structure\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"应存在 Map 数据结构。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; return (typeof test == 'object')})(), '应存在 Map 数据结构。');\"},{\"text\":\"Map 对象应该有 add、remove、get、has、values、clear、size 这些方法。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; return (typeof test.add == 'function' && typeof test.remove == 'function' && typeof test.get == 'function' && typeof test.has == 'function' && typeof test.values == 'function' && typeof test.clear == 'function' && typeof test.size == 'function')})(), 'Map 对象应该有 add、remove、get、has、values、clear、size 这些方法。');\"},{\"text\":\"add 方法应添加元素到 map 中。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add(5,6); test.add(2,3); test.add(2,5); return (test.size() == 2)})(), 'add 方法应添加元素到 map 中。');\"},{\"text\":\"当指定元素存在时，has 方法应返回 true，否则返回 false。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('test','value'); return (test.has('test') && !test.has('false'))})(), '当指定元素存在时，has 方法应返回 true，否则返回 false。');\"},{\"text\":\"get 方法接收 key 作为参数，并应该返回对应的 value。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('abc','def'); return (test.get('abc') == 'def')})(), 'get 方法接收 key 作为参数，并应该返回对应的 value。');\"},{\"text\":\"values 方法应该以数组形式返回 map 中所有的 value 值。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('a','b'); test.add('c','d'); test.add('e','f'); var vals = test.values(); return (vals.indexOf('b') != -1 && vals.indexOf('d') != -1 && vals.indexOf('f') != -1)})(), 'values 方法应该以数组形式返回 map 中所有的 value 值。');\"},{\"text\":\"clear 方法应清空 map 中的所有元素，size 方法应返回 map 中元素的个数。\",\"testString\":\"assert((function() { var test = false; if (typeof Map !== 'undefined') { test = new Map() }; test.add('b','b'); test.add('c','d'); test.remove('asdfas'); var init = test.size(); test.clear(); return (init == 2 && test.size() == 0)})(), 'clear 方法应清空 map 中的所有元素，size 方法应返回 map 中元素的个数。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var Map = function() {\\n  this.collection = {};\\n  // 请把你的代码写在这条注释以下\\n  // 请把你的代码写在这条注释以上\\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/create-an-es6-javascript-map\",\"id\":\"8d5823c8c441eddfaeb5bdef\"},\"slug\":\"/coding-interview-prep/data-structures/create-a-map-data-structure\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-data-structures-create-a-map-data-structure.json\n// module id = 2823\n// module chunks = 29944453800329"],"sourceRoot":""}