webpackJsonp([67886999070434],{3345:function(e,o){e.exports={data:{challengeNode:{title:"ABC Problem",description:["<p>给你一个ABC块集合 （例如：儿童字母积木），有20个方块，每个方块上有两个字母。一个完整的字母表保证有所有的块，下面是示例：</p>","<p>(B O)</p>","<p>(X K)</p>","<p>(D Q)</p>","<p>(C P)</p>","<p>(N A)</p>","<p>(G T)</p>","<p>(R E)</p>","<p>(T G)</p>","<p>(Q D)</p>","<p>(F S)</p>","<p>(J W)</p>","<p>(H U)</p>","<p>(V I)</p>","<p>(A N)</p>","<p>(O B)</p>","<p>(E R)</p>","<p>(F S)</p>","<p>(L Y)</p>","<p>(P C)</p>","<p>(Z M)</p>","<p>需要记住的一些规则：</p>","一旦使用了块上的一个字母，这个块就不能再使用了。","函数应不区分大小写。","<p>实现一个函数，该函数接受一个字符串(单词)，并确定该单词是否可以用给定的块集合拼写。</p>"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/abc-problem",blockName:"Rosetta Code",tests:[{text:"<code>canMakeWord</code> 是一个函数。",testString:"assert(typeof canMakeWord === 'function', '<code>canMakeWord</code> 是一个函数。');"},{text:"<code>canMakeWord</code> 应返回布尔值。",testString:"assert(typeof canMakeWord('hi') === 'boolean', '<code>canMakeWord</code> 应返回布尔值。');"},{text:'<code>canMakeWord("bark")</code> 应返回 TRUE。',testString:"assert(canMakeWord(words[0]), '<code>canMakeWord(\"bark\")</code> 应返回 TRUE。');"},{text:'<code>canMakeWord("BooK")</code> 应返回 FALSE。',testString:"assert(!canMakeWord(words[1]), '<code>canMakeWord(\"BooK\")</code> 应返回 FALSE。');"},{text:'<code>canMakeWord("TReAT")</code> 应返回 TRUE。',testString:"assert(canMakeWord(words[2]), '<code>canMakeWord(\"TReAT\")</code> 应返回 TRUE。');"},{text:'<code>canMakeWord("COMMON")</code> 应返回 FALSE。',testString:"assert(!canMakeWord(words[3]), '<code>canMakeWord(\"COMMON\")</code> 应返回 FALSE。');"},{text:'<code>canMakeWord("squAD")</code> 应返回 TRUE。',testString:"assert(canMakeWord(words[4]), '<code>canMakeWord(\"squAD\")</code> 应返回 TRUE。');"},{text:'<code>canMakeWord("conFUSE")</code> 应返回 TRUE。',testString:"assert(canMakeWord(words[5]), '<code>canMakeWord(\"conFUSE\")</code> 应返回 TRUE。');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function canMakeWord (word) {\n  // 祝你好运！\n}",head:"",tail:"const words = ['bark', 'BooK', 'TReAT', 'COMMON', 'squAD', 'conFUSE'];"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/abundant-deficient-and-perfect-number-classifications",id:"594810f028c0303b75339acc"},slug:"/coding-interview-prep/rosetta-code/abc-problem"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-abc-problem-bc53c735ece5fc04cb93.js.map