{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-advanced-node-and-express-implementation-of-social-authentication-ii-7c59f78e1f26ab05d45e.js","webpack:///./.cache/json/information-security-and-quality-assurance-advanced-node-and-express-implementation-of-social-authentication-ii.json"],"names":["webpackJsonp","3656","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,6CAAAC,SAAA,KAAAC,aAAA,uXAAic,wwBAA0wB,gHAAAC,cAAA,EAAAC,QAAoJC,UAAA,4BAAAC,KAAA,mHAAAC,QAA4KC,KAAA,SAAAC,WAAA,sQAAmSD,KAAA,QAAAC,WAAA,yNAAqPD,KAAA,wBAAAC,WAAA,ofAA+hBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,oHAAAC,GAAA,4BAAqNV,KAAA","file":"path---information-security-and-quality-assurance-advanced-node-and-express-implementation-of-social-authentication-ii-7c59f78e1f26ab05d45e.js","sourcesContent":["webpackJsonp([22029144033664],{\n\n/***/ 3656:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Implementation of Social Authentication II\",\"guideUrl\":null,\"description\":[\"注意，本项目在<a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socialauth/'>这个 Glitch 项目</a>的基础上进行开发，你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-socialauth/'>GitHub</a> 上克隆。\",\"设置 GitHub 验证的最后一步是创建策略本身。为此，你需要在项目中<code>require</code>'passport-github'，且实例化为 GithubStrategy：<code>const GitHubStrategy = require('passport-github').Strategy;</code>。\",\"为了设置 GitHub 策略，我们需要在 <b>passport</b> 中使用实例化的 <b>GithubStrategy</b>，它可以接收两个参数：一个对象（包括 <em>clientID</em>, <em>clientSecret</em> 和 <em>callbackURL</em>），以及一个回调函数。在这个回调函数中，我们要处理验证成功时，判断用户是否已经在数据库中存在的逻辑，还有如果数据库中不存在，把用户数据添加到数据库的代码。这种处理方式适用于绝大部分第三方验证策略，但有些策略会需要我们提供更多的信息，详情请参考相关策略的 README。例如，Google 的验证策略会要求你提供一个 <em>scope</em>，用于标示用户成功登录后，你需要从返回的对象中获取那些信息。以及，这也需要经过用户同意，你才可以获取到。当前我们使用的验证策略，你也可以从它 GitHub 的页面上了解它的用法，不过我们也会在这里进行详细讲解。\",\"你的新策略应该这样去实现：<pre>passport.use(new GitHubStrategy({\\n    clientID: process.env.GITHUB_CLIENT_ID,\\n    clientSecret: process.env.GITHUB_CLIENT_SECRET,\\n    callbackURL: /*INSERT CALLBACK URL ENTERED INTO GITHUB HERE*/\\n  },\\n  function(accessToken, refreshToken, profile, cb) {\\n      console.log(profile);\\n      // 在这里写和数据库相关的代码\\n  }\\n));</pre>\",\"目前，你的验证部分不会成功。由于没有数据库的逻辑和回调函数，你的代码目前还会报错。但如果你试一试，就可以在右边的控制台里看到输出了你的 GitHub 的个人信息。\",\"完成上述要求后，你就可以在左边提交你的页面链接。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Advanced Node and Express\",\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/implementation-of-social-authentication-ii\",\"tests\":[{\"text\":\"应添加依赖。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'passport-github', '你的项目应该有 \\\"passport-github\\\" 作为依赖。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"应引入依赖\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\\\"|')passport-github(\\\"|')/gi, '你应该引入 passport-github'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"到目前为止，Github 策略应正确设置。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /passport.use.*new GitHubStrategy/gi, 'Passport 应该使用新的 GitHubStrategy'); assert.match(data, /callbackURL:( |)(\\\"|').*(\\\"|')/gi, '你应该设置一个 callbackURL'); assert.match(data, /process.env.GITHUB_CLIENT_SECRET/g, '你的代码中应包含 process.env.GITHUB_CLIENT_SECRET'); assert.match(data, /process.env.GITHUB_CLIENT_ID/g, '你的代码中应包含 process.env.GITHUB_CLIENT_ID'); }, xhr => { throw new Error(xhr.statusText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/advanced-node-and-express/implementation-of-social-authentication-iii\",\"id\":\"589a69f5f9fc0f352b528e71\"},\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/implementation-of-social-authentication-ii\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-advanced-node-and-express-implementation-of-social-authentication-ii-7c59f78e1f26ab05d45e.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Implementation of Social Authentication II\",\"guideUrl\":null,\"description\":[\"注意，本项目在<a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-socialauth/'>这个 Glitch 项目</a>的基础上进行开发，你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-socialauth/'>GitHub</a> 上克隆。\",\"设置 GitHub 验证的最后一步是创建策略本身。为此，你需要在项目中<code>require</code>'passport-github'，且实例化为 GithubStrategy：<code>const GitHubStrategy = require('passport-github').Strategy;</code>。\",\"为了设置 GitHub 策略，我们需要在 <b>passport</b> 中使用实例化的 <b>GithubStrategy</b>，它可以接收两个参数：一个对象（包括 <em>clientID</em>, <em>clientSecret</em> 和 <em>callbackURL</em>），以及一个回调函数。在这个回调函数中，我们要处理验证成功时，判断用户是否已经在数据库中存在的逻辑，还有如果数据库中不存在，把用户数据添加到数据库的代码。这种处理方式适用于绝大部分第三方验证策略，但有些策略会需要我们提供更多的信息，详情请参考相关策略的 README。例如，Google 的验证策略会要求你提供一个 <em>scope</em>，用于标示用户成功登录后，你需要从返回的对象中获取那些信息。以及，这也需要经过用户同意，你才可以获取到。当前我们使用的验证策略，你也可以从它 GitHub 的页面上了解它的用法，不过我们也会在这里进行详细讲解。\",\"你的新策略应该这样去实现：<pre>passport.use(new GitHubStrategy({\\n    clientID: process.env.GITHUB_CLIENT_ID,\\n    clientSecret: process.env.GITHUB_CLIENT_SECRET,\\n    callbackURL: /*INSERT CALLBACK URL ENTERED INTO GITHUB HERE*/\\n  },\\n  function(accessToken, refreshToken, profile, cb) {\\n      console.log(profile);\\n      // 在这里写和数据库相关的代码\\n  }\\n));</pre>\",\"目前，你的验证部分不会成功。由于没有数据库的逻辑和回调函数，你的代码目前还会报错。但如果你试一试，就可以在右边的控制台里看到输出了你的 GitHub 的个人信息。\",\"完成上述要求后，你就可以在左边提交你的页面链接。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Advanced Node and Express\",\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/implementation-of-social-authentication-ii\",\"tests\":[{\"text\":\"应添加依赖。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/package.json') .then(data => { var packJson = JSON.parse(data); assert.property(packJson.dependencies, 'passport-github', '你的项目应该有 \\\"passport-github\\\" 作为依赖。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"应引入依赖\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /require.*(\\\"|')passport-github(\\\"|')/gi, '你应该引入 passport-github'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"到目前为止，Github 策略应正确设置。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /passport.use.*new GitHubStrategy/gi, 'Passport 应该使用新的 GitHubStrategy'); assert.match(data, /callbackURL:( |)(\\\"|').*(\\\"|')/gi, '你应该设置一个 callbackURL'); assert.match(data, /process.env.GITHUB_CLIENT_SECRET/g, '你的代码中应包含 process.env.GITHUB_CLIENT_SECRET'); assert.match(data, /process.env.GITHUB_CLIENT_ID/g, '你的代码中应包含 process.env.GITHUB_CLIENT_ID'); }, xhr => { throw new Error(xhr.statusText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/advanced-node-and-express/implementation-of-social-authentication-iii\",\"id\":\"589a69f5f9fc0f352b528e71\"},\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/implementation-of-social-authentication-ii\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-advanced-node-and-express-implementation-of-social-authentication-ii.json\n// module id = 3656\n// module chunks = 22029144033664"],"sourceRoot":""}