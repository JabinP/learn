{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-es-6-write-concise-object-literal-declarations-using-simple-fields-4fa3c1cd2a3476ecb262.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-es-6-write-concise-object-literal-declarations-using-simple-fields.json"],"names":["webpackJsonp","3898","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,gEAAAC,aAAA,yJAAiO,sPAAsP,qDAAAC,cAAA,EAAAC,QAAgGC,KAAA,+GAAAC,UAAA,MAAAC,QAAkJC,KAAA,oEAAqEC,WAAA,wQAAySD,KAAA,sBAAAC,WAAA,wFAAiIC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,+OAA6RC,KAAA,GAAAC,KAAA,IAAiCC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,8FAAAC,GAAA,4BAA+LrB,KAAA","file":"path---javascript-algorithms-and-data-structures-es-6-write-concise-object-literal-declarations-using-simple-fields-4fa3c1cd2a3476ecb262.js","sourcesContent":["webpackJsonp([133138795489573],{\n\n/***/ 3898:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Write Concise Object Literal Declarations Using Simple Fields\",\"description\":[\"ES6 添加了一些很棒的功能，以便于更方便地定义对象。\",\"请看以下代码：\",\"<blockquote>const getMousePosition = (x, y) => ({<br>&nbsp;&nbsp;x: x,<br>&nbsp;&nbsp;y: y<br>});</blockquote>\",\"<code>getMousePosition</code>是一个返回了拥有2个属性的对象的简单函数。\",\"ES6 提供了一个语法糖，消除了类似<code>x: x</code>这种冗余的写法.你可以仅仅只写一次<code>x<code>，解释器会自动将其转换成<code>x: x</code>。\",\"下面是使用这种语法重写的同样的函数：\",\"<blockquote>const getMousePosition = (x, y) => ({ x, y });</blockquote>\",\"<hr>\",\"请使用简单属性对象的语法来创建并返回一个<code>Person</code>对象。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields\",\"blockName\":\"ES6\",\"tests\":[{\"text\":\"输出是<code>{name: \\\"Zodiac Hasbro\\\", age: 56, gender: \\\"male\\\"}</code>。\",\"testString\":\"assert(() => {const res={name:\\\"Zodiac Hasbro\\\",age:56,gender:\\\"male\\\"}; const person=createPerson(\\\"Zodiac Hasbro\\\", 56, \\\"male\\\"); return Object.keys(person).every(k => person[k] === res[k]);}, '输出是<code>{name: \\\"Zodiac Hasbro\\\", age: 56, gender: \\\"male\\\"}</code>。');\"},{\"text\":\"不要使用<code>:</code>。\",\"testString\":\"getUserInput => assert(!getUserInput('index').match(/:/g), '不要使用<code>:</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"const createPerson = (name, age, gender) => {\\n  \\\"use strict\\\";\\n  // 在这行以下修改代码\\n  return {\\n    name: name,\\n    age: age,\\n    gender: gender\\n  };\\n  // 在这行以上修改代码\\n};\\nconsole.log(createPerson(\\\"Zodiac Hasbro\\\", 56, \\\"male\\\")); // 返回正确的对象\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6\",\"id\":\"587d7b8a367417b2b2512b4f\"},\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-es-6-write-concise-object-literal-declarations-using-simple-fields-4fa3c1cd2a3476ecb262.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Write Concise Object Literal Declarations Using Simple Fields\",\"description\":[\"ES6 添加了一些很棒的功能，以便于更方便地定义对象。\",\"请看以下代码：\",\"<blockquote>const getMousePosition = (x, y) => ({<br>&nbsp;&nbsp;x: x,<br>&nbsp;&nbsp;y: y<br>});</blockquote>\",\"<code>getMousePosition</code>是一个返回了拥有2个属性的对象的简单函数。\",\"ES6 提供了一个语法糖，消除了类似<code>x: x</code>这种冗余的写法.你可以仅仅只写一次<code>x<code>，解释器会自动将其转换成<code>x: x</code>。\",\"下面是使用这种语法重写的同样的函数：\",\"<blockquote>const getMousePosition = (x, y) => ({ x, y });</blockquote>\",\"<hr>\",\"请使用简单属性对象的语法来创建并返回一个<code>Person</code>对象。\"],\"challengeType\":1,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields\",\"blockName\":\"ES6\",\"tests\":[{\"text\":\"输出是<code>{name: \\\"Zodiac Hasbro\\\", age: 56, gender: \\\"male\\\"}</code>。\",\"testString\":\"assert(() => {const res={name:\\\"Zodiac Hasbro\\\",age:56,gender:\\\"male\\\"}; const person=createPerson(\\\"Zodiac Hasbro\\\", 56, \\\"male\\\"); return Object.keys(person).every(k => person[k] === res[k]);}, '输出是<code>{name: \\\"Zodiac Hasbro\\\", age: 56, gender: \\\"male\\\"}</code>。');\"},{\"text\":\"不要使用<code>:</code>。\",\"testString\":\"getUserInput => assert(!getUserInput('index').match(/:/g), '不要使用<code>:</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"const createPerson = (name, age, gender) => {\\n  \\\"use strict\\\";\\n  // 在这行以下修改代码\\n  return {\\n    name: name,\\n    age: age,\\n    gender: gender\\n  };\\n  // 在这行以上修改代码\\n};\\nconsole.log(createPerson(\\\"Zodiac Hasbro\\\", 56, \\\"male\\\")); // 返回正确的对象\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6\",\"id\":\"587d7b8a367417b2b2512b4f\"},\"slug\":\"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-es-6-write-concise-object-literal-declarations-using-simple-fields.json\n// module id = 3898\n// module chunks = 133138795489573"],"sourceRoot":""}