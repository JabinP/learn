webpackJsonp([0x7dce9480147c],{3837:function(e,n){e.exports={data:{challengeNode:{title:"Stand in Line",description:["在计算机科学中<dfn>队列</dfn>（queue）是一个抽象的数据结构，队列中的条目都是有秩序的。新的条目会被加到<code>队列</code>的末尾，旧的条目会从<code>队列</code>的头部被移出。","写一个函数<code>nextInLine</code>，用一个数组(<code>arr</code>)和一个数字(<code>item</code>)作为参数。","把数字添加到数组的结尾，然后移出数组的第一个元素。","最后<code>nextInLine</code>函数应该返回被删除的元素。"],challengeType:1,fields:{slug:"/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line",blockName:"Basic JavaScript",tests:[{text:"<code>nextInLine([], 5)</code>应该返回一个数字",testString:"assert.isNumber(nextInLine([],5), '<code>nextInLine([], 5)</code>应该返回一个数字');"},{text:"<code>nextInLine([], 1)</code>应该返回<code>1</code>",testString:"assert(nextInLine([],1) === 1, '<code>nextInLine([], 1)</code>应该返回<code>1</code>');"},{text:"<code>nextInLine([2], 1)</code>应该返回<code>2</code>",testString:"assert(nextInLine([2],1) === 2, '<code>nextInLine([2], 1)</code>应该返回<code>2</code>');"},{text:"<code>nextInLine([5,6,7,8,9], 1)</code>应该返回<code>5</code>",testString:"assert(nextInLine([5,6,7,8,9],1) === 5, '<code>nextInLine([5,6,7,8,9], 1)</code>应该返回<code>5</code>');"},{text:"在<code>nextInLine(testArr, 10)</code>执行后<code>testArr[4]</code>应该是<code>10</code>",testString:"nextInLine(testArr, 10); assert(testArr[4] === 10, '在<code>nextInLine(testArr, 10)</code>执行后<code>testArr[4]</code>应该是<code>10</code>');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'function nextInLine(arr, item) {\n  // 请把你的代码写在这里\n  \n  return item;  // 请修改这一行\n}\n\n// 初始化测试数据\nvar testArr = [1,2,3,4,5];\n\n// 控制台输出\nconsole.log("Before: " + JSON.stringify(testArr));\nconsole.log(nextInLine(testArr, 6)); // Modify this line to test\nconsole.log("After: " + JSON.stringify(testArr));',head:"var logOutput = [];\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput.push(message);\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();",tail:'uncapture();\ntestArr = [1,2,3,4,5];\n(function() { return logOutput.join("\\n");})();'},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/basic-javascript/understanding-boolean-values",id:"56533eb9ac21ba0edf2244c6"},slug:"/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-basic-javascript-stand-in-line-0a327eb51f7651d82d57.js.map