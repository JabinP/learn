webpackJsonp([22737902285178],{3424:function(t,e){t.exports={data:{challengeNode:{title:"Word wrap",description:["<p>","Even today, with proportional fonts and complex layouts, there are still","cases where you need to wrap text at a specified","column.  The basic task is to wrap a paragraph of text in a simple way.","Example text:","</p>","<pre>","Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX algorithm.","If your language provides this, you get easy extra credit,","but you ''must reference documentation'' indicating that the algorithm","is something better than a simple minimimum length algorithm.","</pre>","<p>","Task:","","    Write a function that can wrap this text to any number of characters.","","As an example, the text wrapped to 80 characters should look like the following:","</p>","<pre>","Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX","algorithm. If your language provides this, you get easy extra credit, but you","must reference documentation indicating that the algorithm is something better","than a simple minimimum length algorithm.","</pre>"],challengeType:5,fields:{slug:"/coding-interview-prep/rosetta-code/word-wrap",blockName:"Rosetta Code",tests:[{text:"wrap must be a function.",testString:"assert.equal(typeof wrap, 'function', 'wrap must be a function.');"},{text:"wrap must return a string.",testString:"assert.equal(typeof wrap('abc', 10), 'string', 'wrap must return a string.');"},{text:"wrap(80) must return 4 lines.",testString:"assert(wrapped80.split('\\n').length === 4, 'wrap(80) must return 4 lines.');"},{text:"Your <code>wrap</code> function should return our expected text",testString:"assert.equal(wrapped80.split('\\n')[0], firstRow80, 'Your <code>wrap</code> function should return our expected text');"},{text:"wrap(42) must return 7 lines.",testString:"assert(wrapped42.split('\\n').length === 7, 'wrap(42) must return 7 lines.');"},{text:"Your <code>wrap</code> function should return our expected text",testString:"assert.equal(wrapped42.split('\\n')[0], firstRow42, 'Your <code>wrap</code> function should return our expected text');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function wrap (text, limit) {\n  return text;\n}",head:"",tail:"const text =\n`Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX algorithm.\nIf your language provides this, you get easy extra credit,\nbut you ''must reference documentation'' indicating that the algorithm\nis something better than a simple minimimum length algorithm.`;\n\nconst wrapped80 = wrap(text, 80);\nconst wrapped42 = wrap(text, 42);\n\nconst firstRow80 =\n    'Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX';\n\nconst firstRow42 = 'Wrap text using a more sophisticated';"},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/coding-interview-prep/rosetta-code/y-combinator",id:"594810f028c0303b75339ad4"},slug:"/coding-interview-prep/rosetta-code/word-wrap"}}}});
//# sourceMappingURL=path---coding-interview-prep-rosetta-code-word-wrap-142d5c6cd11ff7d7b637.js.map