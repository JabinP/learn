{"version":3,"sources":["webpack:///path---front-end-libraries-react-and-redux-extract-local-state-into-redux-fb37fc24a7c995562f95.js","webpack:///./.cache/json/front-end-libraries-react-and-redux-extract-local-state-into-redux.json"],"names":["webpackJsonp","3561","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,iCAAAC,aAAA,+wBAAAC,cAAA,EAAAC,QAAm2BC,KAAA,sEAAAC,UAAA,kBAAAC,QAAqHC,KAAA,kCAAAC,WAAA,kMAAwPD,KAAA,8GAAAC,WAAA,kRAAoZD,KAAA,mEAAAC,WAAA,wUAA+ZD,KAAA,6EAAAC,WAAA,iWAAkcD,KAAA,yDAAAC,WAAA,6VAA0aD,KAAA,6DAAAC,WAAA,qvBAAs0BD,KAAA,kGAAAC,WAAA,2kCAAisCD,KAAA,uEAAAC,WAAA,0mCAAosCC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2GC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,s6DAA29DC,KAAA,GAAAC,KAAA,uEAAyFC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,sDAAuEjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2Ge,kBAAA,gEAAAC,GAAA,4BAAsHxB,KAAA","file":"path---front-end-libraries-react-and-redux-extract-local-state-into-redux-fb37fc24a7c995562f95.js","sourcesContent":["webpackJsonp([121208387582666],{\n\n/***/ 3561:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Extract Local State into Redux\",\"description\":[\"胜利就在眼前了！请回顾一下为管理 React messages app 的状态写的 Redux 代码。现在有了连接好的 Redux，你还要从<code>Presentational</code>组件中提取状态管理到 Redux，在<code>Presentational</code>组件内处理本地状态。\",\"<hr>\",\"在<code>Presentational</code>组件中，先删除本地<code>state</code>中的<code>messages</code>属性，被删的 messages 将由 Redux 管理。接着，修改<code>submitMessage()</code>方法，使该方法从<code>this.props</code>那里分发<code>submitNewMessage()</code>；从本地<code>state</code>中传入当前消息输入作为参数。因本地状态删除了<code>messages</code>属性，所以在调用<code>this.setState()</code>时也要删除该属性。最后，修改<code>render()</code>方法，使其所映射的消息是从<code>props</code>接收的，而不是<code>state</code>\",\"完成这些更改后，我们的应用会实现 Redux 管理应用的状态，但它继续运行着相同的功能。此示例还阐明了组件获得本地状态的方式，即在自己的状态中继续跟踪用户本地输入。由此可见，Redux 为 React 提供了很有用的状态管理框架。先前，你仅使用 React 的本地状态也实现了相同的结果，这在应付简单的应用时通常是可行的。但是，随着应用变得越来越大，越来越复杂，应用的状态管理也变得非常困难，Redux 就是为解决这样的问题而诞生的。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/extract-local-state-into-redux\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>AppWrapper</code>应该渲染该页面。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), '<code>AppWrapper</code>应该渲染该页面。');\"},{\"text\":\"<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), '<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。');\"},{\"text\":\"<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return Array.isArray(props.messages); })(), '<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。');\"},{\"text\":\"<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return typeof props.submitNewMessage === 'function'; })(), '<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。');\"},{\"text\":\"<code>Presentational</code>组件的状态应包含一个初始化为空字符串的input属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalState = mockedComponent.find('Presentational').instance().state; return typeof PresentationalState.input === 'string' && Object.keys(PresentationalState).length === 1; })(), '<code>Presentational</code>组件的状态应包含一个初始化为空字符串的input属性。');\"},{\"text\":\"键入<code>input</code>元素应更新<code>Presentational</code>组件的状态。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const testValue = '__MOCK__INPUT__'; const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); let initialInput = mockedComponent.find('Presentational').find('input'); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const updated = await changed(); const updatedInput = updated.find('Presentational').find('input'); assert(initialInput.props().value === '' && updatedInput.props().value === '__MOCK__INPUT__', '键入<code>input</code>元素应更新<code>Presentational</code>组件的状态。'); }; \"},{\"text\":\"在<code>Presentational</code>组件上 dispatch <code>submitMessage</code>应更新 Redux store 并清除本地状态中的输入。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); let beforeProps = mockedComponent.find('Presentational').props(); const testValue = '__TEST__EVENT__INPUT__'; const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const clickButton = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterChange = await changed(); const afterChangeInput = afterChange.find('input').props().value; const afterClick = await clickButton(); const afterProps = mockedComponent.find('Presentational').props(); assert(beforeProps.messages.length === 0 && afterChangeInput === testValue && afterProps.messages.pop() === testValue && afterClick.find('input').props().value === '', '在<code>Presentational</code>组件上 dispatch <code>submitMessage</code>应更新 Redux store 并清除本地状态中的输入。'); }; \"},{\"text\":\"<code>Presentational</code>组件应渲染 Redux store 中的<code>messages</code>\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); let beforeProps = mockedComponent.find('Presentational').props(); const testValue = '__TEST__EVENT__INPUT__'; const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const clickButton = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterChange = await changed(); const afterChangeInput = afterChange.find('input').props().value; const afterClick = await clickButton(); const afterProps = mockedComponent.find('Presentational').props(); assert(beforeProps.messages.length === 0 && afterChangeInput === testValue && afterProps.messages.pop() === testValue && afterClick.find('input').props().value === '' && afterClick.find('ul').childAt(0).text() === testValue, '<code>Presentational</code>组件应渲染 Redux store 中的<code>messages</code>'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"// Redux:\\nconst ADD = 'ADD';\\n\\nconst addMessage = (message) => {\\n  return {\\n    type: ADD,\\n    message: message\\n  }\\n};\\n\\nconst messageReducer = (state = [], action) => {\\n  switch (action.type) {\\n    case ADD:\\n      return [\\n        ...state,\\n        action.message\\n      ];\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst store = Redux.createStore(messageReducer);\\n\\n// React:\\nconst Provider = ReactRedux.Provider;\\nconst connect = ReactRedux.connect;\\n\\n// 请在本行以下添加你的代码\\nclass Presentational extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input: '',\\n      messages: []\\n    }\\n    this.handleChange = this.handleChange.bind(this);\\n    this.submitMessage = this.submitMessage.bind(this);\\n  }\\n  handleChange(event) {\\n    this.setState({\\n      input: event.target.value\\n    });\\n  }\\n  submitMessage() {\\n    this.setState({\\n      input: '',\\n      messages: this.state.messages.concat(this.state.input)\\n    });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <h2>Type in a new Message:</h2>\\n        <input\\n          value={this.state.input}\\n          onChange={this.handleChange}/><br/>\\n        <button onClick={this.submitMessage}>Submit</button>\\n        <ul>\\n          {this.state.messages.map( (message, idx) => {\\n              return (\\n                 <li key={idx}>{message}</li>\\n              )\\n            })\\n          }\\n        </ul>\\n      </div>\\n    );\\n  }\\n};\\n// 请在本行以上添加你的代码\\n\\nconst mapStateToProps = (state) => {\\n  return {messages: state}\\n};\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    submitNewMessage: (message) => {\\n      dispatch(addMessage(message))\\n    }\\n  }\\n};\\n\\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\\n\\nclass AppWrapper extends React.Component {\\n  render() {\\n    return (\\n      <Provider store={store}>\\n        <Container/>\\n      </Provider>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<AppWrapper />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/moving-forward-from-here\",\"id\":\"5a24c314108439a4d4036149\"},\"slug\":\"/front-end-libraries/react-and-redux/extract-local-state-into-redux\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-and-redux-extract-local-state-into-redux-fb37fc24a7c995562f95.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Extract Local State into Redux\",\"description\":[\"胜利就在眼前了！请回顾一下为管理 React messages app 的状态写的 Redux 代码。现在有了连接好的 Redux，你还要从<code>Presentational</code>组件中提取状态管理到 Redux，在<code>Presentational</code>组件内处理本地状态。\",\"<hr>\",\"在<code>Presentational</code>组件中，先删除本地<code>state</code>中的<code>messages</code>属性，被删的 messages 将由 Redux 管理。接着，修改<code>submitMessage()</code>方法，使该方法从<code>this.props</code>那里分发<code>submitNewMessage()</code>；从本地<code>state</code>中传入当前消息输入作为参数。因本地状态删除了<code>messages</code>属性，所以在调用<code>this.setState()</code>时也要删除该属性。最后，修改<code>render()</code>方法，使其所映射的消息是从<code>props</code>接收的，而不是<code>state</code>\",\"完成这些更改后，我们的应用会实现 Redux 管理应用的状态，但它继续运行着相同的功能。此示例还阐明了组件获得本地状态的方式，即在自己的状态中继续跟踪用户本地输入。由此可见，Redux 为 React 提供了很有用的状态管理框架。先前，你仅使用 React 的本地状态也实现了相同的结果，这在应付简单的应用时通常是可行的。但是，随着应用变得越来越大，越来越复杂，应用的状态管理也变得非常困难，Redux 就是为解决这样的问题而诞生的。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/extract-local-state-into-redux\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>AppWrapper</code>应该渲染该页面。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), '<code>AppWrapper</code>应该渲染该页面。');\"},{\"text\":\"<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), '<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。');\"},{\"text\":\"<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return Array.isArray(props.messages); })(), '<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。');\"},{\"text\":\"<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return typeof props.submitNewMessage === 'function'; })(), '<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。');\"},{\"text\":\"<code>Presentational</code>组件的状态应包含一个初始化为空字符串的input属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalState = mockedComponent.find('Presentational').instance().state; return typeof PresentationalState.input === 'string' && Object.keys(PresentationalState).length === 1; })(), '<code>Presentational</code>组件的状态应包含一个初始化为空字符串的input属性。');\"},{\"text\":\"键入<code>input</code>元素应更新<code>Presentational</code>组件的状态。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const testValue = '__MOCK__INPUT__'; const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); let initialInput = mockedComponent.find('Presentational').find('input'); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const updated = await changed(); const updatedInput = updated.find('Presentational').find('input'); assert(initialInput.props().value === '' && updatedInput.props().value === '__MOCK__INPUT__', '键入<code>input</code>元素应更新<code>Presentational</code>组件的状态。'); }; \"},{\"text\":\"在<code>Presentational</code>组件上 dispatch <code>submitMessage</code>应更新 Redux store 并清除本地状态中的输入。\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); let beforeProps = mockedComponent.find('Presentational').props(); const testValue = '__TEST__EVENT__INPUT__'; const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const clickButton = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterChange = await changed(); const afterChangeInput = afterChange.find('input').props().value; const afterClick = await clickButton(); const afterProps = mockedComponent.find('Presentational').props(); assert(beforeProps.messages.length === 0 && afterChangeInput === testValue && afterProps.messages.pop() === testValue && afterClick.find('input').props().value === '', '在<code>Presentational</code>组件上 dispatch <code>submitMessage</code>应更新 Redux store 并清除本地状态中的输入。'); }; \"},{\"text\":\"<code>Presentational</code>组件应渲染 Redux store 中的<code>messages</code>\",\"testString\":\"async () => { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const waitForIt = (fn) => new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100)); let beforeProps = mockedComponent.find('Presentational').props(); const testValue = '__TEST__EVENT__INPUT__'; const causeChange = (c, v) => c.find('input').simulate('change', { target: { value: v }}); const changed = () => { causeChange(mockedComponent, testValue); return waitForIt(() => mockedComponent )}; const clickButton = () => { mockedComponent.find('button').simulate('click'); return waitForIt(() => mockedComponent )}; const afterChange = await changed(); const afterChangeInput = afterChange.find('input').props().value; const afterClick = await clickButton(); const afterProps = mockedComponent.find('Presentational').props(); assert(beforeProps.messages.length === 0 && afterChangeInput === testValue && afterProps.messages.pop() === testValue && afterClick.find('input').props().value === '' && afterClick.find('ul').childAt(0).text() === testValue, '<code>Presentational</code>组件应渲染 Redux store 中的<code>messages</code>'); }; \"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"// Redux:\\nconst ADD = 'ADD';\\n\\nconst addMessage = (message) => {\\n  return {\\n    type: ADD,\\n    message: message\\n  }\\n};\\n\\nconst messageReducer = (state = [], action) => {\\n  switch (action.type) {\\n    case ADD:\\n      return [\\n        ...state,\\n        action.message\\n      ];\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst store = Redux.createStore(messageReducer);\\n\\n// React:\\nconst Provider = ReactRedux.Provider;\\nconst connect = ReactRedux.connect;\\n\\n// 请在本行以下添加你的代码\\nclass Presentational extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input: '',\\n      messages: []\\n    }\\n    this.handleChange = this.handleChange.bind(this);\\n    this.submitMessage = this.submitMessage.bind(this);\\n  }\\n  handleChange(event) {\\n    this.setState({\\n      input: event.target.value\\n    });\\n  }\\n  submitMessage() {\\n    this.setState({\\n      input: '',\\n      messages: this.state.messages.concat(this.state.input)\\n    });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <h2>Type in a new Message:</h2>\\n        <input\\n          value={this.state.input}\\n          onChange={this.handleChange}/><br/>\\n        <button onClick={this.submitMessage}>Submit</button>\\n        <ul>\\n          {this.state.messages.map( (message, idx) => {\\n              return (\\n                 <li key={idx}>{message}</li>\\n              )\\n            })\\n          }\\n        </ul>\\n      </div>\\n    );\\n  }\\n};\\n// 请在本行以上添加你的代码\\n\\nconst mapStateToProps = (state) => {\\n  return {messages: state}\\n};\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    submitNewMessage: (message) => {\\n      dispatch(addMessage(message))\\n    }\\n  }\\n};\\n\\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\\n\\nclass AppWrapper extends React.Component {\\n  render() {\\n    return (\\n      <Provider store={store}>\\n        <Container/>\\n      </Provider>\\n    );\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<AppWrapper />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/moving-forward-from-here\",\"id\":\"5a24c314108439a4d4036149\"},\"slug\":\"/front-end-libraries/react-and-redux/extract-local-state-into-redux\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-and-redux-extract-local-state-into-redux.json\n// module id = 3561\n// module chunks = 121208387582666"],"sourceRoot":""}