{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-balanced-brackets-a2077358caf36724c62e.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-balanced-brackets.json"],"names":["webpackJsonp","3355","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,oBAAAC,aAAA,2LAA4G,qaAAAC,cAAA,EAAAC,QAA2jBC,KAAA,wDAAAC,UAAA,eAAAC,QAAoGC,KAAA,yCAAAC,WAAA,wFAAqJD,KAAA,oDAAAC,WAAA,6FAAuKD,KAAA,iEAAAC,WAAA,2GAAkMD,KAAA,oEAAAC,WAAA,6GAAuMD,KAAA,oDAAAC,WAAA,8FAAwKD,KAAA,4DAAAC,WAAA,sGAAwLD,KAAA,sDAAAC,WAAA,gGAA4KD,KAAA,8DAAAC,WAAA,wGAA4LD,KAAA,0DAAAC,WAAA,oGAAoLD,KAAA,kEAAAC,WAAA,4GAAoMD,KAAA,kEAAAC,WAAA,4GAAoMD,KAAA,0DAAAC,WAAA,qGAAqLD,KAAA,4DAAAC,WAAA,sGAAwLD,KAAA,sDAAAC,WAAA,gGAA4KD,KAAA,8DAAAC,WAAA,yGAA6LD,KAAA,0DAAAC,WAAA,qGAAqLD,KAAA,sDAAAC,WAAA,iGAA6KD,KAAA,gEAAAC,WAAA,2GAAiMD,KAAA,kDAAAC,WAAA,6FAAoKC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,kEAAqHC,KAAA,GAAAC,KAAA,0TAA4UC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,iFAAAC,GAAA,4BAAkLrB,KAAA","file":"path---coding-interview-prep-rosetta-code-balanced-brackets-a2077358caf36724c62e.js","sourcesContent":["webpackJsonp([51028710642889],{\n\n/***/ 3355:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Balanced brackets\",\"description\":[\"<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>\",\"Examples:\",\"<p class='rosetta__paragraph'>(empty) true</p>\",\"<p class='rosetta__paragraph'><code>[]</code> true</p>\",\"<p class='rosetta__paragraph'><code>][</code> false</p>\",\"<p class='rosetta__paragraph'><code>[][]</code> true</p>\",\"<p class='rosetta__paragraph'><code>][][</code> false</p>\",\"<p class='rosetta__paragraph'><code>[]][[]</code> false</p>\",\"<p class='rosetta__paragraph'><code>[[[[]]]]</code> true</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/balanced-brackets\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>isBalanced</code> is a function.\",\"testString\":\"assert(typeof isBalanced === 'function', '<code>isBalanced</code> is a function.');\"},{\"text\":\"<code>isBalanced(\\\"[]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[0]), '<code>isBalanced(\\\"[]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"]][[[][][][]][\\\")</code> should return false.\",\"testString\":\"assert(!isBalanced(testCases[1]), '<code>isBalanced(\\\"]][[[][][][]][\\\")</code> should return false.');\"},{\"text\":\"<code>isBalanced(\\\"[][[[[][][[[]]]]]]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[2]), '<code>isBalanced(\\\"[][[[[][][[[]]]]]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[3]), '<code>isBalanced(\\\"][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[[]]]][[]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[4]), '<code>isBalanced(\\\"[[[]]]][[]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][[]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[5]), '<code>isBalanced(\\\"][[]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][[][]][[[]]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[6]), '<code>isBalanced(\\\"][[][]][[[]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[][]]][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[7]), '<code>isBalanced(\\\"[[][]]][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[[]]][[]]]][][[\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[8]), '<code>isBalanced(\\\"[[[]]][[]]]][][[\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[]][[]]][[[[][]]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[9]), '<code>isBalanced(\\\"[]][[]]][[[[][]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][]][[][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[10]), '<code>isBalanced(\\\"][]][[][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[]][[][]]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[11]), '<code>isBalanced(\\\"[[]][[][]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[]]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[12]), '<code>isBalanced(\\\"[[]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"]][]][[]][[[\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[13]), '<code>isBalanced(\\\"]][]][[]][[[\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][]][][[\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[14]), '<code>isBalanced(\\\"][]][][[\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[15]), '<code>isBalanced(\\\"][][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[]]][][][[]][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[16]), '<code>isBalanced(\\\"[[]]][][][[]][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[17]), '<code>isBalanced(\\\"\\\")</code> should return true.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function isBalanced (str) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const testCases = [\\n  '[]',\\n  ']][[[][][][]][',\\n  '[][[[[][][[[]]]]]]',\\n  '][',\\n  '[[[]]]][[]',\\n  '][[]',\\n  '][[][]][[[]]',\\n  '[[][]]][',\\n  '[[[]]][[]]]][][[',\\n  '[]][[]]][[[[][]]',\\n  '][]][[][',\\n  '[[]][[][]]',\\n  '[[]]',\\n  ']][]][[]][[[',\\n  '][]][][[',\\n  '][][',\\n  '[[]]][][][[]][',\\n  ''\\n];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/circles-of-given-radius-through-two-points\",\"id\":\"594dc6c729e5700999302b45\"},\"slug\":\"/coding-interview-prep/rosetta-code/balanced-brackets\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-balanced-brackets-a2077358caf36724c62e.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Balanced brackets\",\"description\":[\"<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>\",\"Examples:\",\"<p class='rosetta__paragraph'>(empty) true</p>\",\"<p class='rosetta__paragraph'><code>[]</code> true</p>\",\"<p class='rosetta__paragraph'><code>][</code> false</p>\",\"<p class='rosetta__paragraph'><code>[][]</code> true</p>\",\"<p class='rosetta__paragraph'><code>][][</code> false</p>\",\"<p class='rosetta__paragraph'><code>[]][[]</code> false</p>\",\"<p class='rosetta__paragraph'><code>[[[[]]]]</code> true</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/balanced-brackets\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>isBalanced</code> is a function.\",\"testString\":\"assert(typeof isBalanced === 'function', '<code>isBalanced</code> is a function.');\"},{\"text\":\"<code>isBalanced(\\\"[]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[0]), '<code>isBalanced(\\\"[]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"]][[[][][][]][\\\")</code> should return false.\",\"testString\":\"assert(!isBalanced(testCases[1]), '<code>isBalanced(\\\"]][[[][][][]][\\\")</code> should return false.');\"},{\"text\":\"<code>isBalanced(\\\"[][[[[][][[[]]]]]]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[2]), '<code>isBalanced(\\\"[][[[[][][[[]]]]]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[3]), '<code>isBalanced(\\\"][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[[]]]][[]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[4]), '<code>isBalanced(\\\"[[[]]]][[]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][[]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[5]), '<code>isBalanced(\\\"][[]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][[][]][[[]]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[6]), '<code>isBalanced(\\\"][[][]][[[]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[][]]][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[7]), '<code>isBalanced(\\\"[[][]]][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[[]]][[]]]][][[\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[8]), '<code>isBalanced(\\\"[[[]]][[]]]][][[\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[]][[]]][[[[][]]\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[9]), '<code>isBalanced(\\\"[]][[]]][[[[][]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][]][[][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[10]), '<code>isBalanced(\\\"][]][[][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[]][[][]]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[11]), '<code>isBalanced(\\\"[[]][[][]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[]]\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[12]), '<code>isBalanced(\\\"[[]]\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"]][]][[]][[[\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[13]), '<code>isBalanced(\\\"]][]][[]][[[\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][]][][[\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[14]), '<code>isBalanced(\\\"][]][][[\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"][][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[15]), '<code>isBalanced(\\\"][][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"[[]]][][][[]][\\\")</code> should return true.\",\"testString\":\"assert(!isBalanced(testCases[16]), '<code>isBalanced(\\\"[[]]][][][[]][\\\")</code> should return true.');\"},{\"text\":\"<code>isBalanced(\\\"\\\")</code> should return true.\",\"testString\":\"assert(isBalanced(testCases[17]), '<code>isBalanced(\\\"\\\")</code> should return true.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function isBalanced (str) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const testCases = [\\n  '[]',\\n  ']][[[][][][]][',\\n  '[][[[[][][[[]]]]]]',\\n  '][',\\n  '[[[]]]][[]',\\n  '][[]',\\n  '][[][]][[[]]',\\n  '[[][]]][',\\n  '[[[]]][[]]]][][[',\\n  '[]][[]]][[[[][]]',\\n  '][]][[][',\\n  '[[]][[][]]',\\n  '[[]]',\\n  ']][]][[]][[[',\\n  '][]][][[',\\n  '][][',\\n  '[[]]][][][[]][',\\n  ''\\n];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/circles-of-given-radius-through-two-points\",\"id\":\"594dc6c729e5700999302b45\"},\"slug\":\"/coding-interview-prep/rosetta-code/balanced-brackets\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-balanced-brackets.json\n// module id = 3355\n// module chunks = 51028710642889"],"sourceRoot":""}