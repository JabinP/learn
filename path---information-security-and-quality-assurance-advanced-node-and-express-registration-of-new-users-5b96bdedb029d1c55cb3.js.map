{"version":3,"sources":["webpack:///path---information-security-and-quality-assurance-advanced-node-and-express-registration-of-new-users-5b96bdedb029d1c55cb3.js","webpack:///./.cache/json/information-security-and-quality-assurance-advanced-node-and-express-registration-of-new-users.json"],"names":["webpackJsonp","3660","module","exports","data","challengeNode","title","guideUrl","description","challengeType","fields","blockName","slug","tests","text","testString","pathContext","challengeMeta","introPath","template","required","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,4BAAAC,SAAA,KAAAC,aAAA,49CAAuhD,2IAAAC,cAAA,EAAAC,QAA+KC,UAAA,4BAAAC,KAAA,kGAAAC,QAA2JC,KAAA,aAAAC,WAAA,6ZAA8bD,KAAA,eAAAC,WAAA,8WAAiZD,KAAA,eAAAC,WAAA,yZAA4bD,KAAA,iBAAAC,WAAA,mOAAwQD,KAAA,yBAAAC,WAAA,yQAAqTC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAC,YAAAC,kBAAA,+FAAAC,GAAA,4BAAgMV,KAAA","file":"path---information-security-and-quality-assurance-advanced-node-and-express-registration-of-new-users-5b96bdedb029d1c55cb3.js","sourcesContent":["webpackJsonp([122897902778620],{\n\n/***/ 3660:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Registration of New Users\",\"guideUrl\":null,\"description\":[\"注意，本项目在<a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>这个 Glitch 项目</a>的基础上进行开发，你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a> 上克隆。\",\"现在我们需要为新用户添加注册帐号的功能，首先我们需要在主页的 res.render 接收的变量对象中添加<code>showRegistration: true</code>。此时刷新页面，你会看到页面上已经显示了我们在 index.pug 文件中定义的注册表单。这个表单设置了请求路径 <em>/register</em>，并将请求方法设置成 <b>POST</b>，所以我们需要在服务器接受 <b>POST</b> 请求，且在数据库中创建用户对象。\",\"用户注册的逻辑如下：注册新用户 > 认证新用户 > 重定向到 /profile。\",\"对于步骤一的注册新用户，详细逻辑如下：用 findOne 命令查询数据库 > 如果返回了用户对象，则表示用户存在，然后返回主页；如果用户未定义且没有报错，则会将包含用户名和密码的用户对象通过<code>insertOne</code>添加到数据库，只要没有报错则会继续下一步：认证新用户——我们已经在 /login 路由的 POST 请求中写好了这部分逻辑。\",\"<pre>app.route('/register')\\n  .post((req, res, next) => {\\n      db.collection('users').findOne({ username: req.body.username }, function (err, user) {\\n          if(err) {\\n              next(err);\\n          } else if (user) {\\n              res.redirect('/');\\n          } else {\\n              db.collection('users').insertOne(\\n                {username: req.body.username,\\n                 password: req.body.password},\\n                (err, doc) => {\\n                    if(err) {\\n                        res.redirect('/');\\n                    } else {\\n                        next(null, user);\\n                    }\\n                }\\n              )\\n          }\\n      })},\\n    passport.authenticate('local', { failureRedirect: '/' }),\\n    (req, res, next) => {\\n        res.redirect('/profile');\\n    }\\n);</pre>\",\"完成上述要求后，你就可以在左边提交你的页面链接。如果运行出错，你可以在<a href='https://gist.github.com/JosephLivengood/6c47bee7df34df9f11820803608071ed'>这里</a>检查你的项目完成情况。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Advanced Node and Express\",\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/registration-of-new-users\",\"tests\":[{\"text\":\"注册路由和显示主页。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /showRegistration:( |)true/gi, '你应该给首页的 render 方法传入一个对象，其中 \\\"showRegistration\\\" 的值为 true。'); assert.match(data, /register[^]*post[^]*findOne[^]*username:( |)req.body.username/gi, '应有一个可以接收注册用户 POST 请求的路由，它应该调用 findOne 及参数 \\\"username: req.body.username\\\" 查询数据库。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"注册功能应可以正常运行。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/register',data: {username: 'freeCodeCampTester', password: 'freeCodeCampTester'},crossDomain: true, type: 'POST', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Profile/gi, '用户应可以注册，并在注册成功后跳转到 profile 页。注意，测试失败后，直到测试成功为止，会一直清除数据库。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"登录功能应可以正常运行。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/login',data: {username: 'freeCodeCampTester', password: 'freeCodeCampTester'}, type: 'POST', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Profile/gi, '如果之前的测试成功，登录也应该成功且会跳转到 profile 页。注意，在这个测试之后会清除数据库。'); assert.match(data, /freeCodeCampTester/gi, '个人信息页应该正确显示包含用户名的欢迎信息。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"退出登录功能应可以正常运行。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/logout', type: 'GET', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Home/gi, '退出登录应重定向至主页。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"退出登录后，profile 页面应无法访问。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/profile', type: 'GET', crossDomain: true, xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Home/gi, '退出登录后，尝试访问 profile 页应跳转到主页。'); }, xhr => { throw new Error(xhr.statusText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/advanced-node-and-express/hashing-your-passwords\",\"id\":\"58966a17f9fc0f352b528e6d\"},\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/registration-of-new-users\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---information-security-and-quality-assurance-advanced-node-and-express-registration-of-new-users-5b96bdedb029d1c55cb3.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Registration of New Users\",\"guideUrl\":null,\"description\":[\"注意，本项目在<a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-advancednode/'>这个 Glitch 项目</a>的基础上进行开发，你也可以从 <a href='https://github.com/freeCodeCamp/boilerplate-advancednode/'>GitHub</a> 上克隆。\",\"现在我们需要为新用户添加注册帐号的功能，首先我们需要在主页的 res.render 接收的变量对象中添加<code>showRegistration: true</code>。此时刷新页面，你会看到页面上已经显示了我们在 index.pug 文件中定义的注册表单。这个表单设置了请求路径 <em>/register</em>，并将请求方法设置成 <b>POST</b>，所以我们需要在服务器接受 <b>POST</b> 请求，且在数据库中创建用户对象。\",\"用户注册的逻辑如下：注册新用户 > 认证新用户 > 重定向到 /profile。\",\"对于步骤一的注册新用户，详细逻辑如下：用 findOne 命令查询数据库 > 如果返回了用户对象，则表示用户存在，然后返回主页；如果用户未定义且没有报错，则会将包含用户名和密码的用户对象通过<code>insertOne</code>添加到数据库，只要没有报错则会继续下一步：认证新用户——我们已经在 /login 路由的 POST 请求中写好了这部分逻辑。\",\"<pre>app.route('/register')\\n  .post((req, res, next) => {\\n      db.collection('users').findOne({ username: req.body.username }, function (err, user) {\\n          if(err) {\\n              next(err);\\n          } else if (user) {\\n              res.redirect('/');\\n          } else {\\n              db.collection('users').insertOne(\\n                {username: req.body.username,\\n                 password: req.body.password},\\n                (err, doc) => {\\n                    if(err) {\\n                        res.redirect('/');\\n                    } else {\\n                        next(null, user);\\n                    }\\n                }\\n              )\\n          }\\n      })},\\n    passport.authenticate('local', { failureRedirect: '/' }),\\n    (req, res, next) => {\\n        res.redirect('/profile');\\n    }\\n);</pre>\",\"完成上述要求后，你就可以在左边提交你的页面链接。如果运行出错，你可以在<a href='https://gist.github.com/JosephLivengood/6c47bee7df34df9f11820803608071ed'>这里</a>检查你的项目完成情况。\"],\"challengeType\":2,\"fields\":{\"blockName\":\"Advanced Node and Express\",\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/registration-of-new-users\",\"tests\":[{\"text\":\"注册路由和显示主页。\",\"testString\":\"getUserInput => $.get(getUserInput('url')+ '/_api/server.js') .then(data => { assert.match(data, /showRegistration:( |)true/gi, '你应该给首页的 render 方法传入一个对象，其中 \\\"showRegistration\\\" 的值为 true。'); assert.match(data, /register[^]*post[^]*findOne[^]*username:( |)req.body.username/gi, '应有一个可以接收注册用户 POST 请求的路由，它应该调用 findOne 及参数 \\\"username: req.body.username\\\" 查询数据库。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"注册功能应可以正常运行。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/register',data: {username: 'freeCodeCampTester', password: 'freeCodeCampTester'},crossDomain: true, type: 'POST', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Profile/gi, '用户应可以注册，并在注册成功后跳转到 profile 页。注意，测试失败后，直到测试成功为止，会一直清除数据库。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"登录功能应可以正常运行。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/login',data: {username: 'freeCodeCampTester', password: 'freeCodeCampTester'}, type: 'POST', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Profile/gi, '如果之前的测试成功，登录也应该成功且会跳转到 profile 页。注意，在这个测试之后会清除数据库。'); assert.match(data, /freeCodeCampTester/gi, '个人信息页应该正确显示包含用户名的欢迎信息。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"退出登录功能应可以正常运行。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/logout', type: 'GET', xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Home/gi, '退出登录应重定向至主页。'); }, xhr => { throw new Error(xhr.statusText); })\"},{\"text\":\"退出登录后，profile 页面应无法访问。\",\"testString\":\"getUserInput => $.ajax({url: getUserInput('url')+ '/profile', type: 'GET', crossDomain: true, xhrFields: { withCredentials: true }}) .then(data => { assert.match(data, /Home/gi, '退出登录后，尝试访问 profile 页应跳转到主页。'); }, xhr => { throw new Error(xhr.statusText); })\"}]}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/information-security-and-quality-assurance/advanced-node-and-express/hashing-your-passwords\",\"id\":\"58966a17f9fc0f352b528e6d\"},\"slug\":\"/information-security-and-quality-assurance/advanced-node-and-express/registration-of-new-users\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/information-security-and-quality-assurance-advanced-node-and-express-registration-of-new-users.json\n// module id = 3660\n// module chunks = 122897902778620"],"sourceRoot":""}