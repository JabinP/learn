{"version":3,"sources":["webpack:///path---coding-interview-prep-data-structures-adjacency-list-c34f70ccca3721ce548a.js","webpack:///./.cache/json/coding-interview-prep-data-structures-adjacency-list.json"],"names":["webpackJsonp","2815","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,iBAAAC,aAAA,0kCAA2mC,2OAA2O,+PAAAC,cAAA,EAAAC,QAA0SC,KAAA,wDAAAC,UAAA,kBAAAC,QAAuGC,KAAA,iEAAAC,WAAA,2HAAgND,KAAA,4EAAAC,WAAA,6LAA+RD,KAAA,4EAAAC,WAAA,6LAA+RD,KAAA,4EAAAC,WAAA,8LAA+RC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,gCAAmFC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,0DAAAC,GAAA,4BAA2JrB,KAAA","file":"path---coding-interview-prep-data-structures-adjacency-list-c34f70ccca3721ce548a.js","sourcesContent":["webpackJsonp([124798061177276],{\n\n/***/ 2815:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Adjacency List\",\"description\":[\"Graphs can be represented in different ways. Here we describe one way, which is called an <dfn>adjacency list</dfn>.\",\"An adjacency list is essentially a bulleted list where the left side is the node and the right side lists all the other nodes it's connected to. Below is a representation of an adjacency list.\",\"<blockquote>Node1: Node2, Node3<br>Node2: Node1<br>Node3: Node1</blockquote>\",\"Above is an undirected graph because <code>Node1</code> is connected to <code>Node2</code> and <code>Node3</code>, and that information is consistent with the connections <code>Node2</code> and <code>Node3</code> show. An adjacency list for a directed graph would mean each row of the list shows direction. If the above was directed, then <code>Node2: Node1</code> would mean there the directed edge is pointing from <code>Node2</code> towards <code>Node1</code>.\",\"We can represent the undirected graph above as an adjacency list by putting it within a JavaScript object.\",\"<blockquote>var undirectedG = {<br>  Node1: [\\\"Node2\\\", \\\"Node3\\\"],<br>  Node2: [\\\"Node1\\\"],<br>  Node3: [\\\"Node1\\\"]<br>};</blockquote>\",\"This can also be more simply represented as an array where the nodes just have numbers rather than string labels.\",\"<blockquote>var undirectedGArr = [<br>  [1, 2], # Node1<br>  [0],    # Node2<br>  [0]     # Node3<br>];</blockquote>\",\"<hr>\",\"Create a social network as an undirected graph with 4 nodes/people named <code>James</code>, <code>Jill</code>, <code>Jenny</code>, and <code>Jeff</code>. There are edges/relationships between James and Jeff, Jill and Jenny, and Jeff and Jenny.\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/adjacency-list\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>undirectedAdjList</code> should only contain four nodes.\",\"testString\":\"assert(Object.keys(undirectedAdjList).length === 4, '<code>undirectedAdjList</code> should only contain four nodes.');\"},{\"text\":\"There should be an edge between <code>Jeff</code> and <code>James</code>.\",\"testString\":\"assert(undirectedAdjList.James.indexOf(\\\"Jeff\\\") !== -1 && undirectedAdjList.Jeff.indexOf(\\\"James\\\") !== -1, 'There should be an edge between <code>Jeff</code> and <code>James</code>.');\"},{\"text\":\"There should be an edge between <code>Jill</code> and <code>Jenny</code>.\",\"testString\":\"assert(undirectedAdjList.Jill.indexOf(\\\"Jenny\\\") !== -1 && undirectedAdjList.Jill.indexOf(\\\"Jenny\\\") !== -1, 'There should be an edge between <code>Jill</code> and <code>Jenny</code>.');\"},{\"text\":\"There should be an edge between <code>Jeff</code> and <code>Jenny</code>.\",\"testString\":\"assert(undirectedAdjList.Jeff.indexOf(\\\"Jenny\\\") !== -1 && undirectedAdjList.Jenny.indexOf(\\\"Jeff\\\") !== -1, 'There should be an edge between <code>Jeff</code> and <code>Jenny</code>.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var undirectedAdjList = {\\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/adjacency-matrix\",\"id\":\"587d8256367417b2b2512c77\"},\"slug\":\"/coding-interview-prep/data-structures/adjacency-list\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-data-structures-adjacency-list-c34f70ccca3721ce548a.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Adjacency List\",\"description\":[\"Graphs can be represented in different ways. Here we describe one way, which is called an <dfn>adjacency list</dfn>.\",\"An adjacency list is essentially a bulleted list where the left side is the node and the right side lists all the other nodes it's connected to. Below is a representation of an adjacency list.\",\"<blockquote>Node1: Node2, Node3<br>Node2: Node1<br>Node3: Node1</blockquote>\",\"Above is an undirected graph because <code>Node1</code> is connected to <code>Node2</code> and <code>Node3</code>, and that information is consistent with the connections <code>Node2</code> and <code>Node3</code> show. An adjacency list for a directed graph would mean each row of the list shows direction. If the above was directed, then <code>Node2: Node1</code> would mean there the directed edge is pointing from <code>Node2</code> towards <code>Node1</code>.\",\"We can represent the undirected graph above as an adjacency list by putting it within a JavaScript object.\",\"<blockquote>var undirectedG = {<br>  Node1: [\\\"Node2\\\", \\\"Node3\\\"],<br>  Node2: [\\\"Node1\\\"],<br>  Node3: [\\\"Node1\\\"]<br>};</blockquote>\",\"This can also be more simply represented as an array where the nodes just have numbers rather than string labels.\",\"<blockquote>var undirectedGArr = [<br>  [1, 2], # Node1<br>  [0],    # Node2<br>  [0]     # Node3<br>];</blockquote>\",\"<hr>\",\"Create a social network as an undirected graph with 4 nodes/people named <code>James</code>, <code>Jill</code>, <code>Jenny</code>, and <code>Jeff</code>. There are edges/relationships between James and Jeff, Jill and Jenny, and Jeff and Jenny.\"],\"challengeType\":1,\"fields\":{\"slug\":\"/coding-interview-prep/data-structures/adjacency-list\",\"blockName\":\"Data Structures\",\"tests\":[{\"text\":\"<code>undirectedAdjList</code> should only contain four nodes.\",\"testString\":\"assert(Object.keys(undirectedAdjList).length === 4, '<code>undirectedAdjList</code> should only contain four nodes.');\"},{\"text\":\"There should be an edge between <code>Jeff</code> and <code>James</code>.\",\"testString\":\"assert(undirectedAdjList.James.indexOf(\\\"Jeff\\\") !== -1 && undirectedAdjList.Jeff.indexOf(\\\"James\\\") !== -1, 'There should be an edge between <code>Jeff</code> and <code>James</code>.');\"},{\"text\":\"There should be an edge between <code>Jill</code> and <code>Jenny</code>.\",\"testString\":\"assert(undirectedAdjList.Jill.indexOf(\\\"Jenny\\\") !== -1 && undirectedAdjList.Jill.indexOf(\\\"Jenny\\\") !== -1, 'There should be an edge between <code>Jill</code> and <code>Jenny</code>.');\"},{\"text\":\"There should be an edge between <code>Jeff</code> and <code>Jenny</code>.\",\"testString\":\"assert(undirectedAdjList.Jeff.indexOf(\\\"Jenny\\\") !== -1 && undirectedAdjList.Jenny.indexOf(\\\"Jeff\\\") !== -1, 'There should be an edge between <code>Jeff</code> and <code>Jenny</code>.');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"var undirectedAdjList = {\\n};\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/data-structures/adjacency-matrix\",\"id\":\"587d8256367417b2b2512c77\"},\"slug\":\"/coding-interview-prep/data-structures/adjacency-list\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-data-structures-adjacency-list.json\n// module id = 2815\n// module chunks = 124798061177276"],"sourceRoot":""}