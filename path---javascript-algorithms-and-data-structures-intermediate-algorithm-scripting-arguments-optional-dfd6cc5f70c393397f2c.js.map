{"version":3,"sources":["webpack:///path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-arguments-optional-dfd6cc5f70c393397f2c.js","webpack:///./.cache/json/javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-arguments-optional.json"],"names":["webpackJsonp","3925","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,qBAAAC,aAAA,8QAAiT,4LAAAC,cAAA,EAAAC,QAAiOC,KAAA,iGAAAC,UAAA,mCAAAC,QAAiKC,KAAA,wCAAAC,WAAA,qFAAiJD,KAAA,wCAAAC,WAAA,qFAAiJD,KAAA,8EAAAC,WAAA,8IAAoPD,KAAA,8DAAAC,WAAA,8GAAoMD,KAAA,8DAAAC,WAAA,6GAA8LC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,oEAAuHC,KAAA,GAAAC,KAAA,IAAsBC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,4FAAAC,GAAA,4BAA6LrB,KAAA","file":"path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-arguments-optional-dfd6cc5f70c393397f2c.js","sourcesContent":["webpackJsonp([189457816015863],{\n\n/***/ 3925:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Arguments Optional\",\"description\":[\"在这道题目中，我们需要写一个求和的函数，但它接收的参数数量不定。如果传入了两个参数，那么直接返回两数之和即可。如果只传入一个参数，那我们应该返回另一个函数用来接收下一个参数，然后求出两数之和。\",\"比如，<code>addTogether(2, 3)</code>应该返回<code>5</code>。而<code>addTogether(2)</code>应该返回一个函数。\",\"然后我们调用这个返回的函数，并给它传入另一个用于求和的值：\",\"<code>var sumTwoAnd = addTogether(2);</code>\",\"<code>sumTwoAnd(3)</code>此时应返回<code>5</code>。\",\"只要其中任何一个参数不是数字，那我们就应返回<code>undefined</code>。\",\"如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional\",\"blockName\":\"Intermediate Algorithm Scripting\",\"tests\":[{\"text\":\"<code>addTogether(2, 3)</code>应该返回 5。\",\"testString\":\"assert.deepEqual(addTogether(2, 3), 5, '<code>addTogether(2, 3)</code>应该返回 5。');\"},{\"text\":\"<code>addTogether(2)(3)</code>应该返回 5。\",\"testString\":\"assert.deepEqual(addTogether(2)(3), 5, '<code>addTogether(2)(3)</code>应该返回 5。');\"},{\"text\":\"<code>addTogether(\\\"http://bit.ly/IqT6zt\\\")</code>应该返回<code>undefined</code>。\",\"testString\":\"assert.isUndefined(addTogether(\\\"http://bit.ly/IqT6zt\\\"), '<code>addTogether(\\\"http://bit.ly/IqT6zt\\\")</code>应该返回<code>undefined</code>。');\"},{\"text\":\"<code>addTogether(2, \\\"3\\\")</code>应该返回<code>undefined</code>。\",\"testString\":\"assert.isUndefined(addTogether(2, \\\"3\\\"), '<code>addTogether(2, \\\"3\\\")</code>应该返回<code>undefined</code>。');\"},{\"text\":\"<code>addTogether(2)([3])</code>应该返回<code>undefined</code>。\",\"testString\":\"assert.isUndefined(addTogether(2)([3]), '<code>addTogether(2)([3])</code>应该返回<code>undefined</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function addTogether() {\\n  return false;\\n}\\n\\naddTogether(2,3);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person\",\"id\":\"a97fd23d9b809dac9921074f\"},\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-arguments-optional-dfd6cc5f70c393397f2c.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Arguments Optional\",\"description\":[\"在这道题目中，我们需要写一个求和的函数，但它接收的参数数量不定。如果传入了两个参数，那么直接返回两数之和即可。如果只传入一个参数，那我们应该返回另一个函数用来接收下一个参数，然后求出两数之和。\",\"比如，<code>addTogether(2, 3)</code>应该返回<code>5</code>。而<code>addTogether(2)</code>应该返回一个函数。\",\"然后我们调用这个返回的函数，并给它传入另一个用于求和的值：\",\"<code>var sumTwoAnd = addTogether(2);</code>\",\"<code>sumTwoAnd(3)</code>此时应返回<code>5</code>。\",\"只要其中任何一个参数不是数字，那我们就应返回<code>undefined</code>。\",\"如果你遇到了问题，请点击<a href='https://forum.freecodecamp.one/t/topic/157' target='_blank'>帮助</a>。\"],\"challengeType\":5,\"fields\":{\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional\",\"blockName\":\"Intermediate Algorithm Scripting\",\"tests\":[{\"text\":\"<code>addTogether(2, 3)</code>应该返回 5。\",\"testString\":\"assert.deepEqual(addTogether(2, 3), 5, '<code>addTogether(2, 3)</code>应该返回 5。');\"},{\"text\":\"<code>addTogether(2)(3)</code>应该返回 5。\",\"testString\":\"assert.deepEqual(addTogether(2)(3), 5, '<code>addTogether(2)(3)</code>应该返回 5。');\"},{\"text\":\"<code>addTogether(\\\"http://bit.ly/IqT6zt\\\")</code>应该返回<code>undefined</code>。\",\"testString\":\"assert.isUndefined(addTogether(\\\"http://bit.ly/IqT6zt\\\"), '<code>addTogether(\\\"http://bit.ly/IqT6zt\\\")</code>应该返回<code>undefined</code>。');\"},{\"text\":\"<code>addTogether(2, \\\"3\\\")</code>应该返回<code>undefined</code>。\",\"testString\":\"assert.isUndefined(addTogether(2, \\\"3\\\"), '<code>addTogether(2, \\\"3\\\")</code>应该返回<code>undefined</code>。');\"},{\"text\":\"<code>addTogether(2)([3])</code>应该返回<code>undefined</code>。\",\"testString\":\"assert.isUndefined(addTogether(2)([3]), '<code>addTogether(2)([3])</code>应该返回<code>undefined</code>。');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function addTogether() {\\n  return false;\\n}\\n\\naddTogether(2,3);\",\"head\":\"\",\"tail\":\"\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person\",\"id\":\"a97fd23d9b809dac9921074f\"},\"slug\":\"/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-algorithms-and-data-structures-intermediate-algorithm-scripting-arguments-optional.json\n// module id = 3925\n// module chunks = 189457816015863"],"sourceRoot":""}