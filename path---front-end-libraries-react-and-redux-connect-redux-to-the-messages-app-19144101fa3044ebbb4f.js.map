{"version":3,"sources":["webpack:///path---front-end-libraries-react-and-redux-connect-redux-to-the-messages-app-19144101fa3044ebbb4f.js","webpack:///./.cache/json/front-end-libraries-react-and-redux-connect-redux-to-the-messages-app.json"],"names":["webpackJsonp","3560","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","link","raw","src","files","indexhtml","indexjs","indexjsx","key","ext","name","contents","head","tail","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,oCAAAC,aAAA,0oBAAAC,cAAA,EAAAC,QAAiuBC,KAAA,yEAAAC,UAAA,kBAAAC,QAAwHC,KAAA,iCAAAC,WAAA,iMAAsPD,KAAA,8GAAAC,WAAA,kRAAoZD,KAAA,8GAAAC,WAAA,wfAA0nBD,KAAA,mEAAAC,WAAA,wUAA+ZD,KAAA,6EAAAC,WAAA,kWAAkcC,WAAcC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2GC,OAAWC,UAAA,KAAAC,QAAA,KAAAC,UAA4CC,IAAA,WAAAC,IAAA,MAAAC,KAAA,QAAAC,SAAA,u4DAA47DC,KAAA,GAAAC,KAAA,uEAAyFC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,sDAAuEjB,WAAsBC,KAAA,KAAAC,IAAA,KAAAC,IAAA,+DAA4FF,KAAA,KAAAC,IAAA,KAAAC,IAAA,uEAAoGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,oEAAiGF,KAAA,KAAAC,IAAA,KAAAC,IAAA,gFAA2Ge,kBAAA,sEAAAC,GAAA,4BAA4HxB,KAAA","file":"path---front-end-libraries-react-and-redux-connect-redux-to-the-messages-app-19144101fa3044ebbb4f.js","sourcesContent":["webpackJsonp([275944964397620],{\n\n/***/ 3560:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Connect Redux to the Messages App\",\"description\":[\"知道<code>connect</code>怎么实现 React 和 Redux 的连接后，我们可以在 React 组件中应用上面学到的内容。\",\"在上一课，连接到 Redux 的组件命名为<code>Presentational</code>，这个命名不是任意的，这样的术语通常是指未直接连接到 Redux 的 React 组件，他们只负责执行接收 props 的函数来实现 UI 的呈现。与上一挑战相比，本挑战需要把容器组件连接到 Redux。这些组件通常负责把 actions 分派给 store，且经常给子组件传入 store state 属性。\",\"<hr>\",\"到目前为止，我们的编辑器上已包含了整个章节的代码，唯一不同的是，React 组件被重新命名为<code>Presentational</code>，即展示层组件。创建一个新组件，保存在名为<code>Container</code>的常量中。这个常量用<code>connect</code>把<code>Presentational</code>组件和 Redux 连接起来。然后，在<code>AppWrapper</code>中渲染 React Redux 的<code>Provider</code>组件，给<code>Provider</code>传入 Redux<code>store</code>属性并渲染<code>Container</code>为子组件。完成这些，消息 app 应用会再次渲染页面。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/connect-redux-to-the-messages-app\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>AppWrapper</code>应渲染该页面。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), '<code>AppWrapper</code>应渲染该页面。');\"},{\"text\":\"<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), '<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。');\"},{\"text\":\"<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); return ( PresentationalComponent.find('div').length === 1 && PresentationalComponent.find('h2').length === 1 && PresentationalComponent.find('button').length === 1 && PresentationalComponent.find('ul').length === 1 ); })(), '<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。');\"},{\"text\":\"<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return Array.isArray(props.messages); })(), '<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。');\"},{\"text\":\"<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return typeof props.submitNewMessage === 'function'; })(), '<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"// Redux:\\nconst ADD = 'ADD';\\n\\nconst addMessage = (message) => {\\n  return {\\n    type: ADD,\\n    message: message\\n  }\\n};\\n\\nconst messageReducer = (state = [], action) => {\\n  switch (action.type) {\\n    case ADD:\\n      return [\\n        ...state,\\n        action.message\\n      ];\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst store = Redux.createStore(messageReducer);\\n\\n// React:\\nclass Presentational extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input: '',\\n      messages: []\\n    }\\n    this.handleChange = this.handleChange.bind(this);\\n    this.submitMessage = this.submitMessage.bind(this);\\n  }\\n  handleChange(event) {\\n    this.setState({\\n      input: event.target.value\\n    });\\n  }\\n  submitMessage() {\\n    const currentMessage = this.state.input;\\n    this.setState({\\n      input: '',\\n      messages: this.state.messages.concat(currentMessage)\\n    });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <h2>Type in a new Message:</h2>\\n        <input\\n          value={this.state.input}\\n          onChange={this.handleChange}/><br/>\\n        <button onClick={this.submitMessage}>Submit</button>\\n        <ul>\\n          {this.state.messages.map( (message, idx) => {\\n              return (\\n                 <li key={idx}>{message}</li>\\n              )\\n            })\\n          }\\n        </ul>\\n      </div>\\n    );\\n  }\\n};\\n\\n// React-Redux:\\nconst mapStateToProps = (state) => {\\n  return { messages: state }\\n};\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    submitNewMessage: (newMessage) => {\\n       dispatch(addMessage(newMessage))\\n    }\\n  }\\n};\\n\\nconst Provider = ReactRedux.Provider;\\nconst connect = ReactRedux.connect;\\n\\n// 在此定义 Container 组件：\\n\\n\\nclass AppWrapper extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  render() {\\n    // 完成返回声明：\\n    return (null);\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<AppWrapper />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/extract-local-state-into-redux\",\"id\":\"5a24c314108439a4d4036148\"},\"slug\":\"/front-end-libraries/react-and-redux/connect-redux-to-the-messages-app\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---front-end-libraries-react-and-redux-connect-redux-to-the-messages-app-19144101fa3044ebbb4f.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Connect Redux to the Messages App\",\"description\":[\"知道<code>connect</code>怎么实现 React 和 Redux 的连接后，我们可以在 React 组件中应用上面学到的内容。\",\"在上一课，连接到 Redux 的组件命名为<code>Presentational</code>，这个命名不是任意的，这样的术语通常是指未直接连接到 Redux 的 React 组件，他们只负责执行接收 props 的函数来实现 UI 的呈现。与上一挑战相比，本挑战需要把容器组件连接到 Redux。这些组件通常负责把 actions 分派给 store，且经常给子组件传入 store state 属性。\",\"<hr>\",\"到目前为止，我们的编辑器上已包含了整个章节的代码，唯一不同的是，React 组件被重新命名为<code>Presentational</code>，即展示层组件。创建一个新组件，保存在名为<code>Container</code>的常量中。这个常量用<code>connect</code>把<code>Presentational</code>组件和 Redux 连接起来。然后，在<code>AppWrapper</code>中渲染 React Redux 的<code>Provider</code>组件，给<code>Provider</code>传入 Redux<code>store</code>属性并渲染<code>Container</code>为子组件。完成这些，消息 app 应用会再次渲染页面。\"],\"challengeType\":6,\"fields\":{\"slug\":\"/front-end-libraries/react-and-redux/connect-redux-to-the-messages-app\",\"blockName\":\"React and Redux\",\"tests\":[{\"text\":\"<code>AppWrapper</code>应渲染该页面。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('AppWrapper').length === 1; })(), '<code>AppWrapper</code>应渲染该页面。');\"},{\"text\":\"<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); return mockedComponent.find('Presentational').length === 1; })(), '<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。');\"},{\"text\":\"<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); return ( PresentationalComponent.find('div').length === 1 && PresentationalComponent.find('h2').length === 1 && PresentationalComponent.find('button').length === 1 && PresentationalComponent.find('ul').length === 1 ); })(), '<code>Presentational</code>组件应渲染<code>h2</code>、<code>input</code>、<code>button</code>、<code>ul</code>四个元素。');\"},{\"text\":\"<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return Array.isArray(props.messages); })(), '<code>Presentational</code>组件应接收 Redux store 的<code>消息</code>属性。');\"},{\"text\":\"<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。\",\"testString\":\"assert((function() { const mockedComponent = Enzyme.mount(React.createElement(AppWrapper)); const PresentationalComponent = mockedComponent.find('Presentational'); const props = PresentationalComponent.props(); return typeof props.submitNewMessage === 'function'; })(), '<code>Presentational</code>组件应接收创建 action 的函数<code>submitMessage</code>属性。');\"}]},\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"files\":{\"indexhtml\":null,\"indexjs\":null,\"indexjsx\":{\"key\":\"indexjsx\",\"ext\":\"jsx\",\"name\":\"index\",\"contents\":\"// Redux:\\nconst ADD = 'ADD';\\n\\nconst addMessage = (message) => {\\n  return {\\n    type: ADD,\\n    message: message\\n  }\\n};\\n\\nconst messageReducer = (state = [], action) => {\\n  switch (action.type) {\\n    case ADD:\\n      return [\\n        ...state,\\n        action.message\\n      ];\\n    default:\\n      return state;\\n  }\\n};\\n\\nconst store = Redux.createStore(messageReducer);\\n\\n// React:\\nclass Presentational extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input: '',\\n      messages: []\\n    }\\n    this.handleChange = this.handleChange.bind(this);\\n    this.submitMessage = this.submitMessage.bind(this);\\n  }\\n  handleChange(event) {\\n    this.setState({\\n      input: event.target.value\\n    });\\n  }\\n  submitMessage() {\\n    const currentMessage = this.state.input;\\n    this.setState({\\n      input: '',\\n      messages: this.state.messages.concat(currentMessage)\\n    });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <h2>Type in a new Message:</h2>\\n        <input\\n          value={this.state.input}\\n          onChange={this.handleChange}/><br/>\\n        <button onClick={this.submitMessage}>Submit</button>\\n        <ul>\\n          {this.state.messages.map( (message, idx) => {\\n              return (\\n                 <li key={idx}>{message}</li>\\n              )\\n            })\\n          }\\n        </ul>\\n      </div>\\n    );\\n  }\\n};\\n\\n// React-Redux:\\nconst mapStateToProps = (state) => {\\n  return { messages: state }\\n};\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    submitNewMessage: (newMessage) => {\\n       dispatch(addMessage(newMessage))\\n    }\\n  }\\n};\\n\\nconst Provider = ReactRedux.Provider;\\nconst connect = ReactRedux.connect;\\n\\n// 在此定义 Container 组件：\\n\\n\\nclass AppWrapper extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n  render() {\\n    // 完成返回声明：\\n    return (null);\\n  }\\n};\",\"head\":\"\",\"tail\":\"ReactDOM.render(<AppWrapper />, document.getElementById('root'))\"}}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":\"<body><div id='root'></div>${ source || '' }</body>\",\"required\":[{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react@16.4.0/umd/react.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js\"},{\"link\":null,\"raw\":null,\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js\"}],\"nextChallengePath\":\"/front-end-libraries/react-and-redux/extract-local-state-into-redux\",\"id\":\"5a24c314108439a4d4036148\"},\"slug\":\"/front-end-libraries/react-and-redux/connect-redux-to-the-messages-app\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/front-end-libraries-react-and-redux-connect-redux-to-the-messages-app.json\n// module id = 3560\n// module chunks = 275944964397620"],"sourceRoot":""}