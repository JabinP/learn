{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-combinations-dddb07824bd4ffd26d52.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-combinations.json"],"names":["webpackJsonp","3358","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,eAAAC,aAAA,yiBAAAC,cAAA,EAAAC,QAA+mBC,KAAA,mDAAAC,UAAA,eAAAC,QAA+FC,KAAA,2CAAAC,WAAA,4FAA2JD,KAAA,6KAAAC,WAAA,6PAA8bD,KAAA,iPAAAC,WAAA,kUAAskBC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,qEAAwHC,KAAA,GAAAC,KAAA,0aAA4bC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,sDAAAC,GAAA,4BAAuJrB,KAAA","file":"path---coding-interview-prep-rosetta-code-combinations-dddb07824bd4ffd26d52.js","sourcesContent":["webpackJsonp([163564873730684],{\n\n/***/ 3358:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Combinations\",\"description\":[\"Task:\",\"<p>Given non-negative integers  <big> m </big>  and  <big> n</big>,  generate all size  <big> m </big>  <a href=\\\"http://mathworld.wolfram.com/Combination.html\\\" title=\\\"link: http://mathworld.wolfram.com/Combination.html\\\">combinations</a>  of the integers from  <big> 0</big>  (zero)  to  <big> n-1 </big>  in sorted order  (each combination is sorted and the entire table is sorted).</p>\",\"Example:\",\"<p><big>3</big>  comb  <big> 5 </big>is:</p>\",\"<pre>\",\"0 1 2\",\"0 1 3\",\"0 1 4\",\"0 2 3\",\"0 2 4\",\"0 3 4\",\"1 2 3\",\"1 2 4\",\"1 3 4\",\"2 3 4\",\"</pre>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/combinations\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>combinations</code> is a function.\",\"testString\":\"assert(typeof combinations === 'function', '<code>combinations</code> is a function.');\"},{\"text\":\"<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.\",\"testString\":\"assert.deepEqual(combinations(testInput1[0], testInput1[1]), testOutput1, '<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.');\"},{\"text\":\"<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>\",\"testString\":\"assert.deepEqual(combinations(testInput2[0], testInput2[1]), testOutput2, '<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function combinations (m, n) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const testInput1 = [3, 5];\\nconst testOutput1 = [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]];\\n\\nconst testInput2 = [4, 6];\\nconst testOutput2 = [[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 4, 5], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/comma-quibbling\",\"id\":\"5958469238c0d8d2632f46db\"},\"slug\":\"/coding-interview-prep/rosetta-code/combinations\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-combinations-dddb07824bd4ffd26d52.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Combinations\",\"description\":[\"Task:\",\"<p>Given non-negative integers  <big> m </big>  and  <big> n</big>,  generate all size  <big> m </big>  <a href=\\\"http://mathworld.wolfram.com/Combination.html\\\" title=\\\"link: http://mathworld.wolfram.com/Combination.html\\\">combinations</a>  of the integers from  <big> 0</big>  (zero)  to  <big> n-1 </big>  in sorted order  (each combination is sorted and the entire table is sorted).</p>\",\"Example:\",\"<p><big>3</big>  comb  <big> 5 </big>is:</p>\",\"<pre>\",\"0 1 2\",\"0 1 3\",\"0 1 4\",\"0 2 3\",\"0 2 4\",\"0 3 4\",\"1 2 3\",\"1 2 4\",\"1 3 4\",\"2 3 4\",\"</pre>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/combinations\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>combinations</code> is a function.\",\"testString\":\"assert(typeof combinations === 'function', '<code>combinations</code> is a function.');\"},{\"text\":\"<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.\",\"testString\":\"assert.deepEqual(combinations(testInput1[0], testInput1[1]), testOutput1, '<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.');\"},{\"text\":\"<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>\",\"testString\":\"assert.deepEqual(combinations(testInput2[0], testInput2[1]), testOutput2, '<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function combinations (m, n) {\\n  // Good luck!\\n  return true;\\n}\",\"head\":\"\",\"tail\":\"const testInput1 = [3, 5];\\nconst testOutput1 = [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]];\\n\\nconst testInput2 = [4, 6];\\nconst testOutput2 = [[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 4, 5], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/comma-quibbling\",\"id\":\"5958469238c0d8d2632f46db\"},\"slug\":\"/coding-interview-prep/rosetta-code/combinations\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-combinations.json\n// module id = 3358\n// module chunks = 163564873730684"],"sourceRoot":""}