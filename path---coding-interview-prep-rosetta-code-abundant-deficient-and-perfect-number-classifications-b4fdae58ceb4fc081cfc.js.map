{"version":3,"sources":["webpack:///path---coding-interview-prep-rosetta-code-abundant-deficient-and-perfect-number-classifications-b4fdae58ceb4fc081cfc.js","webpack:///./.cache/json/coding-interview-prep-rosetta-code-abundant-deficient-and-perfect-number-classifications.json"],"names":["webpackJsonp","3346","module","exports","data","challengeNode","title","description","challengeType","fields","slug","blockName","tests","text","testString","required","files","indexhtml","indexjs","key","ext","name","contents","head","tail","indexjsx","pathContext","challengeMeta","introPath","template","nextChallengePath","id"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,eAAiBC,MAAA,yDAAAC,aAAA,meAAAC,cAAA,EAAAC,QAA2lBC,KAAA,4FAAAC,UAAA,eAAAC,QAAwIC,KAAA,6BAAAC,WAAA,wEAAyHD,KAAA,6BAAAC,WAAA,sEAAuHD,KAAA,iCAAAC,WAAA,wEAA6HD,KAAA,iDAAAC,WAAA,kGAAsKC,YAAAC,OAAwBC,UAAA,KAAAC,SAA4BC,IAAA,UAAAC,IAAA,KAAAC,KAAA,QAAAC,SAAA,yCAA4FC,KAAA,GAAAC,KAAA,sCAAwDC,SAAA,QAAmBC,aAAgBC,eAAiBC,UAAA,GAAAC,SAAA,KAAAd,YAAAe,kBAAA,0DAAAC,GAAA,4BAA2JrB,KAAA","file":"path---coding-interview-prep-rosetta-code-abundant-deficient-and-perfect-number-classifications-b4fdae58ceb4fc081cfc.js","sourcesContent":["webpackJsonp([236155920838018],{\n\n/***/ 3346:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"challengeNode\":{\"title\":\"Abundant, deficient and perfect number classifications\",\"description\":[\"<p>它们根据适当的<a href=\\\"http://rosettacode.org/wiki/Proper divisors\\\" title=\\\"合适的除数\\\">除数</a>定义了三个正整数分类。</p>\",\"<p>假设$P(n)$是n的固有因数的和，其中固有因数都是正整数n而不是n本身。</p>\",\"<p>如果<code>P(n) < n</code>，那么n被分类为\\\"deficient\\\"</p>\",\"<p>如果<code>P(n) === n</code>，那么n被分类为\\\"perfect\\\"</p>\",\"<p>如果<code>P(n) > n</code>，那么n被分类为\\\"abundant\\\"</p>\",\"<p>例如：</p>\",\"<p>6含有1、2、3共3个除数</p>\",\"<p>1 + 2 + 3 = 6，因此6被分类为\\\"perfect\\\"</p>\",\"<p>实现一个函数，该函数计算三个分类中1到20000(包含)的整数的数量。将结果输出为以下格式的数组<code>[deficient, perfect, abundant]</code>。</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/abundant-deficient-and-perfect-number-classifications\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>getDPA</code> 是一个函数。\",\"testString\":\"assert(typeof getDPA === 'function', '<code>getDPA</code> 是一个函数。');\"},{\"text\":\"<code>getDPA</code> 应返回数组。\",\"testString\":\"assert(Array.isArray(getDPA(100)), '<code>getDPA</code> 应返回数组。');\"},{\"text\":\"<code>getDPA</code> 应返回长度为3的值。\",\"testString\":\"assert(getDPA(100).length === 3, '<code>getDPA</code> 应返回长度为3的值。');\"},{\"text\":\"<code>getDPA(20000)</code> 应等于[15043, 4, 4953]\",\"testString\":\"assert.deepEqual(getDPA(20000), solution, '<code>getDPA(20000)</code> 应等于[15043, 4, 4953]');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function getDPA (num) {\\n  // 祝你好运！\\n}\",\"head\":\"\",\"tail\":\"const solution = [15043, 4, 4953];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/accumulator-factory\",\"id\":\"594810f028c0303b75339acd\"},\"slug\":\"/coding-interview-prep/rosetta-code/abundant-deficient-and-perfect-number-classifications\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---coding-interview-prep-rosetta-code-abundant-deficient-and-perfect-number-classifications-b4fdae58ceb4fc081cfc.js","module.exports = {\"data\":{\"challengeNode\":{\"title\":\"Abundant, deficient and perfect number classifications\",\"description\":[\"<p>它们根据适当的<a href=\\\"http://rosettacode.org/wiki/Proper divisors\\\" title=\\\"合适的除数\\\">除数</a>定义了三个正整数分类。</p>\",\"<p>假设$P(n)$是n的固有因数的和，其中固有因数都是正整数n而不是n本身。</p>\",\"<p>如果<code>P(n) < n</code>，那么n被分类为\\\"deficient\\\"</p>\",\"<p>如果<code>P(n) === n</code>，那么n被分类为\\\"perfect\\\"</p>\",\"<p>如果<code>P(n) > n</code>，那么n被分类为\\\"abundant\\\"</p>\",\"<p>例如：</p>\",\"<p>6含有1、2、3共3个除数</p>\",\"<p>1 + 2 + 3 = 6，因此6被分类为\\\"perfect\\\"</p>\",\"<p>实现一个函数，该函数计算三个分类中1到20000(包含)的整数的数量。将结果输出为以下格式的数组<code>[deficient, perfect, abundant]</code>。</p>\"],\"challengeType\":5,\"fields\":{\"slug\":\"/coding-interview-prep/rosetta-code/abundant-deficient-and-perfect-number-classifications\",\"blockName\":\"Rosetta Code\",\"tests\":[{\"text\":\"<code>getDPA</code> 是一个函数。\",\"testString\":\"assert(typeof getDPA === 'function', '<code>getDPA</code> 是一个函数。');\"},{\"text\":\"<code>getDPA</code> 应返回数组。\",\"testString\":\"assert(Array.isArray(getDPA(100)), '<code>getDPA</code> 应返回数组。');\"},{\"text\":\"<code>getDPA</code> 应返回长度为3的值。\",\"testString\":\"assert(getDPA(100).length === 3, '<code>getDPA</code> 应返回长度为3的值。');\"},{\"text\":\"<code>getDPA(20000)</code> 应等于[15043, 4, 4953]\",\"testString\":\"assert.deepEqual(getDPA(20000), solution, '<code>getDPA(20000)</code> 应等于[15043, 4, 4953]');\"}]},\"required\":[],\"files\":{\"indexhtml\":null,\"indexjs\":{\"key\":\"indexjs\",\"ext\":\"js\",\"name\":\"index\",\"contents\":\"function getDPA (num) {\\n  // 祝你好运！\\n}\",\"head\":\"\",\"tail\":\"const solution = [15043, 4, 4953];\"},\"indexjsx\":null}}},\"pathContext\":{\"challengeMeta\":{\"introPath\":\"\",\"template\":null,\"required\":[],\"nextChallengePath\":\"/coding-interview-prep/rosetta-code/accumulator-factory\",\"id\":\"594810f028c0303b75339acd\"},\"slug\":\"/coding-interview-prep/rosetta-code/abundant-deficient-and-perfect-number-classifications\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/coding-interview-prep-rosetta-code-abundant-deficient-and-perfect-number-classifications.json\n// module id = 3346\n// module chunks = 236155920838018"],"sourceRoot":""}